{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/essays/WalletRecovery.md?vue&type=template&id=777ec0c8&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/essays/WalletRecovery.md","mtime":1577025914451},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJyZWNvdmVyLXdhc2FiaS13YWxsZXQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JlY292ZXItd2FzYWJpLXdhbGxldCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlY292ZXIgV2FzYWJpIFdhbGxldCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIGFyZSB0d28gZGlmZmVyZW50IHdheXMgdGhhdCB5b3UgY2FuIHJlY292ZXIgYW4gYWxyZWFkeSB1c2VkIHdhbGxldCBpbiBXYXNhYmkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRhYmxlLW9mLWNvbnRlbnRzIiB9LCBbCiAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI21uZW1vbmljLXJlY292ZXJ5LXdvcmRzLWFuZC1wYXNzd29yZCIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIk1uZW1vbmljIFJlY292ZXJ5IFdvcmRzIGFuZCBQYXNzd29yZCIpXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjYmFja3VwLXdhbGxldC1maWxlLWFuZC1wYXNzd29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCYWNrdXAgV2FsbGV0IEZpbGUgYW5kIFBhc3N3b3JkIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAibW5lbW9uaWMtcmVjb3Zlcnktd29yZHMtYW5kLXBhc3N3b3JkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNtbmVtb25pYy1yZWNvdmVyeS13b3Jkcy1hbmQtcGFzc3dvcmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBNbmVtb25pYyBSZWNvdmVyeSBXb3JkcyBhbmQgUGFzc3dvcmQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIldhc2FiaSB1c2VzIHRoZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTM5LW1uZW1vbmljLWNvZGUtZm9yLWdlbmVyYXRpbmctZGV0ZXJtaW5pc3RpYy1rZXlzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDM5IildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgbW5lbW9uaWMgY29kZSBmb3IgZ2VuZXJhdGluZyAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTMyLWhpZXJhcmNoaWNhbC1kZXRlcm1pbmlzdGljLXdhbGxldHMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCSVAgMzIiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBoaWVyYXJjaGljYWwgZGV0ZXJtaW5pc3RpYyB3YWxsZXRzLlxuV2l0aCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJib3RoIildKSwKICAgICAgICAgIF92bS5fdigiIHlvdXIgcGFzc3dvcmQgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiYW5kIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGUgZ2VuZXJhdGVkIDEyIG1uZW1vbmljIHJlY292ZXJ5IHdvcmRzIHlvdSBjYW4gaW1wb3J0IGFsbCB0aGUgbmVjZXNzYXJ5IHNlY3JldHMgdG8gV2FzYWJpIGFuZCBkbyBhIGZ1bGwgd2FsbGV0IHJlY292ZXJ5LlxuWW91IGNhbiBzZXQgYSB3YWxsZXQgbmFtZSBzbyB0aGF0IHlvdSBrbm93IGZvciB3aGF0IHJlYXNvbiB0aGUgd2FsbGV0IGlzIHVzZWQuXG5XaGVuIHlvdSB0eXBlIGluIHlvdXIgMTIgcmVjb3Zlcnkgd29yZHMsIFdhc2FiaSBjaGVja3MgdGhlIHNwZWxsaW5nIGJhc2VkIG9uIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDAzOS9lbmdsaXNoLnR4dCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIm9mZmljaWFsIHdvcmRsaXN0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgYW5kIG9mZmVycyB0aGUgcmlnaHQgd29yZCBiZWxvdyB0aGUgdGV4dGJveC5cbk5vdyB5b3UgY2FuIGNsaWNrIG9uICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlY292ZXIiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLCBhbmQgV2FzYWJpIHdpbGwgcmVjb3ZlciB5b3VyIHdhbGxldCwgYW5kIHNjYW4gdGhlIGJsb2NrY2hhaW4gZm9yIHRyYW5zYWN0aW9ucyBvZiB0aGlzIHdhbGxldC5cbkFmdGVyIGEgc2hvcnQgbG9hZGluZyBwZXJpb2QsIHlvdSBjYW4gdXNlIFdhc2FiaSBhcyB1c3VhbC4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6ICIvV2FsbGV0UmVjb3ZlcnkucG5nIiwgYWx0OiAiIiB9IH0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayBkYW5nZXIiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFtfdm0uX3YoIldBUk5JTkciKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQXQgcmVjb3ZlcnksIFdhc2FiaSBpcyB1bmFibGUgdG8gY2hlY2sgaWYgeW91ciBwYXNzd29yZCBpcyBjb3JyZWN0IG9yIG5vdC5cbklmIHlvdSB0eXBlIGEgd3JvbmcgcGFzc3dvcmQgYSBjb21wbGV0ZWx5IGRpZmZlcmVudCB3YWxsZXQgd2lsbCBiZSByZWNvdmVyZWQuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSBjYW4gYWxzbyB0b2dnbGUgdGhlIGFkdmFuY2VkIG9wdGlvbiBhbmQgc3BlY2lmeSBhbiBhY2NvdW50IGtleSBwYXRoIG9mIHRoZSBIRCB3YWxsZXQgc3RydWN0dXJlLlxuVGhlIGdhcCBsaW1pdCBpcyBhYm91dCBob3cgZmFyIFdhc2FiaSB3aWxsIGNoZWNrIHRoZSBIRCB3YWxsZXQgc3RydWN0dXJlIGZvciBjb25zZWN1dGl2ZSBhZGRyZXNzZXMgdGhhdCBoYXZlIG5vIGNvaW5zLCBpbiBzb21lIGNhc2VzIHlvdSBtYXkgd2FudCB0byBpbmNyZWFzZSB0aGlzIGxpbWl0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiL1dhbGxldFJlY292ZXJ5QWR2YW5jZWQucG5nIiwgYWx0OiAiIiB9IH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImJhY2t1cC13YWxsZXQtZmlsZS1hbmQtcGFzc3dvcmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2JhY2t1cC13YWxsZXQtZmlsZS1hbmQtcGFzc3dvcmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCYWNrdXAgV2FsbGV0IEZpbGUgYW5kIFBhc3N3b3JkIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJXYXNhYmkgV2FsbGV0IGNyZWF0ZXMgYSBiYWNrdXAgb2YgeW91ciB3YWxsZXQgZmlsZSBpbnNpZGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIldhbGxldEJhY2t1cHMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgaW4geW91ciAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtVXNlV2FzYWJpLmh0bWwjd2hlcmUtY2FuLWktZmluZC10aGUtd2FzYWJpLWRhdGEtZm9sZGVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiV2FzYWJpIGRhdGEgZm9sZGVyIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLlxuSWYgeW91IGhhdmUgZG9uZSBhIGJhY2t1cCBvZiB0aGlzIGZpbGUsIHRoZW4geW91IGNhbiBjb3B5IGl0IHRvIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJXYWxsZXRzIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBmb2xkZXIsIGFuZCB1cG9uIHRoZSBuZXh0IHJlc3RhcnQgb2YgV2FzYWJpLCBpdCB3aWxsIHNob3cgdGhpcyB3YWxsZXQgaW4gdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIldhbGxldCBNYW5hZ2VyIildKSwKICAgICAgICAgIF92bS5fdigiLCBmcm9tIHRoZXJlIHlvdSBjYW4gb3BlbiBpdCBhcyB1c3VhbC4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgd2FybmluZyIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiV0FSTklORyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJNYWtlIHN1cmUgdG8gYmFjayB1cCB5b3VyIHBhc3N3b3JkIHNlcGFyYXRlbHkgYmVjYXVzZSBpdCBpcyBuZWNlc3NhcnkgdG8gc3BlbmQgeW91ciBiaXRjb2luLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}