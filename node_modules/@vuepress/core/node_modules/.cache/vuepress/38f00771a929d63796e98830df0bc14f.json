{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/using-wasabi/BIPs.md?vue&type=template&id=f068e69c&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/using-wasabi/BIPs.md","mtime":1579942310136},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJzdXBwb3J0ZWQtYmlwcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3VwcG9ydGVkLWJpcHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN1cHBvcnRlZCBCSVBzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjd2hhdC1pcy1zdXBwb3J0ZWQtdG9kYXkiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIldoYXQgaXMgc3VwcG9ydGVkIHRvZGF5IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQklQcy5odG1sI3doYXQtd2lsbC1iZS1zdXBwb3J0ZWQtaW4tdHdvd2Vla3MiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJXaGF0IHdpbGwgYmUgc3VwcG9ydGVkIGluICN0d293ZWVrcyIpXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjd2hhdC1pcy1ub3Qtc3VwcG9ydGVkIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJXaGF0IGlzIG5vdCBzdXBwb3J0ZWQiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2FzYWJpIFdhbGxldCBzdHJpdmVzIHRvd2FyZCBlc3RhYmxpc2hpbmcgc29saWQgaW5kdXN0cnkgYmVzdCBwcmFjdGljZXMgYW5kIHN0YW5kYXJkcy5cbkhlcmUgaXMgYSBsaXN0IG9mIGFsbCB0aGUgc3VwcG9ydGVkIGFuZCBpbnRlZ3JhdGVkIEJpdGNvaW4gSW1wcm92ZW1lbnQgUHJvcG9zYWxzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIndoYXQtaXMtc3VwcG9ydGVkLXRvZGF5IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN3aGF0LWlzLXN1cHBvcnRlZC10b2RheSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgaXMgc3VwcG9ydGVkIHRvZGF5IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGV0YWlscyIsIHsgYXR0cnM6IHsgaWQ6ICJiaXAtMjEtdXJpLXNjaGVtZSIgfSB9LCBbCiAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2JpcC0yMS11cmktc2NoZW1lIiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDIxOiBVUkkgU2NoZW1lIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDAyMS5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCSVAgMjE6IFVSSSBTY2hlbWUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImJpcC0zMi1oaWVyYXJjaGljYWwtZGV0ZXJtaW5pc3RpYy13YWxsZXRzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNiaXAtMzItaGllcmFyY2hpY2FsLWRldGVybWluaXN0aWMtd2FsbGV0cyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDMyOiBIaWVyYXJjaGljYWwgRGV0ZXJtaW5pc3RpYyBXYWxsZXRzIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDAzMi5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgMzI6IEhpZXJhcmNoaWNhbCBEZXRlcm1pbmlzdGljIFdhbGxldHMiKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRldGFpbHMiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJiaXAtMzgtcGFzc3dvcmQtcHJvdGVjdGVkLXByaXZhdGUta2V5IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNiaXAtMzgtcGFzc3dvcmQtcHJvdGVjdGVkLXByaXZhdGUta2V5IiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJCSVAgMzg6IFBhc3N3b3JkLVByb3RlY3RlZCBQcml2YXRlIEtleSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwMzgubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQklQIDM4OiBQYXNzd29yZC1Qcm90ZWN0ZWQgUHJpdmF0ZSBLZXkiKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRldGFpbHMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiYmlwLTM5LW1uZW1vbmljLWNvZGUtZm9yLWdlbmVyYXRpbmctZGV0ZXJtaW5pc3RpYy1rZXlzIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiI2JpcC0zOS1tbmVtb25pYy1jb2RlLWZvci1nZW5lcmF0aW5nLWRldGVybWluaXN0aWMta2V5cyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgICAgIF92bS5fdigiQklQIDM5OiBNbmVtb25pYyBDb2RlIGZvciBHZW5lcmF0aW5nIERldGVybWluaXN0aWMgS2V5cyIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDM5Lm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJCSVAgMzk6IE1uZW1vbmljIENvZGUgZm9yIEdlbmVyYXRpbmcgRGV0ZXJtaW5pc3RpYyBLZXlzIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRldGFpbHMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiYmlwLTQ0LW11bHRpLWFjY291bnQtaGllcmFyY2h5LWZvci1kZXRlcm1pbmlzdGljLXdhbGxldHMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICIjYmlwLTQ0LW11bHRpLWFjY291bnQtaGllcmFyY2h5LWZvci1kZXRlcm1pbmlzdGljLXdhbGxldHMiLAogICAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQklQIDQ0OiBNdWx0aS1BY2NvdW50IEhpZXJhcmNoeSBmb3IgRGV0ZXJtaW5pc3RpYyBXYWxsZXRzIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNDQubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkJJUCA0NDogTXVsdGktQWNjb3VudCBIaWVyYXJjaHkgZm9yIERldGVybWluaXN0aWMgV2FsbGV0cyIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkZXRhaWxzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYmlwLTcyLWJpdGNvaW4tdXJpLWV4dGVuc2lvbnMtZm9yLXBheW1lbnQtcHJvdG9jb2wiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC03Mi1iaXRjb2luLXVyaS1leHRlbnNpb25zLWZvci1wYXltZW50LXByb3RvY29sIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgNzI6IGJpdGNvaW46IHVyaSBleHRlbnNpb25zIGZvciBQYXltZW50IFByb3RvY29sIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNzIubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQklQIDcyOiBiaXRjb2luOiB1cmkgZXh0ZW5zaW9ucyBmb3IgUGF5bWVudCBQcm90b2NvbCIpLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImJpcC04NC1kZXJpdmF0aW9uLXNjaGVtZS1mb3ItcDJ3cGtoLWJhc2VkLWFjY291bnRzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNiaXAtODQtZGVyaXZhdGlvbi1zY2hlbWUtZm9yLXAyd3BraC1iYXNlZC1hY2NvdW50cyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgICAgIF92bS5fdigiQklQIDg0OiBEZXJpdmF0aW9uIHNjaGVtZSBmb3IgUDJXUEtIIEJhc2VkIEFjY291bnRzIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInAiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDg0Lm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiQklQIDg0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGRlZmluZXMgYSBzdGFuZGFyZCBkZXJpdmF0aW9uIHNjaGVtZSBmb3IgaGllcmFyY2hpY2FsIGRldGVybWluaXN0aWMgd2FsbGV0cyBCSVAgMzIsIHNwZWNpZmljYWxseSBmb3Igc2VncmVnYXRlZCB3aXRuZXNzIFAyV1BLSCAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTE3My1iYXNlMzItYWRkcmVzcy1mb3JtYXQtZm9yLW5hdGl2ZS12MC0xNi13aXRuZXNzLW91dHB1dHMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJCSVAgMTczIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiLlxuVGhpcyBhbGxvd3MgdG8gZ2VuZXJhdGUgb25lIHJvb3QgbWFzdGVyIHNlZWQgdGhhdCBjYW4gZGVyaXZlIGEgdHJlZSBvZiBwdWJsaWMga2V5cyB3aXRoIGRpZmZlcmVudCBwYXRocyAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTQ0LW11bHRpLWFjY291bnQtaGllcmFyY2h5LWZvci1kZXRlcm1pbmlzdGljLXdhbGxldHMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJCSVAgNDQiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiLlxuIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJtIC8gcHVycG9zZScgLyBjb2luX3R5cGUnIC8gYWNjb3VudCcgLyBjaGFuZ2UgLyBhZGRyZXNzX2luZGV4IgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiLlxuV2FzYWJpIHNwZWNpZmljYWxseSB1c2VzIHRoaXMgc3RhbmRhcmQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtLzg0Jy8wJy8wJyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIi5cbk9uIHRoZSBUZXN0TmV0IGFuZCBvbiB0aGUgUmVnVGVzdCBXYXNhYmkgZGV2aWF0ZXMgZnJvbSB0aGUgc3RhbmRhcmQgYW5kIHVzZXMgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtLzg0Jy8wJy8wJyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaW5zdGVhZCBvZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm0vODQnLzEnLzAnIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImJpcC0xMjUtb3B0LWluLWZ1bGwtcmVwbGFjZS1ieS1mZWUtc2lnbmFsaW5nIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNiaXAtMTI1LW9wdC1pbi1mdWxsLXJlcGxhY2UtYnktZmVlLXNpZ25hbGluZyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDEyNTogT3B0LUluIGZ1bGwgUmVwbGFjZS1ieS1GZWUgU2lnbmFsaW5nIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDEyNS5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgMTI1OiBPcHQtSW4gZnVsbCBSZXBsYWNlLWJ5LUZlZSBTaWduYWxpbmciKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBpcyBhY3RpdmF0ZWQgZm9yIGEgc3Vic2V0IG9mIHRyYW5zYWN0aW9ucyBjaG9zZW4gcmFuZG9tbHksIHNvIHRvIGRlY3JlYXNlIHdhbGxldCBmaW5nZXJwcmludGluZy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImJpcC0xNDEtc2VncmVnYXRlZC13aXRuZXNzLWNvbnNlbnN1cy1sYXllciIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdW1tYXJ5IiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICIjYmlwLTE0MS1zZWdyZWdhdGVkLXdpdG5lc3MtY29uc2Vuc3VzLWxheWVyIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJCSVAgMTQxOiBTZWdyZWdhdGVkIFdpdG5lc3MgKENvbnNlbnN1cyBMYXllcikiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTQxLm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkJJUCAxNDE6IFNlZ3JlZ2F0ZWQgV2l0bmVzcyAoQ29uc2Vuc3VzIExheWVyKSIpLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImJpcC0xNDMtdHJhbnNhY3Rpb24tc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mb3ItdmVyc2lvbi0wLXdpdG5lc3MtcHJvZ3JhbSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdW1tYXJ5IiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgIiNiaXAtMTQzLXRyYW5zYWN0aW9uLXNpZ25hdHVyZS12ZXJpZmljYXRpb24tZm9yLXZlcnNpb24tMC13aXRuZXNzLXByb2dyYW0iLAogICAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQklQIDE0MzogVHJhbnNhY3Rpb24gU2lnbmF0dXJlIFZlcmlmaWNhdGlvbiBmb3IgVmVyc2lvbiAwIFdpdG5lc3MgUHJvZ3JhbSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTQzLm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJCSVAgMTQzOiBUcmFuc2FjdGlvbiBTaWduYXR1cmUgVmVyaWZpY2F0aW9uIGZvciBWZXJzaW9uIDAgV2l0bmVzcyBQcm9ncmFtIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRldGFpbHMiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJiaXAtMTQ0LXNlZ3JlZ2F0ZWQtd2l0bmVzcy1wZWVyLXNlcnZpY2VzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNiaXAtMTQ0LXNlZ3JlZ2F0ZWQtd2l0bmVzcy1wZWVyLXNlcnZpY2VzIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJCSVAgMTQ0OiBTZWdyZWdhdGVkIFdpdG5lc3MgKFBlZXIgU2VydmljZXMpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDE0NC5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgMTQ0OiBTZWdyZWdhdGVkIFdpdG5lc3MgKFBlZXIgU2VydmljZXMpIiksCiAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkZXRhaWxzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYmlwLTE1OC1jb21wYWN0LWJsb2NrLWZpbHRlcnMtZm9yLWxpZ2h0LWNsaWVudHMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC0xNTgtY29tcGFjdC1ibG9jay1maWx0ZXJzLWZvci1saWdodC1jbGllbnRzIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgMTU4OiBDb21wYWN0IEJsb2NrIEZpbHRlcnMgZm9yIExpZ2h0IENsaWVudHMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicCIsCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAxNTgubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJCSVAgMTU4IEJsb2NrIGZpbHRlcnMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIGFyZSB0aGUgcmV2ZXJzZSBvZiAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTM3LWNvbm5lY3Rpb24tYmxvb20tZmlsdGVycyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAzNyBCbG9vbSBmaWx0ZXJzIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAnIC0gdGhlIGNsaWVudCB3aWxsIGNvbm5lY3QgdG8gYSBCaXRjb2luIG5vZGUgYW5kIHNheSAiSGV5LCBmb3IgZXZlcnkgYmxvY2ssIEkgd291bGQgbGlrZSBhIGNvbmRlbnNlZCBsaXN0IG9mIGFkZHJlc3NlcyB0aGF0IHdlcmUgYWZmZWN0ZWQuIlxuV2hhdCB3b3VsZCBoYXBwZW4gbmV4dCBpcyB0aGF0IGEgQml0Y29pbiBub2RlIHdvdWxkIGdpdmUgdGhlIHNhbWUgZmlsdGVyIHRoYXQgaXQgZ2l2ZXMgdG8gZXZlcnkgY2xpZW50LCBiZWNhdXNlIHRoZSBjbGllbnQgaGFzIHRodXMgZmFyIHJldmVhbGVkIG5vdGhpbmchXG5PbmNlIGEgYmxvY2sgZmlsdGVyIGhhcyBjb21lIGluIGFuZCB0aGUgY2xpZW50IGJlbGlldmVzIHRoYXQgdGhlcmUgaXMgYSB0cmFuc2FjdGlvbiB0aGF0IGFmZmVjdHMgdGhlIGNsaWVudCwgdGhlIGNsaWVudCBwaW5ncyBhIHNpbmdsZSByYW5kb20gbm9kZSBmb3IgYSBzaW5nbGUgZnVsbCBibG9jay5cbkl0IHRoZW4gcGFyc2VzIHRoZSBibG9jaywgYW5kIGZpbmRzIHRoZSB0cmFuc2FjdGlvbi5cblRoaXMgaGFzIGJlZW4gcHJvdmVuIHRvIGJlIGJ5IGZhciB0aGUgYmVzdCB3YXkgdG8gZG8gbGlnaHQgY2xpZW50cyBwcml2YXRlbHksIGFuZCBpcyB0aGUgd2F5IFdhc2FiaSB3b3JrcyB0b2RheS4nCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJiaXAtMTczLWJhc2UzMi1hZGRyZXNzLWZvcm1hdC1mb3ItbmF0aXZlLXYwLTE2LXdpdG5lc3Mtb3V0cHV0cyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdW1tYXJ5IiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgIiNiaXAtMTczLWJhc2UzMi1hZGRyZXNzLWZvcm1hdC1mb3ItbmF0aXZlLXYwLTE2LXdpdG5lc3Mtb3V0cHV0cyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJCSVAgMTczOiBCYXNlMzIgYWRkcmVzcyBmb3JtYXQgZm9yIG5hdGl2ZSB2MC0xNiB3aXRuZXNzIG91dHB1dHMiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDE3My5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiQklQIDE3MzogQmFzZTMyIGFkZHJlc3MgZm9ybWF0IGZvciBuYXRpdmUgdjAtMTYgd2l0bmVzcyBvdXRwdXRzIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRldGFpbHMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiYmlwLTE3NC1wYXJ0aWFsbHktc2lnbmVkLWJpdGNvaW4tdHJhbnNhY3Rpb24tZm9ybWF0IiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC0xNzQtcGFydGlhbGx5LXNpZ25lZC1iaXRjb2luLXRyYW5zYWN0aW9uLWZvcm1hdCIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgICAgIF92bS5fdigiQklQIDE3NDogUGFydGlhbGx5IFNpZ25lZCBCaXRjb2luIFRyYW5zYWN0aW9uIEZvcm1hdCIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTc0Lm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkJJUCAxNzQ6IFBhcnRpYWxseSBTaWduZWQgQml0Y29pbiBUcmFuc2FjdGlvbiBGb3JtYXQiKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoImRldGFpbHMiLCB7IGF0dHJzOiB7IGlkOiAiaGFyZHdhcmUtd2FsbGV0LWludGVyZmFjZSIgfSB9LCBbCiAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNoYXJkd2FyZS13YWxsZXQtaW50ZXJmYWNlIiwKICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImg0IiwgW192bS5fdigiSGFyZHdhcmUgV2FsbGV0IEludGVyZmFjZSIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luLWNvcmUvSFdJIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiSGFyZHdhcmUgV2FsbGV0IEludGVyZmFjZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGF0LXdpbGwtYmUtc3VwcG9ydGVkLWluLXR3b3dlZWtzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN3aGF0LXdpbGwtYmUtc3VwcG9ydGVkLWluLXR3b3dlZWtzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hhdCB3aWxsIGJlIHN1cHBvcnRlZCBpbiAjdHdvd2Vla3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJkZXRhaWxzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiYmlwLTQ3LXJldXNhYmxlLXBheW1lbnQtY29kZXMtZm9yLWhpZXJhcmNoaWNhbC1kZXRlcm1pbmlzdGljLXdhbGxldHMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICIjYmlwLTQ3LXJldXNhYmxlLXBheW1lbnQtY29kZXMtZm9yLWhpZXJhcmNoaWNhbC1kZXRlcm1pbmlzdGljLXdhbGxldHMiLAogICAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQklQIDQ3OiBSZXVzYWJsZSBQYXltZW50IENvZGVzIGZvciBIaWVyYXJjaGljYWwgRGV0ZXJtaW5pc3RpYyBXYWxsZXRzIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNDcubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkJJUCA0NyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgZGVmaW5lcyBhIHRlY2huaXF1ZSBmb3IgY3JlYXRpbmcgYSBwYXltZW50IGNvZGUgd2hpY2ggY2FuIGJlIHB1YmxpY2x5IGFkdmVydGlzZWQgYW5kIGFzc29jaWF0ZWQgd2l0aCBhIHJlYWwtbGlmZSBpZGVudGl0eSB3aXRob3V0IGNyZWF0aW5nIHRoZSBsb3NzIG9mIHNlY3VyaXR5IG9yIHByaXZhY3kgaW5oZXJlbnQgdG8gUDJQS0ggYWRkcmVzcyByZXVzZS4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJUaGlzIEJJUCBpcyBhIHBhcnRpY3VsYXIgYXBwbGljYXRpb24gb2YgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDQzLm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCSVAgNDMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGFuZCBpcyBpbnRlbmRlZCB0byBzdXBwbGVtZW50IEhEIHdhbGxldHMgd2hpY2ggaW1wbGVtZW50IEJJUDQ0LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkZXRhaWxzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYmlwLTE1Ni1kYW5kZWxpb24tcHJpdmFjeS1lbmhhbmNpbmctcm91dGluZyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdW1tYXJ5IiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICIjYmlwLTE1Ni1kYW5kZWxpb24tcHJpdmFjeS1lbmhhbmNpbmctcm91dGluZyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDE1NjogRGFuZGVsaW9uIC0gUHJpdmFjeSBFbmhhbmNpbmcgUm91dGluZyIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAxNTYubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAxNTYgRGFuZGVsaW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBpcyBhIHRyYW5zYWN0aW9uIHJvdXRpbmcgbWVjaGFuaXNtIHRoYXQgcHJvdmlkZXMgZm9ybWFsIGFub255bWl0eSBndWFyYW50ZWVzIGFnYWluc3QgYXR0YWNrcyBvbiBCaXRjb2luJ3MgdHJhbnNhY3Rpb24gc3ByZWFkaW5nIHByb3RvY29sLlxuV2hlbiBhIG5vZGUgZ2VuZXJhdGVzIGEgdHJhbnNhY3Rpb24gd2l0aG91dCBEYW5kZWxpb24sIGl0IHRyYW5zbWl0cyB0aGF0IHRyYW5zYWN0aW9uIHRvIGl0cyBwZWVycyB3aXRoIGluZGVwZW5kZW50LCBleHBvbmVudGlhbCBkZWxheXMuXG5UaGlzIGFwcHJvYWNoLCBrbm93biBhcyBkaWZmdXNpb24gaW4gYWNhZGVtaWEsIGFsbG93cyBuZXR3b3JrIGFkdmVyc2FyaWVzIHRvIGxpbmsgdHJhbnNhY3Rpb25zIHRvIElQIGFkZHJlc3Nlcy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICdEYW5kZWxpb24gbWl0aWdhdGVzIHRoaXMgY2xhc3Mgb2YgYXR0YWNrcyBieSBzZW5kaW5nIHRyYW5zYWN0aW9ucyBvdmVyIGEgcmFuZG9tbHkgc2VsZWN0ZWQgcGF0aCBiZWZvcmUgZGlmZnVzaW9uLlxuVHJhbnNhY3Rpb25zIHRyYXZlbCBhbG9uZyB0aGlzIHBhdGggZHVyaW5nIHRoZSAic3RlbSBwaGFzZSIgYW5kIGFyZSB0aGVuIGRpZmZ1c2VkIGR1cmluZyB0aGUgImZsdWZmIHBoYXNlIiAoaGVuY2UgRGFuZGVsaW9uKS5cbldlIGhhdmUgc2hvd24gdGhhdCB0aGlzIHJvdXRpbmcgcHJvdG9jb2wgcHJvdmlkZXMgbmVhci1vcHRpbWFsIGFub255bWl0eSBndWFyYW50ZWVzIGFtb25nIHNjaGVtZXMgdGhhdCBkbyBub3QgaW50cm9kdWNlIGFkZGl0aW9uYWwgZW5jcnlwdGlvbiBtZWNoYW5pc21zLicKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJkZXRhaWxzIiwgeyBhdHRyczogeyBpZDogImJpcC0xNTctY2xpZW50LXNpZGUtYmxvY2stZmlsdGVyaW5nIiB9IH0sIFsKICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC0xNTctY2xpZW50LXNpZGUtYmxvY2stZmlsdGVyaW5nIiwKICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDE1NzogQ2xpZW50IFNpZGUgQmxvY2sgRmlsdGVyaW5nIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDE1Ny5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQklQIDE1NyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgZGVzY3JpYmVzIGEgbmV3IGxpZ2h0IGNsaWVudCBwcm90b2NvbCBpbiBCaXRjb2luIHRoYXQgaW1wcm92ZXMgdXBvbiBjdXJyZW50bHkgYXZhaWxhYmxlIG9wdGlvbnMuXG5UaGUgc3RhbmRhcmQgbGlnaHQgY2xpZW50IHByb3RvY29sIGluIHVzZSB0b2RheSwgZGVmaW5lZCBpbiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdG86ICIvdXNpbmctd2FzYWJpL0JJUC5odG1sI2JpcC0zNy1jb25uZWN0aW9uLWJsb29tLWZpbHRlcnMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCSVAgMzciKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIsIGhhcyBrbm93biBmbGF3cyB0aGF0IHdlYWtlbiB0aGUgc2VjdXJpdHkgYW5kIHByaXZhY3kgb2YgY2xpZW50cyBhbmQgYWxsb3cgZGVuaWFsLW9mLXNlcnZpY2UgYXR0YWNrIHZlY3RvcnMgb24gZnVsbCBub2Rlcy5cblRoZSBuZXcgcHJvdG9jb2wgb3ZlcmNvbWVzIHRoZXNlIGlzc3VlcyBieSBhbGxvd2luZyBsaWdodCBjbGllbnRzIHRvIG9idGFpbiBjb21wYWN0IHByb2JhYmlsaXN0aWMgZmlsdGVycyBvZiBibG9jayBjb250ZW50IGZyb20gZnVsbCBub2RlcyBhbmQgZG93bmxvYWQgZnVsbCBibG9ja3MgaWYgdGhlIGZpbHRlciBtYXRjaGVzIHJlbGV2YW50IGRhdGEuIgogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJOZXcgUDJQIG1lc3NhZ2VzIGVtcG93ZXIgbGlnaHQgY2xpZW50cyB0byBzZWN1cmVseSBzeW5jIHRoZSBibG9ja2NoYWluIHdpdGhvdXQgcmVseWluZyBvbiBhIHRydXN0ZWQgc291cmNlLlxuVGhpcyBCSVAgYWxzbyBkZWZpbmVzIGEgZmlsdGVyIGhlYWRlciwgd2hpY2ggc2VydmVzIGFzIGEgY29tbWl0bWVudCB0byBhbGwgZmlsdGVycyBmb3IgcHJldmlvdXMgYmxvY2tzIGFuZCBwcm92aWRlcyB0aGUgYWJpbGl0eSB0byBlZmZpY2llbnRseSBkZXRlY3QgbWFsaWNpb3VzIG9yIGZhdWx0eSBwZWVycyBzZXJ2aW5nIGludmFsaWQgZmlsdGVycy5cblRoZSByZXN1bHRpbmcgcHJvdG9jb2wgZ3VhcmFudGVlcyB0aGF0IGxpZ2h0IGNsaWVudHMgd2l0aCBhdCBsZWFzdCBvbmUgaG9uZXN0IHBlZXIgYXJlIGFibGUgdG8gaWRlbnRpZnkgdGhlIGNvcnJlY3QgYmxvY2sgZmlsdGVycy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkZXRhaWxzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYmlwLTMyMi1nZW5lcmljLW1lc3NhZ2Utc2lnbmluZy1mb3JtYXQiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC0zMjItZ2VuZXJpYy1tZXNzYWdlLXNpZ25pbmctZm9ybWF0IiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJCSVAgMzIyOiBHZW5lcmljIE1lc3NhZ2UgU2lnbmluZyBGb3JtYXQiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMzIyLm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCSVAgMzIyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBpcyBhIHN0YW5kYXJkIGZvciBpbnRlcm9wZXJhYmxlIGdlbmVyaWMgc2lnbmVkIG1lc3NhZ2VzIGJhc2VkIG9uIHRoZSBCaXRjb2luIFNjcmlwdCBmb3JtYXQuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoImRldGFpbHMiLCB7IGF0dHJzOiB7IGlkOiAiYmlwLTMyNS1zaWduZXQiIH0gfSwgWwogICAgICAgIF9jKCJzdW1tYXJ5IiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNiaXAtMzI1LXNpZ25ldCIsICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkJJUCAzMjU6IFNpZ25ldCIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAzMjUubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDMyNSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGlzIGEgbmV3IG1vZGVsIGZvciBhIHRlc3RpbmcgbmV0d29yayBvZiBCaXRjb2luIHRoYXQgaXMgYmFzZWQgb24gYmxvY2sgc2lnbmluZywgbm90IGJsb2NrIG1pbmluZy4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYmlwLTM0MC1zY2hub3JyLXNpZ25hdHVyZXMtZm9yLXNlY3AyNTZrMSIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC0zNDAtc2Nobm9yci1zaWduYXR1cmVzLWZvci1zZWNwMjU2azEiLAogICAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDM0MDogU2Nobm9yciBTaWduYXR1cmVzIGZvciBzZWNwMjU2azEiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vc2lwYS9iaXBzL2Jsb2IvYmlwLXNjaG5vcnIvYmlwLXNjaG5vcnIubWVkaWF3aWtpIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQklQIDM0MCBTY2hub3JyIFNpZ25hdHVyZXMgZm9yIHNlY3AyNTZrMSIpLAogICAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGlzIGEgZGlnaXRhbCBzaWduYXR1cmUgc2NoZW1lIHdoaWNoIGhhcyBtYW55IGJlbmVmaXRzIG92ZXIgdGhlIHN0YXR1cy1xdW8gRUNEU0EuXG5PbmUgYWR2YW50YWdlIGlzIHRoYXQgYW55IE4tb2YtTiBhbmQgTS1vZi1OIG11bHRpc2lnbmF0dXJlIGNhbiBiZSBlYXNpbHkgbWFkZSB0byBsb29rIGxpa2UgYSBzaW5nbGUtc2lnIHdoZW4gaW5jbHVkZWQgb24gdGhlIGJsb2NrY2hhaW4uIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJiaXAtMzQxLXRhcHJvb3Qtc2Vnd2l0LXZlcnNpb24tMS1vdXRwdXQtc3BlbmRpbmctcnVsZXMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICIjYmlwLTM0MS10YXByb290LXNlZ3dpdC12ZXJzaW9uLTEtb3V0cHV0LXNwZW5kaW5nLXJ1bGVzIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgMzQxOiBUYXByb290OiBTZWdXaXQgdmVyc2lvbiAxIG91dHB1dCBzcGVuZGluZyBydWxlcyIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3NpcGEvYmlwcy9ibG9iL2JpcC1zY2hub3JyL2JpcC10YXByb290Lm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkJJUCAzNDEgVGFwcm9vdDogU2VnV2l0IHZlcnNpb24gMSBvdXRwdXQgc3BlbmRpbmcgcnVsZXMiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIGlzIGEgd2F5IHRvIGNvbWJpbmUgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC1zY2hub3JyIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJTY2hub3JyIHNpZ25hdHVyZXMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIHdpdGggIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2JpdGNvaW5tYWdhemluZS5jb20vYXJ0aWNsZXMvdGhlLW5leHQtc3RlcC10by1pbXByb3ZlLWJpdGNvaW4tcy1mbGV4aWJpbGl0eS1zY2FsYWJpbGl0eS1hbmQtcHJpdmFjeS1pcy1jYWxsZWQtbWFzdC0xNDc2Mzg4NTk3LyIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiTUFTVCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIi5cblRoZSBTY2hub3JyIHNpZ25hdHVyZSBjYW4gYmUgdXNlZCB0byBzcGVuZCB0aGUgY29pbiwgYnV0IGFsc28gYSBNQVNUIHRyZWUgY2FuIGJlIHJldmVhbGVkIG9ubHkgd2hlbiB0aGUgdXNlciB3YW50cyB0byB1c2UgaXQuXG5UaGUgc2Nobm9yciBzaWduYXR1cmUgY2FuIGJlIGFueSBOLW9mLU4gb3IgdXNlIGFueSBzY3JpcHRsZXNzIHNjcmlwdCBjb250cmFjdC5cblRoZSBjb25zZXF1ZW5jZSBvZiB0YXByb290IGlzIGEgbXVjaCBsYXJnZXIgYW5vbnltaXR5IHNldCBmb3IgaW50ZXJlc3Rpbmcgc21hcnQgY29udHJhY3RzLCBhcyBhbnkgY29udHJhY3Qgc3VjaCBhcyBMaWdodG5pbmcgTmV0d29yaywgQ29pblN3YXAsIG11bHRpc2lnbmF0dXJlLCBldGMgd291bGQgYXBwZWFyIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gcmVndWxhciBzaW5nbGUtc2lnbmF0dXJlIG9uLWNoYWluIHRyYW5zYWN0aW9uLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSB0YXByb290IHNjaGVtZSBpcyBzbyB1c2VmdWwgYmVjYXVzZSBpdCBpcyBhbG1vc3QgYWx3YXlzIHRoZSBjYXNlIHRoYXQgaW50ZXJlc3Rpbmcgc2NyaXB0cyBoYXZlIGEgbG9naWNhbCB0b3AgbGV2ZWwgYnJhbmNoIHdoaWNoIGFsbG93cyBzYXRpc2ZhY3Rpb24gb2YgdGhlIGNvbnRyYWN0IHdpdGggbm90aGluZyBvdGhlciB0aGFuIGEgc2lnbmF0dXJlIGJ5IGFsbCBwYXJ0aWVzLlxuT3RoZXIgYnJhbmNoZXMgd291bGQgb25seSBiZSB1c2VkIHdoZXJlIHNvbWUgcGFydGljaXBhbnQgaXMgZmFpbGluZyB0byBjb29wZXJhdGUuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRldGFpbHMiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJiaXAtMzQyLXZhbGlkYXRpb24tb2YtdGFwcm9vdC1zY3JpcHRzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNiaXAtMzQyLXZhbGlkYXRpb24tb2YtdGFwcm9vdC1zY3JpcHRzIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJCSVAgMzQyOiBWYWxpZGF0aW9uIG9mIFRhcHJvb3QgU2NyaXB0cyIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInAiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vc2lwYS9iaXBzL2Jsb2IvYmlwLXNjaG5vcnIvYmlwLXRhcHNjcmlwdC5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJCSVAgVmFsaWRhdGlvbiBvZiBUYXByb290IFNjcmlwdHMiKSwKICAgICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBkZWZpbmVzIGEgc2xpZ2h0IHZhcmlhdGlvbiBvbiBCaXRjb2lu4oCZcyBleGlzdGluZyBTY3JpcHQgbGFuZ3VhZ2UgdG8gYmUgdXNlZCBpbiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLXRhcHJvb3QiIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkJJUCBUYXByb290IildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBtZXJrbGUgc3BlbmRzLiIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGF0LWlzLW5vdC1zdXBwb3J0ZWQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doYXQtaXMtbm90LXN1cHBvcnRlZCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgaXMgbm90IHN1cHBvcnRlZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRldGFpbHMiLCB7IGF0dHJzOiB7IGlkOiAiYmlwLTM3LWNvbm5lY3Rpb24tYmxvb20tZmlsdGVyaW5nIiB9IH0sIFsKICAgICAgICBfYygic3VtbWFyeSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2JpcC0zNy1jb25uZWN0aW9uLWJsb29tLWZpbHRlcmluZyIsCiAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkJJUCAzNzogQ29ubmVjdGlvbiBCbG9vbSBGaWx0ZXJpbmciKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDM3Lm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAzNyBCbG9vbSBmaWx0ZXJzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICcgYXJlIGZpbHRlcnMgdGhhdCBhIGNsaWVudCB3aWxsIHNlbmQgdG8gYSBCaXRjb2luIGZ1bGwgbm9kZSB3aGljaCBzYXlzICJIZXksIGlmIHlvdSBzZWUgYW55IHRyYW5zYWN0aW9ucyB0aGF0IGdldCBjYXVnaHQgaW4gdGhlc2UgZmlsdGVycywgdGhleSBtYXkgb3IgbWF5IG5vdCBiZSBtaW5lISIuXG5XaGF0IHdvdWxkIGhhcHBlbiBuZXh0IGlzIHRoYXQgYSBCaXRjb2luIG5vZGUgd291bGQgc3RhcnQgc2VuZGluZyB0b25zIGFuZCB0b25zIG9mIHRyYW5zYWN0aW9ucyB0byB0aGUgY2xpZW50LCBhbmQgdGhlIGNsaWVudCB3b3VsZCBwcm9jZWVkIHRvIGRpc3Rpbmd1aXNoIHRoZSA5OSUgaXJyZWxldmFudCB0cmFuc2FjdGlvbnMgYWdhaW5zdCB0aGUgMSUgcmVsZXZhbnQgb25lcy5cblRoaXMgd2FzIHF1aXRlIGJyaWxsaWFudCBvZiBhbiBpZGVhIGF0IHRoZSB0aW1lLCBidXQgaGFzIHNpbmNlIGJlZW4gcHJvdmVuIHRvIG5vdCBwcm90ZWN0IHVzZXIgcHJpdmFjeSwgYXQgdGhlIGV4cGVuc2Ugb2Ygd2FzdGluZyBhIHRvbiBvZiBiYW5kd2lkdGggYW5kIHN1YmplY3RpbmcgdXNlcnMgdG8gb3RoZXIgcmlza3MuJwogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGV0YWlscyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImJpcC02OS1sZXhpY29ncmFwaGljYWwtaW5kZXhpbmctb2YtdHJhbnNhY3Rpb24taW5wdXRzLWFuZC1vdXRwdXRzIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiI2JpcC02OS1sZXhpY29ncmFwaGljYWwtaW5kZXhpbmctb2YtdHJhbnNhY3Rpb24taW5wdXRzLWFuZC1vdXRwdXRzIiwKICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkJJUCA2OTogTGV4aWNvZ3JhcGhpY2FsIEluZGV4aW5nIG9mIFRyYW5zYWN0aW9uIElucHV0cyBhbmQgT3V0cHV0cyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDY5Lm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJCSVAgNjk6IExleGljb2dyYXBoaWNhbCBJbmRleGluZyBvZiBUcmFuc2FjdGlvbiBJbnB1dHMgYW5kIE91dHB1dHMiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiZGV0YWlscyIsIHsgYXR0cnM6IHsgaWQ6ICJiaXAtNzAtcGF5bWVudC1wcm90b2NvbCIgfSB9LCBbCiAgICAgICAgX2MoInN1bW1hcnkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2JpcC03MC1wYXltZW50LXByb3RvY29sIiwgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImg0IiwgW192bS5fdigiQklQIDcwOiBQYXltZW50IFByb3RvY29sIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA3MC5tZWRpYXdpa2kiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCSVAgNzA6IFBheW1lbnQgUHJvdG9jb2wiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}