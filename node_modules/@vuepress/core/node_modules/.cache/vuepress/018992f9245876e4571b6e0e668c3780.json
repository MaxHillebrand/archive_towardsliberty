{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/daily-thoughts/10Commandments.md?vue&type=template&id=59014833&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/daily-thoughts/10Commandments.md","mtime":1579971419602},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}