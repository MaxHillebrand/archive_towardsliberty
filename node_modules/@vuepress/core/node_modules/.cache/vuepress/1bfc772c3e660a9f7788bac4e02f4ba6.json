{"remainingRequest":"/home/user/WasabiDoc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDoc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDoc/docs/.vuepress/variables.js!/home/user/WasabiDoc/docs/using-wasabi/BitcoinCore.md?vue&type=template&id=f6fd579e&","dependencies":[{"path":"/home/user/WasabiDoc/docs/using-wasabi/BitcoinCore.md","mtime":1579868910863},{"path":"/home/user/WasabiDoc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/docs/.vuepress/variables.js","mtime":1579281550529}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJiaXRjb2luLWNvcmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2JpdGNvaW4tY29yZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQml0Y29pbiBDb3JlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRhYmxlLW9mLWNvbnRlbnRzIiB9LCBbCiAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3RoZS1pbXBvcnRhbmNlLW9mLXJ1bm5pbmctYS1mdWxsLW5vZGUiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJUaGUgaW1wb3J0YW5jZSBvZiBydW5uaW5nIGEgZnVsbCBub2RlIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI2hvdy13YXNhYmktdXNlcy15b3VyLWJpdGNvaW4tZnVsbC1ub2RlIiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiSG93IFdhc2FiaSB1c2VzIHlvdXIgQml0Y29pbiBmdWxsIG5vZGUiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2JpdGNvaW5kLXdpdGhpbi13YXNhYmkiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiYml0Y29pbmQgd2l0aGluIFdhc2FiaSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdXNpbmctYW4tYWxyZWFkeS1leGlzdGluZy1sb2NhbC1iaXRjb2luLWNvcmUiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlVzaW5nIGFuIGFscmVhZHkgZXhpc3RpbmcgbG9jYWwgQml0Y29pbiBDb3JlIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiN1c2luZy1hbi1hbHJlYWR5LWV4aXN0aW5nLXJlbW90ZS1iaXRjb2luLWNvcmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJVc2luZyBhbiBhbHJlYWR5IGV4aXN0aW5nIHJlbW90ZSBCaXRjb2luIENvcmUiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0aGUtaW1wb3J0YW5jZS1vZi1ydW5uaW5nLWEtZnVsbC1ub2RlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0aGUtaW1wb3J0YW5jZS1vZi1ydW5uaW5nLWEtZnVsbC1ub2RlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGhlIGltcG9ydGFuY2Ugb2YgcnVubmluZyBhIGZ1bGwgbm9kZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoZW4gcnVubmluZyBhIEJpdGNvaW4gZnVsbCBub2RlLCB5b3UgZGVmaW5lIHRoZSBwcmVjaXNlIG1vbmV0YXJ5IHJ1bGVzIHRoYXQgeW91IHZvbHVudGFyaWx5IGFncmVlIG9uLCBub2JvZHkgZWxzZSBmb3JjZXMgdGhpcyBjaG9pY2UgdXBvbiB5b3UuXG5UaHVzIGFueSBzb3ZlcmVpZ24gaW5kaXZpZHVhbCB3aG8gd2FudHMgdG8gY2xhaW0gZmluYW5jaWFsIGluZGVwZW5kZW5jZSBtdXN0IHJ1biBhIGZ1bGwgbm9kZS5cbk9uY2UgeW91ciBvd24gcnVsZXMgYXJlIGZpcm1seSBlc3RhYmxpc2hlZCwgeW91ciBzb2Z0d2FyZSBkaXNjb3ZlcnMgb3RoZXIgbm9kZXMgaW4gdGhlIEJpdGNvaW4gcGVlci10by1wZWVyIG5ldHdvcmsgd2hpY2ggYWRoZXJlIHRvIHRoZSBleGFjdCBzYW1lIHNldCBvZiBydWxlcy5cblRoZXNlIHBlZXJzIHNlbmQgeW91IHRyYW5zYWN0aW9ucyBhbmQgYmxvY2tzIHdoaWNoIGFyZSB2YWxpZCBhY2NvcmRpbmcgdG8gdGhlaXIgc2V0IG9mIHJ1bGVzLCBhbmQgeW91IHZlcmlmeSBmb3IgeW91ciBzZWxmIGlmIHRoZXkgYXJlIGFsc28gY29ycmVjdCBmb3IgeW91LlxuSWYgb25lIG9mIHRoZSBwcm9wb3NlZCB0cmFuc2FjdGlvbnMgYnJlYWtzIHlvdXIgb3duIHJ1bGVzLCB0aGVuIHlvdSBtYXJrIGl0IGFzIGludmFsaWQsIGRpc2Nvbm5lY3QgZnJvbSBhbmQgYmFuIHRoZSBub2RlIHdobyBzZW5kIHlvdSB0aGUgbWFsaWNpb3VzIHRyYW5zYWN0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkNsYWltIHlvdXIgbW9uZXRhcnkgc292ZXJlaWdudHkiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2l0aCB5b3VyIGZ1bGwgbm9kZSB5b3UgZGVmaW5lLCB2ZXJpZnkgYW5kIGVuZm9yY2UgdGhlIHJ1bGVzIG9mIHlvdXIgc291bmQgbW9uZXkgQml0Y29pbi4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25seSB3aGVuIHJ1bm5pbmcgeW91ciBvd24gbm9kZSBkbyB5b3UgdmVyaWZ5IGlmIHRoZSBtb25leSB5b3UgcmVjZWl2ZSBpcyBhY3R1YWxseSB2YWxpZCBiaXRjb2luLlxuWW91IGRvIG5vdCB0cnVzdCBvbiBhbiBleHRlcm5hbCB0aGlyZCBwYXJ0eSwgYW5kIHRodXMgeW91IGFsc28gZG8gbm90IGxlYWsgYW55IHNlbnNpdGl2ZSBmaW5hbmNpYWwgaW5mb3JtYXRpb24gdG8gdGhlbS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBhcmUgc2V2ZXJhbCBzb2Z0d2FyZSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBmdW5jdGlvbiBhcyBhIGZ1bGwgbm9kZSwgZm9yIGV4YW1wbGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYml0Y29pbmNvcmUub3JnLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQml0Y29pbiBDb3JlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vaHR0cDovL2JpdGNvaW5rbm90cy5vcmcvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJCaXRjb2luIEtub3RzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgb3IgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbGliYml0Y29pbi5pbmZvLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiTGliQml0Y29pbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaG93LXdhc2FiaS11c2VzLXlvdXItYml0Y29pbi1mdWxsLW5vZGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy13YXNhYmktdXNlcy15b3VyLWJpdGNvaW4tZnVsbC1ub2RlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IFdhc2FiaSB1c2VzIHlvdXIgQml0Y29pbiBmdWxsIG5vZGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJXYXNhYmkgY3VycmVudGx5IGhhcyBhIHdvcmsgaW4gcHJvZ3Jlc3MgcGFydGlhbCBCaXRjb2luIENvcmUgaW50ZWdyYXRpb24uXG5UaGUgemtTTkFDS3MgY29vcmRpbmF0aW5nIHNlcnZlciBicm9hZGNhc3RzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0xNTgtY29tcGFjdC1ibG9jay1maWx0ZXJzLWZvci1saWdodC1jbGllbnRzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDE1OCBibG9jayBmaWx0ZXJzIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvIGFsbCBXYXNhYmkgY2xpZW50cywgd2hvIGxvY2FsbHkgY2hlY2sgaWYgdGhlIGZpbHRlciBoaXRzIGZvciB0aGVpciBwdWJsaWMga2V5cy4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayB3YXJuaW5nIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJXQVJOSU5HIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJwIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGUgemtTTkFDS3Mgc2VydmVyIGhhcyB0byBiZSB0cnVzdGVkIHRvIHNlcnZlIGNvcnJlY3QgZmlsdGVycywgdW50aWwgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvdXNpbmctd2FzYWJpL0JJUHMuaHRtbCNiaXAtMTU4LWNvbXBhY3QtYmxvY2stZmlsdGVycy1mb3ItbGlnaHQtY2xpZW50cyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAxNTcgY2xpZW50IHNpZGUgYmxvY2sgZmlsdGVyaW5nIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIGlzIGltcGxlbWVudGVkIGluIEJpdGNvaW4gQ29yZS4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIklmIGEgZnVsbCBub2RlIGlzIGNvbm5lY3RlZCB0byBXYXNhYmksIHRoZW4gdGhlIHJlbGV2YW50IGJsb2NrIGlzIGZldGNoZWQgZnJvbSB0aGlzIHRydXN0ZWQgbm9kZSwgYW5kIG5vdCBmcm9tIGEgcmFuZG9tIFAyUCBub2RlLlxuV2FzYWJpIGFsc28gcXVlcmllcyBpZiB5b3VyIGxvY2FsIG1lbXBvb2wgaGFzIHVuY29uZmlybWVkIHRyYW5zYWN0aW9ucyB0aGF0IGFyZSBvZiBpbnRlcmVzdCB0byB5b3UuXG5GdXJ0aGVyLCB5b3VyIGZ1bGwgbm9kZSBpcyB1c2VkIHRvIGVzdGltYXRlIHRoZSBjdXJyZW50IG1pbmluZyBmZWUgbGV2ZWwgYmFzZWQgb24gdGhlIGJpdGNvaW5kICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNtYXJ0ZmVlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBhbGdvcml0aG0uXG5Zb3VyIGZ1bGwgbm9kZSBpcyBub3QgdXNlZCB0byBicm9hZGNhc3QgeW91ciB0cmFuc2FjdGlvbnMsIGFzIHRoaXMgaXMgZG9uZSB0aHJvdWdoIGEgcmFuZG9tIHBlZXItdG8tcGVlciBub2RlIHdpdGggYSBuZXcgdG9yIGlkZW50aXR5LCB3aGljaCBpcyBiZXR0ZXIgZm9yIHlvdXIgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3VzaW5nLXdhc2FiaS9OZXR3b3JrTGV2ZWxQcml2YWN5Lmh0bWwiIH0gfSwKICAgICAgICAgICAgW192bS5fdigibmV0d29yayBsZXZlbCBwcml2YWN5IildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJiaXRjb2luZC13aXRoaW4td2FzYWJpIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNiaXRjb2luZC13aXRoaW4td2FzYWJpIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYml0Y29pbmQgd2l0aGluIFdhc2FiaSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTaW5jZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS96a1NOQUNLcy9XYWxsZXRXYXNhYmkvcmVsZWFzZXMvdGFnL3YxLjEuMTAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInZlcnNpb24gMS4xLjEwIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgV2FzYWJpIFdhbGxldCBzaGlwcyB3aXRoIHRoZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS96a1NOQUNLcy9XYWxsZXRXYXNhYmkvdHJlZS9tYXN0ZXIvV2FsbGV0V2FzYWJpL01pY3Jvc2VydmljZXMvQmluYXJpZXMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImJpdGNvaW5kIGJpbmFyaWVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIG9mIEJpdGNvaW4gQ29yZS5cblRoaXMgbWVhbnMgdGhhdCBldmVyeSBXYXNhYmkgY2xpZW50IGhhcyB0aGUgbmVjZXNzYXJ5IHNvZnR3YXJlIHRvIHJ1biBhIEJpdGNvaW4gZnVsbCBub2RlIGFuZCBkZWZpbmUsIHZlcmlmeSBhbmQgZW5mb3JjZSBtb25ldGFyeSBjb25zZW5zdXMuXG5CeSBkZWZhdWx0LCBiaXRjb2luZCBpcyBub3Qgc3RhcnRlZCB0b2dldGhlciB3aXRoIFdhc2FiaSwgdGhpcyBtdXN0IGJlIGFjdGl2YXRlZCBleHBsaWNpdGx5IGluIHRoZSBzZXR0aW5ncywgYmVjYXVzZSB0aGlzIGlzIGEgYmFuZHdpZHRoLCBDUFUgYW5kIHN0b3JhZ2UgaW50ZW5zaXZlIHByb2dyYW0uXG5JdCBpcyBvcHRpb25hbCB0byBrZWVwIGJpdGNvaW5kIHJ1bm5pbmcgZXZlbiBhZnRlciBXYXNhYmkgV2FsbGV0IGlzIHNodXQgZG93biwgc28gdG8gdmVyaWZ5IGJsb2NrcyBhcyBzb29uIGFzIHRoZXkgYXJlIHJlY2VpdmVkLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiL1NldHRpbmdzQml0Y29pbkNvcmUucG5nIiwgYWx0OiAiIiB9IH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAidXNpbmctYW4tYWxyZWFkeS1leGlzdGluZy1sb2NhbC1iaXRjb2luLWNvcmUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3VzaW5nLWFuLWFscmVhZHktZXhpc3RpbmctbG9jYWwtYml0Y29pbi1jb3JlIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBVc2luZyBhbiBhbHJlYWR5IGV4aXN0aW5nIGxvY2FsIEJpdGNvaW4gQ29yZSIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAidXNpbmctYW4tYWxyZWFkeS1leGlzdGluZy1yZW1vdGUtYml0Y29pbi1jb3JlIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN1c2luZy1hbi1hbHJlYWR5LWV4aXN0aW5nLXJlbW90ZS1iaXRjb2luLWNvcmUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFVzaW5nIGFuIGFscmVhZHkgZXhpc3RpbmcgcmVtb3RlIEJpdGNvaW4gQ29yZSIpCiAgICAgICAgXQogICAgICApCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}