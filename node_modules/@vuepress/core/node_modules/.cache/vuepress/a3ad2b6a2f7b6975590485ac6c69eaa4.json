{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/essays/WalletGeneration.md?vue&type=template&id=99315f8e&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/essays/WalletGeneration.md","mtime":1579281550536},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3YWxsZXQtZ2VuZXJhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2FsbGV0LWdlbmVyYXRpb24iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBXYWxsZXQgR2VuZXJhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldpdGggV2FzYWJpIHlvdSBjYW4gZ2VuZXJhdGUgYW4gdW5saW1pdGVkIG51bWJlciBvZiBCaXRjb2luIHdhbGxldHMgdmVyeSBmYXN0LCB3aXRob3V0IGFueSBjb3N0LCBhbmQgd2l0aG91dCBhc2tpbmcgYW55b25lIGZvciBwZXJtaXNzaW9uLlxuRWFjaCB3YWxsZXQgaGFzIHNlcGFyYXRlIHByaXZhdGUgYW5kIHB1YmxpYyBrZXlzIGluIGEgdW5pcXVlIGJhY2t1cCwgYW5kIHRoZXkgYXJlIG5vdCBhdCBhbGwgbGlua2VkIHRvIHRoZSBvdGhlciB3YWxsZXRzIGdlbmVyYXRlZCBvbiB0aGUgc2FtZSBjb21wdXRlci5cblNvLCB3aXRoIHNldmVyYWwgd2FsbGV0cyB5b3UgY2FuIGNvbnZlbmllbnRseSBtYW5hZ2UgeW91ciBiaXRjb2luIGZvciBkaWZmZXJlbnQgdXNlIGNhc2VzIHdpdGhvdXQgd29ycnlpbmcgYWJvdXQgcmV2ZWFsaW5nIHRoYXQgeW91IGNvbnRyb2wgdGhlbS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUtb2YtY29udGVudHMiIH0sIFsKICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjZ2VuZXJhdGluZy10aGUtd2FsbGV0LXN0ZXAtYnktc3RlcCIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkdlbmVyYXRpbmcgdGhlIHdhbGxldCBzdGVwLWJ5LXN0ZXAiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3doYXQtcGFzc3dvcmQtdG8tY2hvb3NlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIldoYXQgcGFzc3dvcmQgdG8gY2hvb3NlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiN3aGF0LW5vdC10by1kbyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiV2hhdCBub3QgdG8gZG8iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNiZXN0LXByYWN0aWNlcyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQmVzdCBQcmFjdGljZXMiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjY3JlYXRlLXN0cm9uZy1wYXNzd29yZHMtd2l0aC1kaWNld2FyZSIgfSB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkNyZWF0ZSBTdHJvbmcgUGFzc3dvcmRzIHdpdGggRGljZXdhcmUiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2hvdy1hcmUtdGhlLXNlY3JldHMtY3JlYXRlZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJIb3cgYXJlIHRoZSBzZWNyZXRzIGNyZWF0ZWQiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImdlbmVyYXRpbmctdGhlLXdhbGxldC1zdGVwLWJ5LXN0ZXAiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2dlbmVyYXRpbmctdGhlLXdhbGxldC1zdGVwLWJ5LXN0ZXAiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHZW5lcmF0aW5nIHRoZSB3YWxsZXQgc3RlcC1ieS1zdGVwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiTGF1bmNoIFdhc2FiaSBXYWxsZXQuXG5UaGUgdmVyeSBmaXJzdCB0aW1lIHlvdSBydW4gdGhlIHNvZnR3YXJlIHRoZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiR2VuZXJhdGUgV2FsbGV0IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgdGFiIHdpbGwgYXV0b21hdGljYWxseSBiZSBvcGVuLCBidXQgeW91IGNhbiBhbHNvIGFjY2VzcyBpdCBieSBjbGlja2luZyBvbiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRmlsZSAtPiBHZW5lcmF0ZSBXYWxsZXQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBpbiB0aGUgbWVudSBiYXIuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiTGFiZWwgdGhlIG5ldyB3YWxsZXQgcHJlY2lzZWx5IHRvIGVuc3VyZSBhIHByb3BlciBkaWZmZXJlbnRpYXRpb24gYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmUuXG5UaGlzIGxhYmVsIGlzIG5vdCBzaGFyZWQgd2l0aCBhbnlvbmUsIGl0IGlzIG9ubHkgc3RvcmVkIGxvY2FsbHkgb24geW91ciBjb21wdXRlci4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiV3JpdGUgYSBsb25nIGFuZCByYW5kb20gcGFzc3dvcmQgYW5kICIpLAogICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJiYWNrIGl0IHVwIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIuXG5JdCBlbmNyeXB0cyB5b3VyIHNlY3JldHMgYW5kIHlvdSB3aWxsIG5lZWQgaXQgZXZlcnkgdGltZSB5b3Ugd2FudCB0byBzcGVuZCBiaXRjb2luIGZyb20gdGhpcyB3YWxsZXQsIG9yIHJlY292ZXIgeW91ciB3YWxsZXQuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJDb25zaWRlciB1c2luZyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmVmZi5vcmcvZGVlcGxpbmtzLzIwMTYvMDcvbmV3LXdvcmRsaXN0cy1yYW5kb20tcGFzc3BocmFzZXMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImRpY2V3YXJlIHdvcmRsaXN0cyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBvciBhIHNlY3VyZSBwYXNzd29yZCBnZW5lcmF0b3IgdG8gcHJvdGVjdCB5b3Vyc2VsZiBhZ2FpbnN0IGJydXRlIGZvcmNlIGF0dGFja3MuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayBkYW5nZXIiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFsKICAgICAgICAgIF92bS5fdigiQmFja3VwIHlvdXIgcGFzc3dvcmQhIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldpdGhvdXQgdGhlIHBhc3N3b3JkLCB5b3UgY2Fubm90IHNwZW5kIHlvdXIgYml0Y29pbiBvciByZWNvdmVyIHlvdXIgd2FsbGV0LCBldmVuIGlmIHlvdSBoYXZlIHRoZSByZWNvdmVyeSB3b3JkcyAoU2VlZCBwaHJhc2UpLlxuU28sIHRyaXBsZS1jaGVjayB0aGF0IHlvdSBoYXZlIGEgcHJvcGVyIGJhY2t1cCEiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiNCIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQ2xpY2sgdGhlIGNoZWNrYm94IGFmdGVyIGNhcmVmdWxseSByZWFkaW5nIHRoZSBUZXJtcyBhbmQgQ29uZGl0aW9ucywgdGhlIFByaXZhY3kgUG9saWN5IGFuZCB0aGUgTGVnYWwgSXNzdWVzIG9mIHprU05BQ0tzIEx0ZC4gYW5kIFdhc2FiaSBXYWxsZXQuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkNsaWNrIHRoZSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJHZW5lcmF0ZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGJ1dHRvbi4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvV2FsbGV0TWFuYWdlckdlbmVyYXRlV2FsbGV0LnBuZyIsIGFsdDogIiIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgeyBhdHRyczogeyBzdGFydDogIjYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJXcml0ZSBkb3duIHRoZSAxMiByZWNvdmVyeSB3b3JkcyAoU2VlZCBwaHJhc2UpLlxuWW91IGNhbiB1c2UgdGhpcyBzZWVkIHBocmFzZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiB5b3VyIHBhc3N3b3JkIHRvIHJlY292ZXIgeW91ciB3YWxsZXQgb24gYSBkaWZmZXJlbnQgY29tcHV0ZXIgdXNpbmcgV2FzYWJpIG9yIGFub3RoZXIgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvdXNpbmctd2FzYWJpL0JJUHMuaHRtbCNiaXAtMzgtcGFzc3dvcmQtcHJvdGVjdGVkLXByaXZhdGUta2V5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQklQIDM4IildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGNvbXBsaWFudCB3YWxsZXQuXG5JZiB5b3UgaGF2ZSBvbmx5IHRoZSByZWNvdmVyeSB3b3JkcywgYnV0IG5vdCB0aGUgcGFzc3dvcmQsIHRoZW4geW91IGNhbm5vdCBzcGVuZCB0aGUgYml0Y29pbiBub3IgcmVjb3ZlciB0aGlzIHdhbGxldC5cbkJ1dCB3aG9ldmVyIGhhcyBib3RoLCBnZXRzIGZ1bGwgYWNjZXNzIHRvIGFsbCB0aGUgdHJhbnNhY3Rpb24gaGlzdG9yeSBhbmQgZ2FpbnMgY29udHJvbCBvdmVyIGV2ZXJ5IHNhdG9zaGkgbG9ja2VkIHVwIGluIHRoaXMgd2FsbGV0LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgZGFuZ2VyIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkJhY2t1cCB5b3VyIHJlY292ZXJ5IHdvcmRzISIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJXaXRob3V0IHRoZSByZWNvdmVyeSB3b3JkcyAoU2VlZCBwaHJhc2UpIEFORCB0aGUgcGFzc3dvcmQsIHlvdSBjYW5ub3QgcmVjb3ZlciB5b3VyIHdhbGxldC5cblNvLCB0cmlwbGUtY2hlY2sgdGhhdCB5b3UgaGF2ZSBhIHByb3BlciBiYWNrdXAhXG5NYWtlIHN1cmUgdGhlIGJhY2t1cCBvZiB5b3VyIHJlY292ZXJ5IHdvcmRzIGlzIHN0b3JlZCBzZXBhcmF0ZWx5IGZyb20gdGhlIHBhc3N3b3JkIGJhY2t1cC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL1dhbGxldE1hbmFnZXJSZWNvdmVyeVdvcmRzLnBuZyIsIGFsdDogIiIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgeyBhdHRyczogeyBzdGFydDogIjciIH0gfSwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRlc3QgdGhlIHBhc3N3b3JkIGJlZm9yZSB5b3UgY2FuIGxvYWQgdGhlIHdhbGxldCwgdG8gbWFrZSBzdXJlIHRoYXQgeW91ciBiYWNrdXAgcGFzc3dvcmQgaXMgY29ycmVjdC5cblNvLCB0eXBlIG9yIHBhc3RlIHRoZSBwYXNzd29yZCBpbiB0aGUgdGV4dCBib3gsIGFuZCBjbGljayAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMb2FkIFdhbGxldCIpXSksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiL1Rlc3RQYXNzd29yZC5wbmciLCBhbHQ6ICIiIH0gfSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGF0LXBhc3N3b3JkLXRvLWNob29zZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1wYXNzd29yZC10by1jaG9vc2UiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBXaGF0IHBhc3N3b3JkIHRvIGNob29zZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiV2FzYWJpIGludGVncmF0ZXMgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0zOC1wYXNzd29yZC1wcm90ZWN0ZWQtcHJpdmF0ZS1rZXkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCSVAgMzg6IFBhc3N3b3JkLVByb3RlY3RlZCBQcml2YXRlIEtleSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgd2hpY2ggbWVhbnMgdGhhdCB0aGUgc2VjcmV0cyBuZWVkZWQgdG8gc3BlbmQgdGhlIGJpdGNvaW4gYXJlIGVuY3J5cHRlZCBvbiB0aGUgY29tcHV0ZXIuXG5JZiBzb21lb25lIGhhcyBjb21wcm9taXNlZCB5b3VyIG9wZXJhdGluZyBzeXN0ZW0gYW5kIGhhcmR3YXJlIGFuZCBoZSBvbmx5IGhhcyB0aGUgZW5jcnlwdGVkIHNlY3JldHMsIHRoZW4gbm8gYml0Y29pbiBjYW4gYmUgc3BlbnQgYnkgaGltLlxuWW91IG5lZWQgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJib3RoIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGUgZW5jcnlwdGVkIHNlY3JldHMsIGFuZCB0aGUgcGFzc3dvcmQgaW4gb3JkZXIgdG8gZW5hYmxlIHRoZSBwcml2YXRlIGtleSB3aGljaCBjYW4gc2lnbiBhIHNwZW5kaW5nIHRyYW5zYWN0aW9uLlxuVGhpcyBtZWFucyB0aGF0IHRoZSBwYXNzd29yZCBpcyB5b3VyIGxhc3QgbGluZSBvZiBkZWZlbnNlIGFnYWluc3QgYW55b25lIHdobyB0cmllcyB0byBzdGVhbCB5b3VyIGJpdGNvaW4uIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgdGlwIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJUSVAiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSXQgaXMgc3Ryb25nbHkgcmVjb21tZW5kZWQgdG8gdXNlIGxvbmcgYW5kIHJhbmRvbSBwYXNzd29yZHMgZm9yIGV2ZXJ5dGhpbmcsIGVzcGVjaWFsbHkgZm9yIHlvdXIgbW9uZXkhLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGF0LW5vdC10by1kbyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1ub3QtdG8tZG8iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgbm90IHRvIGRvIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGVyZSBhcmUgYSBjb3VwbGUgb2YgZXhhbXBsZXMgdGhhdCBkbyBpdCBjb21wbGV0ZWx5IHdyb25nLlxuWW91IHNob3VsZCBub3QgZ2VuZXJhdGUgeW91ciBwYXNzd29yZCBsaWtlIHRoaXM6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRG8gbm90IHVzZSBwdWJsaWNseSBrbm93biBpbmZvcm1hdGlvbiBsaWtlIHlvdXIgZ3JhbmRtYSdzIG1haWRlbiBuYW1lIGFuZCB0aGUgYmlydGhkYXkgb2YgeW91ciBkb2cuXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRW1tYTE5OTIiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBpcyBhIHJlYWxseSwgcmVhbGx5LCByZWFsbHkgYmFkIHBhc3N3b3JkLCBiZWNhdXNlIGl0IGNhbiBlYXNpbHkgYmUgZ3Vlc3NlZCBhbmQgaXQgaXMgdmVyeSBzaG9ydC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRG8gbm90IHVzZSB0aGUgc2FtZSBwYXNzd29yZCB0aGF0IHlvdSBoYXZlIHVzZWQgaW4gb3RoZXIgcGxhY2VzLlxuQmVjYXVzZSBpZiBvbmUgcGFzc3dvcmQgaXMgbGVha2VkLCB0aGVuIG90aGVyIG9uZXMgYXJlIGNvbXByb21pc2VkLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEbyB0cnkgdG8gdXNlIGEgbWl4IG9mIHVwcGVyY2FzZSBhbmQgbG93ZXJjYXNlIGxldHRlcnMsIG51bWJlcnMsIGFuZCBzcGVjaWFsIGNoYXJhY3RlcnMgKCYkJUAgZXRjLikgaW4geW91ciBwYXNzd29yZC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYmVzdC1wcmFjdGljZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Jlc3QtcHJhY3RpY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCZXN0IFByYWN0aWNlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkRvbid0IHJvbGwgeW91ciBvd24gY3J5cHRvLlxuWW91IHNob3VsZG4ndCB0cnkgdG8gcmUtaW52ZW50IHRoZSB3aGVlbCBmb3Igc29tZXRoaW5nIGFzIGNvbXBsaWNhdGVkIGFuZCBudWFuY2VkIGFzIGNyeXB0b2dyYXBoeSwgYW5kIGVzcGVjaWFsbHkgaW4gcmVnYXJkcyB0byBlbnRyb3B5LlxuVGhlc2UgYXJlIHNvbWUgb2YgdGhlIGluZHVzdHJ5IGJlc3QgcHJhY3RpY2VzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAicCIsCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiUm9sbGluZyBhIGRpY2UgbWlnaHQgYmUgdGhlIGVhc2llc3Qgd2F5IHRvIGdldCBoaWdoIGVudHJvcHkgYW5kIHJhbmRvbW5lc3MgaW4gbnVtYmVycy5cbllvdSBjYW4gYWxzbyB1c2UgdGhlICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAgICIvdXNpbmctd2FzYWJpL1dhbGxldEdlbmVyYXRpb24uaHRtbCNjcmVhdGUtc3Ryb25nLXBhc3N3b3Jkcy13aXRoLWRpY2V3YXJlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiRGljZXdhcmUgdHV0b3JpYWwiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgdG8gZ2V0IHNvbWV0aGluZyBzaW1pbGFyIHRvIHlvdXIgQml0Y29pbiByZWNvdmVyeSB3b3JkcyAoU2VlZCBwaHJhc2UpLlxuTm93IHlvdSBoYXZlIGEgdmVyYmFsIHBhc3N3b3JkIHRoYXQgd2FzIGdlbmVyYXRlZCBjb21wbGV0ZWx5IG9mZi1saW5lIHdpdGggc3VmZmljaWVudCByYW5kb21uZXNzLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJGbGlwIHRocm91Z2ggdGhlIHBhZ2VzIG9mIGEgYm9vaywgc3RvcHBpbmcgb24gYW4gYXJiaXRyYXJ5IHBhZ2UgYW5kIHBpY2sgdXAgb25lIHdvcmQgc29tZXdoZXJlIG9uIHRoYXQgcGFnZS5cbkFsdGhvdWdoIHRoaXMgaXMgbm90IGFzIHJhbmRvbSBhcyBhIGRpY2Utcm9sbCwgdGhlcmUgaXMgc3RpbGwgYSBsYXJnZSBzZXQgb2YgcG9zc2libGUgd29yZHMgaW4gYSBib29rLlxuWW91IGNhbiBmdXJ0aGVyIGluY3JlYXNlIHRoZSByYW5kb21uZXNzIGJ5IHNlbGVjdGluZyBkaWZmZXJlbnQgYm9va3MuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlVzZSBhIHdlbGwgdGVzdGVkIHBhc3N3b3JkIG1hbmFnZXIgd2l0aCBhIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvci5cbkEgZ29vZCBwYXNzd29yZCBtYW5hZ2VyIHdpbGwgdXNlIHN1ZmZpY2llbnQgZW50cm9weSB0byBnZW5lcmF0ZSBhIHBhc3N3b3JkIHdpdGggbGV0dGVycywgbnVtYmVycyBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzLlxuQWx0aG91Z2ggdGhpcyBpcyBvbi1saW5lIGFuZCBkaWdpdGFsLCBhIGdvb2QgcGFzc3dvcmQgbWFuYWdlciBzaG91bGQgc3RpbGwgYmUgc2VjdXJlIGVub3VnaCBmb3IgbW9zdCBjYXNlcy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY3JlYXRlLXN0cm9uZy1wYXNzd29yZHMtd2l0aC1kaWNld2FyZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY3JlYXRlLXN0cm9uZy1wYXNzd29yZHMtd2l0aC1kaWNld2FyZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENyZWF0ZSBTdHJvbmcgUGFzc3dvcmRzIHdpdGggRGljZXdhcmUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEaWNld2FyZSBpcyBhIGdyZWF0IHdheSB0byBnZW5lcmF0ZSBzZWN1cmUsIHJhbmRvbSwgYW5kIGxvbmcgcGFzc3dvcmRzLlxuSXTigJlzIGEgZ3JlYXQgc3RyYXRlZ3kgZm9yIHlvdXIgbW9zdCBwcmVjaW91cyBwYXNzd29yZHMgKGUuZy4gdGhlIHBhc3N3b3JkIHRvIHlvdXIgY29tcHV0ZXIsIHlvdXIgYmFja3Vwcywgb3IgeW91ciBlbmNyeXB0aW9uIGtleSkuXG5Zb3UgY2FuIGV2ZW4gdXNlIERpY2V3YXJlIHRvIGNyZWF0ZSBzZWN1cmUgd2FsbGV0cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBnZW5lcmF0ZSBhIHBhc3N3b3JkIHVzaW5nIERpY2V3YXJlLCB5b3UganVzdCBuZWVkIGEgZ29vZCBkaWUgYW5kIHNvbWUgcGVuIGFuZCBwYXBlci5cbllvdSBjYW4gZmluZCB0aGUgZGljZXdhcmUgbGlzdCBhdCB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5lZmYub3JnL2RlZXBsaW5rcy8yMDE2LzA3L25ldy13b3JkbGlzdHMtcmFuZG9tLXBhc3NwaHJhc2VzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiRWxlY3Ryb25pYyBGcm9udGllciBGb3VuZGF0aW9uIHdlYnNpdGUiKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cbk1ha2Ugc3VyZSB5b3UgYXJlIGFsb25lIGFuZCB0aGVyZSBhcmUgbm8gY2FtZXJhcyBuZWFyYnkuXG5Gb3IgbWF4aW11bSBwcm90ZWN0aW9uLCBkaXNjb25uZWN0IHlvdXIgY29tcHV0ZXIgZnJvbSB0aGUgaW50ZXJuZXQgKGFmdGVyIHlvdSBzYXZlIHRoZSBEaWNld2FyZSBsaXN0KSBhbmQgY292ZXIgeW91ciB3ZWJjYW0uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gc3RhcnQsIHJvbGwgdGhlIGRpZSBmaXZlIHRpbWVzLlxuUmVjb3JkIHRoZSBudW1iZXIgZnJvbSBlYWNoIHJvbGwgdXNpbmcgdGhlIHBlbiBhbmQgcGFwZXIuXG5Zb3Ugd2lsbCBlbmQgdXAgd2l0aCBhIGZpdmUtZGlnaXQgbnVtYmVyLlxuV2UgZ290ICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiNTI2MTEiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuXG5Ob3cgc2VhcmNoIG9uIHRoZSBEaWNld2FyZSBsaXN0IGZvciB0aGUgZml2ZSBkaWdpdCBudW1iZXIgeW91IGp1c3QgY3JlYXRlZC5cbldyaXRlIGRvd24gdGhlIHdvcmQgdGhlIG51bWJlciBjb3JyZXNwb25kcyB0bywgaW4gb3VyIGNhc2UgaXQgaXMgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzYWx2byIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cblRoaXMgd29yZCBieSBpdHNlbGYgaXMgbm90IGEgZ29vZCBwYXNzd29yZCwgaXQgd291bGQgb25seSB0YWtlIGFib3V0IGEgdGhvdXNhbmR0aCBvZiBhIHNlY29uZCB0byBjcmFjay5cblJlcGVhdCB0aGUgZGljZSByb2xsaW5nIHByb2Nlc3MgYXQgbGVhc3QsIGZvdXIgdGltZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFmdGVyIGZpdmUgc2V0cyBvZiBmaXZlIHJvbGxzLCB3ZSBlbmRlZCB1cCB3aXRoICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiNTI2MTEiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiNTE2MzEiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiNjM0MzIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiNDMxMjMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMjE2NDEiKV0pLAogICAgICAgIF92bS5fdigiLlxuVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgcGFzc3dvcmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzYWx2byByaG9kYSB3YWx0b24gbXVkZCBjcm9mdCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSXQgd291bGQgdGFrZSBhIHNpbmdsZSBjb21wdXRlciBhYm91dCBzaXggbm9uaWxsaW9uICh3aGljaCBpcyA2KjEwXjMwICkgeWVhcnMgdG8gY3JhY2sgdGhpcy5cbkl0IGlzIGFuIHVuaW1hZ2luYWJseSBsYXJnZSBudW1iZXIgYW5kIGZvciBjb21wYXJpc29uLCB0aGUgdW5pdmVyc2UgaXMgb25seSAxNCB4IDEwIHRvIHRoZSBwb3dlciBvZiA5IHllYXJzIG9sZC5cbklmIHlvdSBoYWQgYSBiaWxsaW9uIGNvbXB1dGVycywgZWFjaCBvbmUgYSBiaWxsaW9uIHRpbWVzIHN0cm9uZ2VyIHRoYW4gdGhlIGNvbXB1dGVycyBhdmFpbGFibGUgdG9kYXksIHlvdSB3b3VsZCBzdGlsbCBub3QgYmUgYWJsZSB0byBjcmFjayB0aGlzIHBhc3N3b3JkLlxuS2VlcCBhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQ29sZFdhc2FiaS5odG1sI2EtbGlzdC1vZi10aGUtbW9yZS1jb21tb24tbWVkaXVtcy1vZi1jb2xkLXN0b3JhZ2Utd2l0aC1zb21lLW9mLXRoZWlyLXdlYWtuZXNzZXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJzZWN1cmUgYmFja3VwIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIG9mIHRoZSBwYXNzd29yZCwgYnV0IHN0b3JlIGl0IGluIGEgc2VwYXJhdGUgbG9jYXRpb24gZnJvbSB5b3VyIG1haW4gMTIgcmVjb3Zlcnkgd29yZHMuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImhvdy1hcmUtdGhlLXNlY3JldHMtY3JlYXRlZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG93LWFyZS10aGUtc2VjcmV0cy1jcmVhdGVkIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSG93IGFyZSB0aGUgc2VjcmV0cyBjcmVhdGVkIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJXYXNhYmkgdXNlcyAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTM4LXBhc3N3b3JkLXByb3RlY3RlZC1wcml2YXRlLWtleSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAzODogUGFzc3dvcmQtUHJvdGVjdGVkIFByaXZhdGUgS2V5IildCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgICAgfCBFbnRyb3B5ICAgICAgfFxuICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLStcbiAgKy0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgfFxuICB8IFdvcmQgbGlzdCAgKy0tLS0tLS0tLS0tLT4rXG4gICstLS0tLS0tLS0tLS0rICAgICAgICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tdi0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgICAgfCBNbmVtb25pY3MgICAgfFxuICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0+XG4gICAgICAgICAgICAgICAgICAgfCAgICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICB8ICArLS0tLS0tdi0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgfCAgfCBTZWVkICAgICAgICAgfFxuICAgICAgICAgICAgICAgICAgIHwgICstLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgfFxuICAgKy0tLS0tLS0tLS0tKyAgIHwgICAgICAgICB8XG4gICB8IFBhc3N3b3JkICArLS0tKyAgKy0tLS0tLXYtLS0tLS0tK1xuICAgKy0tLS0tLS0tLS0tKyAgIHwgIHwgRXh0ZW5kZWQgS2V5IHxcbiAgICAgICAgICAgICAgICAgICB8ICArLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgfCAgICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgfFxuICAgICAgICAgICAgICAgICAgIHwgICstLS0tLS12LS0tLS0tLStcbiAgICAgICAgICAgICAgICAgICB8ICB8IFByaXZhdGUga2V5ICB8ICAgICAqKiBUaGlzIHN0ZXAgaXMgbmVlZGVkIHRvIHVzZSBiaXAzOFxuICAgICAgICAgICAgICAgICAgIHwgICstLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgfCAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tPis8LS0tLS0tLS0tLS0tLSsgIE5ldHdvcmsgICAgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tdi0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgICAgfCBFbmNyeXB0ZWQgICAgfFxuICAgICAgICAgICAgICAgICAgICAgIHwgc2VjcmV0ICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICB8IFNhdmUgZW5jcnlwdGVkICAgICB8XG4gICAgICAgICAgICAgICAgICB8IHNlY3JldCtjaGFpbmNvZGUrICB8XG4gICAgICAgICAgICAgICAgICB8IEZpbmdlcnByaW50K0V4dFB1YiB8XG4gICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}