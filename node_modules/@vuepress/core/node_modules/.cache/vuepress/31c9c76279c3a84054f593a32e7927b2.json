{"remainingRequest":"/home/user/WasabiDoc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDoc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDoc/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDoc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDoc/docs/.vuepress/variables.js!/home/user/WasabiDoc/docs/IntroWasabi.md?vue&type=template&id=3ba896b8&","dependencies":[{"path":"/home/user/WasabiDoc/docs/IntroWasabi.md","mtime":1576439797202},{"path":"/home/user/WasabiDoc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDoc/docs/.vuepress/variables.js","mtime":1579281550529}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}