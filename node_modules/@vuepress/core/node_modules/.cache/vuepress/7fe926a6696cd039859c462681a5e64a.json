{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/essays/CoinJoin.md?vue&type=template&id=6975db8f&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/essays/CoinJoin.md","mtime":1579971419601},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjb2luam9pbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29pbmpvaW4iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvaW5Kb2luIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkEgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZW4uYml0Y29pbi5pdC9Qcml2YWN5I0NvaW5Kb2luIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJDb2luSm9pbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyBhIHNwZWNpYWwgQml0Y29pbiB0cmFuc2FjdGlvbiB3aGVyZSBzZXZlcmFsIHBlZXJzIGdldCB0b2dldGhlciB0byBsaXRlcmFsbHkgam9pbiB0aGVpciBjb2lucyBpbiBhIHNpbmdsZSB0cmFuc2FjdGlvbi5cblRoZXkgY29sbGFib3JhdGl2ZWx5IGJ1aWxkIGEgdHJhbnNhY3Rpb24gd2hlcmUgZWFjaCBvZiB0aGVtIHByb3ZpZGVzIHNvbWUgY29pbnMgYXMgaW5wdXRzLCBhbmQgZnJlc2ggYWRkcmVzc2VzIGFzIG91dHB1dHMuXG5UaGUgY29uY2VwdCBoYXMgYmVlbiBhcm91bmQgc2luY2UgdGhlIGVhcmx5IGRheXMgb2YgQml0Y29pbiwgYW5kIGl0IHdhcyBmb3JtYWxpemVkIGJ5IHRoZSBncmVhdCBHcmVnIE1heHdlbGwgaW4gIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYml0Y29pbnRhbGsub3JnL2luZGV4LnBocD90b3BpYz0yNzkyNDkubXNnMjk4MzkwMiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigidGhpcyBhd2Vzb21lIGludHJvZHVjdG9yeSB0aHJlYWQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1RoZSBnb2FsIGlzIHRvIGdhaW4gcHJpdmFjeSBieSBicmVha2luZyB0aGUgbGluayBvZiB3aGljaCBpbnB1dCAicGF5cyIgd2hpY2ggb3V0cHV0LCBzbyB0aGF0IGFueSBvZiB0aGUgb3V0cHV0cyBjYW5ub3QgYmUgYXR0cmlidXRlZCB0byB0aGUgb3duZXIgb2YgdGhlIGlucHV0LlxuVGhlcmVmb3JlLCBpdCBpcyB2ZXJ5IGltcG9ydGFudCB0aGF0IHRoZSB2YWx1ZXMgb2YgdGhlIG91dHB1dHMgYXJlIGV4YWN0bHkgZXF1YWwuXG5XYXNhYmkgZW5hYmxlcyB0cnVzdGxlc3MgKG1lYW5pbmcgbm9ib2R5IGNhbiBzdGVhbCkgYW5kIHByaXZhdGUgKG1lYW5pbmcgZXZlbiB0aGUgY29vcmRpbmF0b3IgY2Fubm90IHNweSkgU2Nobm9yciBibGluZCBzaWduYXR1cmUgQ29pbkpvaW4gYWNjb3JkaW5nIHRvIHRoZSAnCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL25vcGFyYTczL3plcm9saW5rIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJaZXJvTGluayBmdW5naWJpbGl0eSBmcmFtZXdvcmsiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0YWJsZS1vZi1jb250ZW50cyIgfSwgWwogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZG9pbmctY29pbmpvaW4tc3RlcC1ieS1zdGVwIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkRvaW5nIENvaW5Kb2luIHN0ZXAtYnktc3RlcCIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjemVyb2xpbmstcHJvdG9jb2wtc3RlcC1ieS1zdGVwIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlplcm9MaW5rIHByb3RvY29sIHN0ZXAtYnktc3RlcCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjaW5wdXQtcmVnaXN0cmF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJbnB1dCByZWdpc3RyYXRpb24iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjb25uZWN0aW9uLWNvbmZpcm1hdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQ29ubmVjdGlvbiBjb25maXJtYXRpb24iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNvdXRwdXQtcmVnaXN0cmF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJPdXRwdXQgcmVnaXN0cmF0aW9uIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjc2lnbmluZyIgfSB9LCBbX3ZtLl92KCJTaWduaW5nIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2Jyb2FkY2FzdGluZyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQnJvYWRjYXN0aW5nIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiN3YXNhYmktY29pbmpvaW4tZXhhbXBsZXMiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiV2FzYWJpIENvaW5Kb2luIGV4YW1wbGVzIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNyZWFkLW1vcmUiIH0gfSwgW192bS5fdigiUmVhZCBtb3JlIildKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkb2luZy1jb2luam9pbi1zdGVwLWJ5LXN0ZXAiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2RvaW5nLWNvaW5qb2luLXN0ZXAtYnktc3RlcCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERvaW5nIENvaW5Kb2luIHN0ZXAtYnktc3RlcCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ0xhdW5jaCBXYXNhYmksIGFuZCBvcGVuIHlvdXIgd2FsbGV0IHRoYXQgY29udGFpbnMgdGhlIGNvaW5zIHRoYXQgeW91IHdhbnQgdG8gQ29pbkpvaW4uXG5Ob3RpY2UgdGhhdCBpdCBpcyBub3QgeWV0IHBvc3NpYmxlIHRvIENvaW5Kb2luIGZyb20gYSBoYXJkd2FyZSB3YWxsZXQsIHRoZSBrZXlzIG11c3QgYmUgImhvdCIgb24geW91ciBjb21wdXRlci5cblRoZW4gY2xpY2sgb24gdGhlICcKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNvaW5Kb2luIildKSwKICAgICAgICAgIF92bS5fdigiIHRhYiwgZWl0aGVyIGZyb20gdGhlIHRvcCB0YWJzIG9yIHRoZSByaWdodC1zaWRlIG1lbnUuIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIi9Db2luSm9pbi5wbmciLCBhbHQ6ICIiIH0gfSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICIyIiB9IH0sIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTZWxlY3QgY29pbnMgZm9yIGpvaW5pbmcgYnkgY2xpY2tpbmcgdGhlIGNoZWNrIGJveCBpbiB0aGUgY29pbiBsaXN0LlxuWW91IGNhbiBzZWxlY3Qgb25lIG9yIG1vcmUgY29pbnMsIGJ1dCB3aGVuIHNldmVyYWwgYXJlIHNlbGVjdGVkLCB0aGV5IGNhbiBiZSBsaW5rZWQgYW5kIGNsdXN0ZXJlZCBieSBhbiBhdHRhY2tlci5cblNvLCBjaG9vc2UgY2FyZWZ1bGx5IHdoaWNoIGNvaW5zIHlvdSB3YW50IG90aGVycyB0byBrbm93IGJlbG9uZyB0byB0aGUgc2FtZSBlbnRpdHkgKHlvdSkuXG5Zb3UgY2FuIHNlbGVjdCAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaGllbGQiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvU2hpZWxkUmVkLnBuZyIsIGFsdDogInJlZCBzaGllbGQiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNvaW5zLCB3aGljaCBhcmUgbm90IHByaXZhdGUgeWV0LCBidXQgd2lsbCBnYWluIGFub255bWl0eSBzZXQgaW4gdGhpcyByb3VuZCBvZiBDb2luSm9pbi5cbkFsc28sIHlvdSBjYW4gc2VsZWN0ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInNoaWVsZCIsCiAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9TaGllbGRHcmVlbi5wbmciLCBhbHQ6ICJncmVlbiBzaGllbGQiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNvaW5zLCB3aGljaCBjb21lIGZyb20gYSBwcmV2aW91cyByb3VuZCBvZiBDb2luSm9pbiwgc28gdGhhdCB0aGV5IGdhaW4gYW4gZXZlbiBsYXJnZXIgYW5vbnltaXR5IHNldC5cbldoYXQgaXMgaW1wb3J0YW50IGlzIHRoYXQgdGhlIHN1bSBvZiBjb2lucyByZWdpc3RlcmVkIGhhdmUgYSB2YWx1ZSBsYXJnZXIgdGhhbiB0aGUgbWluaW11bSBsZXZlbCwgd2hpY2ggaXMgY3VycmVudGx5IHJvdWdobHkgMC4xIGJpdGNvaW4uIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2sgZGFuZ2VyIiB9LCBbCiAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrLXRpdGxlIiB9LCBbX3ZtLl92KCJXQVJOSU5HIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRvIG5vdCBzZWxlY3QgY29pbnMgd2l0aCBkaWZmZXJlbnQgY29sb3JzIChkaWZmZXJlbnQgYW5vbnltaXR5IHNldHMpIHRvIENvaW5Kb2luIGluIHRoZSBzYW1lIHJvdW5kLlxuVGhpcyBpcyBiZWNhdXNlIHRoZSBjb2lucyB3aXRoIHRoZSBoaWdoZXIgYW5vbnltaXR5IHNldCB3aWxsIGxvc2Ugc29tZSBvZiB0aGVpciBhbm9ueW1pdHkgc2V0LCB0byBlcXVhbCB0aGUgYW5vbnltaXR5IHNldCBvZiB0aGUgbG93ZXIgb25lcy5cblRoZSBiZXN0IG9wdGlvbiB3b3VsZCBiZSB0byBzZWxlY3QgY29pbnMgd2l0aCB0aGUgc2FtZSBhbm9ueW1pdHkgc2V0LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICIzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU3BlY2lmeSBhbm9ueW1pdHkgc2V0IHRhcmdldC5cbldhc2FiaSB3aWxsIGF1dG9tYXRpY2FsbHkgcmUtcmVnaXN0ZXIgeW91ciBjb2luIGZvciB0aGUgbmV4dCByb3VuZCB1bnRpbCB0aGlzIHRhcmdldCBpcyByZWFjaGVkLlxuWW91IGNhbiBlYXNpbHkgdG9nZ2xlIGJldHdlZW4gdGhyZWUgbGV2ZWxzIGJ5IGNsaWNraW5nIG9uIHRoZSBzaGllbGQuXG5Zb3UgY2FuIGFsc28gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvRkFRL0ZBUS1Vc2VXYXNhYmkuaHRtbCNob3ctY2FuLWktY2hhbmdlLXRoZS1hbm9uc2V0LXRhcmdldCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImNoYW5nZSB0aGUgdmFsdWUiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgb2YgdGhlIHRocmVlIHNoaWVsZHMgaW4gdGhlIHNldHRpbmdzLiIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL0NvaW5Kb2luQW5vbnNldFRhcmdldFllbGxvdy5wbmciLCBhbHQ6ICIiIH0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL0NvaW5Kb2luQW5vbnNldFRhcmdldEdyZWVuLnBuZyIsIGFsdDogIiIgfQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvQ29pbkpvaW5Bbm9uc2V0VGFyZ2V0Q2hlY2sucG5nIiwgYWx0OiAiIiB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiNCIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJFbnRlciB5b3VyIHBhc3N3b3JkIGFuZCBjbGljayAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRW5xdWV1ZSBTZWxlY3RlZCBDb2lucyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuXG5Zb3Ugb25seSBoYXZlIHRvIGVudGVyIHlvdXIgcGFzc3dvcmQgZm9yIHRoZSBmaXJzdCByb3VuZCBvZiBtaXhpbmcsIGFzIGFueSByZS1taXggcm91bmRzIGRpcmVjdGx5IGFmdGVyd2FyZHMgYXJlIGRvbmUgd2l0aG91dCByZXF1aXJpbmcgYSBwYXNzd29yZCBpbnB1dC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL0NvaW5Kb2luQ29pbnNCZWluZ0NvaW5Kb2luZWQucG5nIiwgYWx0OiAiIiB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiNSIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTm93LCB3YWl0IHVudGlsIHRoZSBDb2luSm9pbiBpcyBjb21wbGV0ZS5cblRoZSByb3VuZCBzdGFydHMgZWl0aGVyIGFzIHNvb24gYXMgMTAwIHBlZXJzIGhhdmUgcmVnaXN0ZXJlZCB0aGVpciBjb2lucywgb3IgYWZ0ZXIgdHdvIGhvdXJzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCByb3VuZC5cbkZyb20gbm93IG9uIHRoZXJlIGlzIG5vIG1vcmUgaW50ZXJhY3Rpb24gcmVxdWlyZWQuXG5KdXN0IGxlYXZlIFdhc2FiaSBydW5uaW5nIGluIHRoZSBiYWNrZ3JvdW5kIG9mIHlvdXIgY29tcHV0ZXIuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiL0NvaW5Kb2luU3RhdHVzLnBuZyIsIGFsdDogIiIgfSB9KV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgeyBhdHRyczogeyBzdGFydDogIjYiIH0gfSwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldoZW4gdGhlIENvaW5Kb2luIGlzIGZpbmlzaGVkLCBhbmQgdGhlIENvaW5Kb2luIHRyYW5zYWN0aW9uIGlzIGJyb2FkY2FzdCwgeW91IHdpbGwgcmVjZWl2ZSBhIGZyZXNoIGNvaW4gd2l0aCBhIGhpZ2ggYW5vbnltaXR5IHNldCwgYXMgd2VsbCBhcyBub24tcHJpdmF0ZSBjaGFuZ2UuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInplcm9saW5rLXByb3RvY29sLXN0ZXAtYnktc3RlcCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjemVyb2xpbmstcHJvdG9jb2wtc3RlcC1ieS1zdGVwIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgWmVyb0xpbmsgcHJvdG9jb2wgc3RlcC1ieS1zdGVwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaW5wdXQtcmVnaXN0cmF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpbnB1dC1yZWdpc3RyYXRpb24iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJbnB1dCByZWdpc3RyYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkR1cmluZyB0aGUgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLVVzZVdhc2FiaS5odG1sI3doYXQtaXMtaGFwcGVuaW5nLWluLXRoZS1pbnB1dC1yZWdpc3RyYXRpb24tcGhhc2UiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJpbnB1dCByZWdpc3RyYXRpb24iKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIHlvdSBzZWxlY3Qgd2hpY2ggY29pbnMgeW91IHdhbnQgdG8gcmVnaXN0ZXIgZm9yIENvaW5Kb2luLlxuVGhlc2UgY29pbnMgbmVlZCB0byBiZSBjb25maXJtZWQgb24gdGhlIEJpdGNvaW4gdGltZWNoYWluLCB1bmxlc3MgdGhleSBhcmUgZnJvbSBhIFdhc2FiaSBDb2luSm9pbiBhbmQgeW91IHJlLXJlZ2lzdGVyIHRoZW0uXG5JbiB0aGUgYmFja2dyb3VuZCwgV2FzYWJpIGdlbmVyYXRlcyBhbiBpbnB1dCBwcm9vZiwgYSBzaWduYXR1cmUgb3ZlciBhIGNoYWxsZW5nZSBtZXNzYWdlIHdpdGggdGhlIHByaXZhdGUga2V5IHRoYXQgbG9ja3MgdXAgdGhlIGNvaW5zLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJXaXRoIHRoaXMsIHRoZSBjb29yZGluYXRvciBjYW4gdmVyaWZ5IHRoYXQgeW91IGFjdHVhbGx5IG93biB0aGVzZSBjb2lucy5cblRoZW4geW91ciBXYXNhYmkgY2xpZW50IGdlbmVyYXRlcyBzZXZlcmFsIGZyZXNoIGFkZHJlc3NlcywgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBpbnB1dHMgcmVnaXN0ZXJlZC5cblRoZSBhZGRyZXNzIG9mIHRoZSBhbm9uc2V0IENvaW5Kb2luIG91dHB1dCBtdXN0IG5vdCBiZSBsaW5rZWQgdG8geW91ciBpbnB1dCwgYW5kIHRodXMgaXQgaXMgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JsaW5kX3NpZ25hdHVyZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImNyeXB0b2dyYXBoaWNhbGx5IGJsaW5kZWQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0byBpbmNvbXByZWhlbnNpYmxlIGN5cGhlci10ZXh0LlxuU2luY2UgdGhlIGNoYW5nZSBvdXRwdXQgY2FuIGJlIGVhc2lseSBsaW5rZWQgdG8geW91ciBpbnB1dCB3aXRoICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi9GQVEvRkFRLUdlbmVyYWxCaXRjb2luUHJpdmFjeS5odG1sI3doYXQtaXMtYS1jb2luam9pbi1zdWRva3UiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJDb2luSm9pbiBTdWRva3UiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgdGhpcyBhZGRyZXNzIGlzIG5vdCBibGluZGVkLCBidXQga2VwdCBpbiBjbGVhci10ZXh0LiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldhc2FiaSB3YWxsZXQgZ2VuZXJhdGVzIGEgbmV3ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3RiLW1hbnVhbC50b3Jwcm9qZWN0Lm9yZy9tYW5hZ2luZy1pZGVudGl0aWVzLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiVG9yIGlkZW50aXR5IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBjYWxsZWQgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFsaWNlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLlxuU2hlIGlzIGxpa2UgYSBzZXBhcmF0ZSBlbnRpdHksIGFuZCBmb3IgZXZlcnkgcm91bmQgeW91IHVzZSBhIG5ldyBBbGljZSB3aG8gaXMgbm90IGxpbmtlZCB0byBhbnkgcHJldmlvdXMgY29ubmVjdGlvbi5cbldpdGggQWxpY2UsIHlvdSBzZW5kIHNvbWUgaW5mb3JtYXRpb24gdG8gdGhlIFdhc2FiaSBjb29yZGluYXRvciBzZXJ2ZXI6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIGlucHV0IGNvaW4gdGhhdCB5b3Ugd2FudCB0byByZWdpc3RlciwgdG9nZXRoZXIgd2l0aCB0aGUgaW5wdXQgcHJvb2Ygc2lnbmF0dXJlLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUaGUgY2xlYXIgdGV4dCBjaGFuZ2UgYWRkcmVzcy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSBibGluZGVkIGFub25zZXQgQ29pbkpvaW4gb3V0cHV0LiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRoZSBXYXNhYmkgY29vcmRpbmF0b3Igbm93IHZlcmlmaWVzIHRoYXQ6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlRoZXJlIGlzIHN0aWxsIHJvb20gZm9yIG1vcmUgcGVlcnMgb24gdGhpcyBDb2luSm9pbi4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlIGJsaW5kZWQgb3V0cHV0IGhhcyBuZXZlciBiZWVuIHJlZ2lzdGVyZWQgYmVmb3JlLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRWFjaCBpbnB1dCBoYXMgbm90IGJlZW4gcmVnaXN0ZXJlZCBiZWZvcmUsIGlzIG5vdCBiYW5uZWQsIGlzIHVuc3BlbnQsIGFuZCB0aGF0IHRoZSBpbnB1dCBwcm9vZiBpcyB2YWxpZC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhhdCB0aGUgc3VtIHZhbHVlIG9mIGlucHV0cyBpcyBoaWdoZXIgdGhhbiB0aGUgbWluaW11bSByZXF1aXJlZCB2YWx1ZSBvZiByb3VnaGx5IDAuMSBiaXRjb2luLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmx5IHdoZW4gYWxsIHRoZXNlIGNoZWNrcyBhcmUgdmFsaWQgZG9lcyB0aGUgY29vcmRpbmF0b3Igc2lnbiB0aGUgYmxpbmRlZCBvdXRwdXQuXG5IZSBkb2VzIG5vdCBrbm93IHRoZSBhZGRyZXNzIHRoYXQgaGUgaXMgc2lnbmluZywgYmVjYXVzZSBpdCBpcyBibGluZGVkIGN5cGhlci10ZXh0LlxuVGhpcyBzaWduYXR1cmUgaXMgcHJvb2YgdGhhdCB0aGUgY29vcmRpbmF0b3IgaGFzIHZlcmlmaWVkIHRoYXQgQWxpY2UgaXMgbm90IGNoZWF0aW5nLlxuVGhlIGNvb3JkaW5hdG9yIHNlbmRzIHRoZSBzaWduZWQgYmxpbmRlZCBvdXRwdXQgYmFjayB0byBBbGljZSwgdG9nZXRoZXIgd2l0aCBhIHVuaXF1ZSBJRCB0aGF0IGlzIHRoZSBpZGVudGlmaWVyIG9mIHRoaXMgc3BlY2lmaWMgQWxpY2UgaW4gdGhpcyByb3VuZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbGljZSBoYXMgdGhlIHNlY3JldCBwYXJhbWV0ZXJzIG5lZWRlZCB0byB1bmJsaW5kIHRoZSBzaWduZWQsIGJsaW5kZWQgb3V0cHV0LlxuV2l0aCB0aGUgbWFnaWMgb2YgY3J5cHRvZ3JhcGh5LCBzaGUgY2FuIHJldmVhbCB0aGUgY2xlYXItdGV4dCBhZGRyZXNzIG9mIHRoZSBhbm9uc2V0IENvaW5Kb2luIG91dHB1dC5cbkhvd2V2ZXIsIHRoZSBjb29yZGluYXRvciBzaWduYXR1cmUgaXMgc3RpbGwgYXR0YWNoZWQgdG8gdGhpcyBhZGRyZXNzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBpbnB1dCByZWdpc3RyYXRpb24gcGhhc2UgZW5kcyB3aGVuIGVpdGhlcjogdGhlIG51bWJlciBvZiByZWdpc3RlcmVkIGlucHV0cyBleGNlZWRzIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgaW5wdXRzIChtZWFuaW5nIGFub255bWl0eSBzZXQgb2YgMTAwIHBlZXJzKSwgb3Igd2hlbiB0aGUgdGltZSBlbGFwc2VkIHNpbmNlIHRoZSBwcmV2aW91cyByb3VuZCByZWFjaGVzIHR3byBob3Vycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAieXRFbWJlZCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgInVybChodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS92MWZJakZSNmU1US9ocWRlZmF1bHQuanBnKSIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogeyAiZGF0YS1pZCI6ICJ2MWZJakZSNmU1USIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUgdjFmSWpGUjZlNVEiLAogICAgICAgICAgICAgICJkYXRhLXNyYyI6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvdjFmSWpGUjZlNVE/JmF1dG9wbGF5PTEmYXV0b2hpZGU9MSZtb2Rlc3RicmFuZGluZz0xJmNvbG9yPXdoaXRlJnJlbD0wIiwKICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgICAgIGFsbG93OiAiYXV0b3BsYXk7ZW5jcnlwdGVkLW1lZGlhO3BpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjb25uZWN0aW9uLWNvbmZpcm1hdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29ubmVjdGlvbi1jb25maXJtYXRpb24iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb25uZWN0aW9uIGNvbmZpcm1hdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIGFyZSBtYW55IEFsaWNlcyAoZGlmZmVyZW50IHVzZXJzKSByZWdpc3RlcmluZyB0aGVpciBpbnB1dHMgaW4gdGhlIGZpcnN0IHBoYXNlLCBhbmQgdGhpcyB0YWtlcyBhIHdoaWxlLCB1cCB0byB0d28gaG91cnMuXG5UaGUgY29ubmVjdGlvbiBjb25maXJtYXRpb24gcGhhc2UgbWFrZXMgc3VyZSB0aGF0IGFsbCBvZiB0aGVtIGFyZSBzdGlsbCBvbmxpbmUgYW5kIHJlYWR5IHRvIGNvbnRpbnVlLlxuVGhlIGNvb3JkaW5hdG9yIHZlcmlmaWVzIHRoZSB1bmlxdWUgSUQgZnJvbSBhbGwgdGhlIEFsaWNlcywgYW5kIHdoaWxlIGV2ZXJ5b25lIGlzIHN0aWxsIGNvbW11bmljYXRpbmcsIHRoZSBjb29yZGluYXRvciByZXR1cm5zIHRoZSByb3VuZCBoYXNoIG9mIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnB1dHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHJvdW5kIGlzIGFiYW5kb25lZCBhbmQgcmUtc3RhcnRlZCBpZiB0b28gbWFueSBBbGljZXMgaGF2ZSBkcm9wcGVkLCBmb3IgZXhhbXBsZSB3aGVuIHRoZWlyIFdhc2FiaSBpcyBzaHV0IGRvd24sIG9yIHdoZW4gdGhlaXIgdG9yIGNvbm5lY3Rpb24gaXMgdGVtcG9yYXJpbHkgYnJva2VuLlxuVGhlIGNvbm5lY3Rpb24gY29uZmlybWF0aW9uIHBoYXNlIGVuZHMgd2hlbiBhbGwgQWxpY2VzIGhhdmUgcHJvdmlkZWQgdGhlaXIgaW5wdXRzLCBvciBhZnRlciBhIHRpbWVvdXQgd2hlbiB0aGUgbnVtYmVyIG9mIG9ubGluZSBBbGljZXMgYXJlIHN0aWxsIGxhcmdlciB0aGFuIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgcGVlcnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInl0RW1iZWQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICJ1cmwoaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvaGhrTDBRdklhR1kvaHFkZWZhdWx0LmpwZykiCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsgImRhdGEtaWQiOiAiaGhrTDBRdklhR1kiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgdGl0bGU6ICJZb3VUdWJlIGhoa0wwUXZJYUdZIiwKICAgICAgICAgICAgICAiZGF0YS1zcmMiOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkL2hoa0wwUXZJYUdZPyZhdXRvcGxheT0xJmF1dG9oaWRlPTEmbW9kZXN0YnJhbmRpbmc9MSZjb2xvcj13aGl0ZSZyZWw9MCIsCiAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgICAgICBhbGxvdzogImF1dG9wbGF5O2VuY3J5cHRlZC1tZWRpYTtwaWN0dXJlLWluLXBpY3R1cmUiLAogICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib3V0cHV0LXJlZ2lzdHJhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjb3V0cHV0LXJlZ2lzdHJhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE91dHB1dCByZWdpc3RyYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJOb3cgdGhhdCBhbGwgcGVlcnMgYXJlIG9ubGluZSwgd2UgYXJlIHJlYWR5IHRvIHByb2NlZWQgd2l0aCB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtVXNlV2FzYWJpLmh0bWwjd2hhdC1pcy1oYXBwZW5pbmctaW4tdGhlLW91dHB1dC1yZWdpc3RyYXRpb24tcGhhc2UiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJvdXRwdXQgcmVnaXN0cmF0aW9uIHBoYXNlIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIG9mIHRoZSByb3VuZC5cbllvdXIgV2FzYWJpIGNsaWVudCBnZW5lcmF0ZXMgYSBjb21wbGV0ZWx5IG5ldyB0b3IgaWRlbnRpdHkgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJCb2IiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLCB0aGF0IGlzIGluIG5vIHdheSB0aWVkIHRvIEFsaWNlLlxuQm9iIHNlbmRzIHRvIHRoZSBXYXNhYmkgY29vcmRpbmF0b3I6IgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlIGNsZWFyLXRleHQgYWRkcmVzcyBmb3IgdGhlIGFub25zZXQgQ29pbkpvaW4gb3V0cHV0LiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVGhlIGNvb3JkaW5hdG9yIHNpZ25hdHVyZSBvdmVyIHRoYXQgb3V0cHV0LiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVGhlIHJvdW5kIGhhc2ggb2YgYWxsIHRoZSBpbnB1dHMuIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZWNhdXNlIHRoZSBjb29yZGluYXRvciBjYW4gdmVyaWZ5IGhpcyBvd24gc2lnbmF0dXJlLCBoZSBrbm93cyB0aGF0IHRoaXMgb3V0cHV0IHdhcyBpbml0aWFsbHkgc2VudCBieSBhbnkgQWxpY2UgKGhlIGNhbm5vdCBrbm93IHdoaWNoIEFsaWNlIGV4YWN0bHkpLCBhbmQgdGhhdCBoZSBoYXMgdmVyaWZpZWQgdGhhdCBldmVyeXRoaW5nIGlzIGluIG9yZGVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIHZlcnkgaW1wb3J0YW50IHRoYXQgdGhlIGNvb3JkaW5hdG9yIGNhbm5vdCBsaW5rIEFsaWNlIHRvIEJvYi5cbkJlY2F1c2UgQWxpY2UgaGFzIHNlbnQgdGhlIGNsZWFyLXRleHQgaW5wdXQsIGFuZCBCb2Igc2VuZHMgdGhlIGNsZWFyLXRleHQgb3V0cHV0LlxuU28sIGlmIHRoZSB0d28gd2VyZSB0byBiZSBsaW5rZWQsIHRoZW4gdGhlIGNvb3JkaW5hdG9yIGNhbiBzcGVjaWZpY2FsbHkgbGluayB0aGUgaW5wdXQgdG8gdGhlIG91dHB1dCwgbWVhbmluZyB0aGF0IHRoZSBhbm9ueW1pdHkgc2V0IGlzIDEuXG5CZWNhdXNlIEFsaWNlIGNvbW1pdHMgdG8gdGhlIG91dHB1dCBieSBzZW5kaW5nIGl0IGJsaW5kZWQsIGFuZCBiZWNhdXNlIEJvYiBpcyBhIG5ldyB0b3IgaWRlbnRpdHkgbm90IGxpbmtlZCB0byBBbGljZSwgdGhlIGNvb3JkaW5hdG9yIGNhbiB2ZXJpZnkgdGhhdCBub2JvZHkgaXMgY2hlYXRpbmcsIGJ1dCBoZSBjYW5ub3QgZGVhbm9ueW1pemUgdGhlIHBlZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBvdXRwdXQgcmVnaXN0cmF0aW9uIHBoYXNlIGVuZHMgd2hlbiB0aGUgdmFsdWUgb2YgY2xlYXItdGV4dCBvdXRwdXRzIHBsdXMgY2hhbmdlIG91dHB1dHMgaXMgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIGlucHV0cywgbWVhbmluZyBhbGwgQm9icyBoYXZlIHJlZ2lzdGVyZWQuXG5JZiwgYWZ0ZXIgYSB0aW1lb3V0IG5vdCBhbGwgb3V0cHV0cyBhcmUgcmVnaXN0ZXJlZCwgdGhlbiB0aGlzIHJvdW5kIGlzIGFiYW5kb25lZCwgdGhlIG1pc3NpbmcgcGVlcnMgYXJlIGJhbm5lZCwgYW5kIGEgbmV3IHJvdW5kIGlzIHN0YXJ0ZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2lnbmluZyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc2lnbmluZyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFNpZ25pbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJOb3cgdGhhdCBhbGwgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZSByZWdpc3RlcmVkLCB0aGUgV2FzYWJpIGNvb3JkaW5hdG9yIGNhbiBzdGFydCB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtVXNlV2FzYWJpLmh0bWwjd2hhdC1pcy1oYXBwZW5pbmctaW4tdGhlLXNpZ25pbmctcGhhc2UiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJzaWduaW5nIHBoYXNlIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGJ5IGJ1aWxkaW5nIHRoZSBDb2luSm9pbiB0cmFuc2FjdGlvbiB3aXRoIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnB1dHMsIHRoZSBhbm9uc2V0IG91dHB1dHMsIHRoZSBjaGFuZ2Ugb3V0cHV0cyBhbmQgdGhlIGNvb3JkaW5hdG9yIGZlZSBvdXRwdXQuXG5IZSBzZW5kcyB0aGlzIHRyYW5zYWN0aW9uIHRvIGFsbCB0aGUgQWxpY2VzIG9mIHRoaXMgcm91bmQuXG5FYWNoIEFsaWNlIHZlcmlmaWVzIHRoYXQ6IgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSBjb21taXR0ZWQgcm91bmQgaGFzaCBpcyBlcXVhbCB0byB0aGUgaGFzaCBvZiBhbGwgdGhlIGlucHV0cyBpbiB0aGUgcHJvcG9zZWQgdHJhbnNhY3Rpb24uIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkhlciBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIGNvcnJlY3RseSBpbmNsdWRlZC4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNoZSB0aGVuIHNpZ25zIHRoZSB0cmFuc2FjdGlvbiB3aXRoIHRoZSBwcml2YXRlIGtleXMgb2YgaGVyIGlucHV0cy5cbkFsaWNlIHNlbmRzIHRoZSB1bmlxdWVJRCwgdGhlIHNpZ25hdHVyZSwgYW5kIHRoZSBpbnB1dCBpbmRleCB0byB0aGUgY29vcmRpbmF0b3IsIHdobyB0aGVuIHZlcmlmaWVzIHRoaXMgaW5mb3JtYXRpb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHNpZ25pbmcgcGhhc2UgZW5kcyB3aGVuIHRoZSBjb29yZGluYXRvciBoYXMgYWxsIHRoZSB2YWxpZCBzaWduYXR1cmVzIGZvciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW5wdXRzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImJyb2FkY2FzdGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYnJvYWRjYXN0aW5nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCcm9hZGNhc3RpbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgQ29pbkpvaW4gdHJhbnNhY3Rpb24gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGJ1aWx0IGFuZCBzaWduZWQsIGFuZCBpdCBpcyBub3cgcmVhZHkgdG8gYmUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL0ZBUS9GQVEtVXNlV2FzYWJpLmh0bWwjd2hhdC1pcy1oYXBwZW5pbmctaW4tdGhlLWJyb2FkY2FzdGluZy1waGFzZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImJyb2FkY2FzdGVkIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvIHRoZSBwZWVycyBvZiB0aGUgQml0Y29pbiBuZXR3b3JrLlxuVGhlIGNvb3JkaW5hdG9yIHNlbmRzIHRoaXMgdHJhbnNhY3Rpb24gb3ZlciB0aGUgdG9yIG5ldHdvcmsgdG8gYSByYW5kb20gQml0Y29pbiBQMlAgbm9kZSwgYW5kIGZyb20gdGhlcmUgaXQgaXMgZ29zc2lwZWQgdG8gb3RoZXIgbm9kZXMgYW5kIG1pbmVycy5cbldhc2FiaSBzYXZlcyBvbiBtaW5pbmcgZmVlcyBieSBzZXR0aW5nIGEgY29uZmlybWF0aW9uIHRhcmdldCBvZiByb3VnaGx5IDEyIGhvdXJzLCBidXQgeW91IGNhbiByZS1yZWdpc3RlciB1bmNvbmZpcm1lZCBhbm9uc2V0IG91dHB1dHMgZm9yIHRoZSBuZXh0IHJvdW5kIG9mIENvaW5Kb2luLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ3YXNhYmktY29pbmpvaW4tZXhhbXBsZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3dhc2FiaS1jb2luam9pbi1leGFtcGxlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdhc2FiaSBDb2luSm9pbiBleGFtcGxlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhlcmUncyBhIGxpc3Qgb2YgV2FzYWJpIENvaW5Kb2luIGV4YW1wbGVzIGFuZCBob3cgdGhleSBhcHBlYXIgb24gYW4gZXhwbG9yZXI6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9ibG9ja3N0cmVhbS5pbmZvL3R4L2U0YTc4OWQxNmEyNGE2NjQzZGZlZTA2ZTAxOGFkMjc2NDhiODk2ZGFhZTZhMzU3N2FlMGY0ZWRkY2M0ZDkxNzQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgImU0YTc4OWQxNmEyNGE2NjQzZGZlZTA2ZTAxOGFkMjc2NDhiODk2ZGFhZTZhMzU3N2FlMGY0ZWRkY2M0ZDkxNzQiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHwgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwOi8vZXhwbG9yZXJ6eWR4dTVlY2pya3djZWF5cXliaXptcGpqem5rNWl6bWl0ZjJtb2RoY3VzdXFsaWQub25pb24vdHgvZTRhNzg5ZDE2YTI0YTY2NDNkZmVlMDZlMDE4YWQyNzY0OGI4OTZkYWFlNmEzNTc3YWUwZjRlZGRjYzRkOTE3NCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIi5vbmlvbiB2ZXJzaW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2Jsb2Nrc3RyZWFtLmluZm8vdHgvYzY5YWVkNTA1Y2E1MDQ3M2UyODgzMTMwMjIxOTE1Njg5YzE0NzRiZTNjNjZiY2Y3YWM3ZGMwZTI2MjQ2YWZjOCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiYzY5YWVkNTA1Y2E1MDQ3M2UyODgzMTMwMjIxOTE1Njg5YzE0NzRiZTNjNjZiY2Y3YWM3ZGMwZTI2MjQ2YWZjOCIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgfCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHA6Ly9leHBsb3Jlcnp5ZHh1NWVjanJrd2NlYXlxeWJpem1wamp6bms1aXptaXRmMm1vZGhjdXN1cWxpZC5vbmlvbi90eC9jNjlhZWQ1MDVjYTUwNDczZTI4ODMxMzAyMjE5MTU2ODljMTQ3NGJlM2M2NmJjZjdhYzdkYzBlMjYyNDZhZmM4IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiLm9uaW9uIHZlcnNpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vYmxvY2tzdHJlYW0uaW5mby90eC9lZjMyOWIzZWQ4ZTc5MGYxMGYwYjUyMjM0NmYxYjNkOWYxYzlkNDVkZmE1YjkxOGU5MmQ2ZjBhMjVkOTFjN2NlIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJlZjMyOWIzZWQ4ZTc5MGYxMGYwYjUyMjM0NmYxYjNkOWYxYzlkNDVkZmE1YjkxOGU5MmQ2ZjBhMjVkOTFjN2NlIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB8ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cDovL2V4cGxvcmVyenlkeHU1ZWNqcmt3Y2VheXF5Yml6bXBqanpuazVpem1pdGYybW9kaGN1c3VxbGlkLm9uaW9uL3R4L2VmMzI5YjNlZDhlNzkwZjEwZjBiNTIyMzQ2ZjFiM2Q5ZjFjOWQ0NWRmYTViOTE4ZTkyZDZmMGEyNWQ5MWM3Y2UiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIub25pb24gdmVyc2lvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9ibG9ja3N0cmVhbS5pbmZvL3R4L2Y4MjIwNjE0NTQxM2RiNWMxMjcyZDU2MDljODg1ODFjNDE0ODE1ZTM2ZTQwMGFlZTY0MTBlMGRlOWEyZDQ2YjUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgImY4MjIwNjE0NTQxM2RiNWMxMjcyZDU2MDljODg1ODFjNDE0ODE1ZTM2ZTQwMGFlZTY0MTBlMGRlOWEyZDQ2YjUiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHwgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwOi8vZXhwbG9yZXJ6eWR4dTVlY2pya3djZWF5cXliaXptcGpqem5rNWl6bWl0ZjJtb2RoY3VzdXFsaWQub25pb24vdHgvZjgyMjA2MTQ1NDEzZGI1YzEyNzJkNTYwOWM4ODU4MWM0MTQ4MTVlMzZlNDAwYWVlNjQxMGUwZGU5YTJkNDZiNSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIi5vbmlvbiB2ZXJzaW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2Jsb2Nrc3RyZWFtLmluZm8vdHgvYTcxNTc3ODBiN2M2OTZhYjI0NzY3MTEzZDlkMzRjZGJjMGViYTVjMzk0Yzg5YWVjNGVkMWE5ZmViMzI2YmVhNSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiYTcxNTc3ODBiN2M2OTZhYjI0NzY3MTEzZDlkMzRjZGJjMGViYTVjMzk0Yzg5YWVjNGVkMWE5ZmViMzI2YmVhNSIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgfCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHA6Ly9leHBsb3Jlcnp5ZHh1NWVjanJrd2NlYXlxeWJpem1wamp6bms1aXptaXRmMm1vZGhjdXN1cWxpZC5vbmlvbi90eC9hNzE1Nzc4MGI3YzY5NmFiMjQ3NjcxMTNkOWQzNGNkYmMwZWJhNWMzOTRjODlhZWM0ZWQxYTlmZWIzMjZiZWE1IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiLm9uaW9uIHZlcnNpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlYWQtbW9yZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVhZC1tb3JlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWFkIG1vcmUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIldhbnQgdG8gcmVhZCBtb3JlIGFib3V0IENvaW5Kb2lucyBvbiBXYXNhYmk/XG4iKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL0ZBUS9GQVEtVXNlV2FzYWJpLmh0bWwjY29pbmpvaW4iIH0gfSwKICAgICAgICAgICAgW192bS5fdigiQ29pbkpvaW4gRkFRcyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGlzIGhlcmUgdG8gaGVscCB5b3UuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}