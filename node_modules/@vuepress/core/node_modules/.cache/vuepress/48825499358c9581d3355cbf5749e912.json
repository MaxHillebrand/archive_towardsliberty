{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/essays/NetworkLevelPrivacy.md?vue&type=template&id=3f6fa0ae&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/essays/NetworkLevelPrivacy.md","mtime":1576922235042},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJoMSIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJuZXR3b3JrLWxldmVsLXByaXZhY3ktYml0Y29pbi1jb3JlLXZzLXdhc2FiaS13YWxsZXQiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI25ldHdvcmstbGV2ZWwtcHJpdmFjeS1iaXRjb2luLWNvcmUtdnMtd2FzYWJpLXdhbGxldCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBOZXR3b3JrIExldmVsIFByaXZhY3kgLSBCaXRjb2luIENvcmUgdnMgV2FzYWJpIFdhbGxldCIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0YWJsZS1vZi1jb250ZW50cyIgfSwgWwogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjdGVybWlub2xvZ3kiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVGVybWlub2xvZ3kiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3pvb21pbmctb3V0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlpvb21pbmcgT3V0IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNiaXRjb2luLWNvcmUiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQml0Y29pbiBDb3JlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwcml2YXRlLXV0eG8tcmV0cmlldmFsIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcml2YXRlIFVUWE8gUmV0cmlldmFsIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3ByaXZhdGUtdHJhbnNhY3Rpb24tYnJvYWRjYXN0aW5nIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlByaXZhdGUgVHJhbnNhY3Rpb24gQnJvYWRjYXN0aW5nIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjYWR2ZXJzYXJpZXMtaWRlbnRpZmllZCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQWR2ZXJzYXJpZXMgSWRlbnRpZmllZCIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjYml0Y29pbi1jb3JlLXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCaXRjb2luIENvcmUgKyBUb3IiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2FkdmVyc2FyaWVzLWlkZW50aWZpZWQiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkdmVyc2FyaWVzIElkZW50aWZpZWQiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3dhc2FiaS13YWxsZXQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiV2FzYWJpIFdhbGxldCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3ByaXZhdGUtdHJhbnNhY3Rpb24tYnJvYWRjYXN0aW5nIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlByaXZhdGUgVHJhbnNhY3Rpb24gQnJvYWRjYXN0aW5nIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjcHJpdmF0ZS11dHhvLXJldHJpZXZhbCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJpdmF0ZSBVVFhPIFJldHJpZXZhbCIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2FkdmVyc2FyaWVzLWlkZW50aWZpZWQiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkFkdmVyc2FyaWVzIElkZW50aWZpZWQiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3dhc2FiaS13YWxsZXQtZnVsbC1ub2RlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIldhc2FiaSBXYWxsZXQgKyBGdWxsIE5vZGUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3ByaXZhdGUtdXR4by1yZXRyaWV2YWwiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlByaXZhdGUgVVRYTyBSZXRyaWV2YWwiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2NvbmNsdXNpb24iIH0gfSwgW192bS5fdigiQ29uY2x1c2lvbiIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3doby1lbHNlLWtub3dzLXlvdS1hcmUtcnVubmluZy1iaXRjb2luIiB9IH0sCiAgICAgICAgICAgICAgW192bS5fdigiV2hvIGVsc2Uga25vd3MgeW91IGFyZSBydW5uaW5nIEJpdGNvaW4/IildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwcm90ZWN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm90ZWN0aW9uIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCaXRjb2luIENvcmUsIG1vcmUgc3BlY2lmaWNhbGx5IGZ1bGwgbm9kZXMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgdGhlIHBpbm5hY2xlIG9mIG5ldHdvcmsgbGV2ZWwgcHJpdmFjeSBpbiBCaXRjb2luIHdhbGxldHMgdGhhdCBubyBvdGhlciB3YWxsZXQgdHlwZSBjYW4gY29tZSBjbG9zZSB0by5cbkl0IGlzIG5vdCBkaWZmaWN1bHQgdG8gc2VlIHdoeTogZnVsbCBub2RlcyBkb3dubG9hZCB0aGUgd2hvbGUgQmxvY2tjaGFpbiBhbmQgZXN0YWJsaXNoIHlvdXIgd2FsbGV0IGJhbGFuY2VzIGxvY2FsbHksIHNvIHRoZXJlIGlzIHplcm8gY2hhbmNlIG9mIGFueSB0aGlyZCBwYXJ0eSBmaWd1cmluZyBvdXQgd2hpY2ggYWRkcmVzc2VzIGFyZSBpbiB5b3VyIHdhbGxldCBhbmQgd2hpY2ggYWRkcmVzc2VzIGFyZSBub3QuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29tcGFyZSB0aGlzIHRvIG90aGVyIGxpZ2h0IHdhbGxldHMsIHdoaWNoIHF1ZXJ5IGEgYmFja2VuZCBzZXJ2ZXIgdG8gZ2V0IGluZm9ybWF0aW9uIHJlZ2FyZGluZyBzcGVjaWZpYyBhZGRyZXNzZXMgb3IgdXNlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0zNy1jb25uZWN0aW9uLWJsb29tLWZpbHRlcmluZyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAzNyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGJsb29tIGZpbHRlcmluZyBTUFYgd2FsbGV0IHByb3RvY29sLCB3aGljaCBpcyBwcm9iYWJseSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vam9uYXNuaWNrLmdpdGh1Yi5pby9ibG9nLzIwMTUvMDIvMTIvcHJpdmFjeS1pbi1iaXRjb2luai8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJldmVuIHdvcnNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi5cbkFuZCB0aGVyZSBpcyBFbGVjdHJ1bSwgd2hpY2ggIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvQml0Y29pbi9jb21tZW50cy8yZmVveDkvZWxlY3RydW1fc2VjdXJpdHlwcml2YWN5X21vZGVsL2NrOHN6YzAvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic2VuZHMgeW91ciBhZGRyZXNzZXMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHRvIHJhbmRvbSBFbGVjdHJ1bSBzZXJ2ZXJzLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHZpc2lvbiBvZiBhIGxpZ2h0IHdhbGxldCB0aGF0IGRvZXMgbm90IGxlYWsgdG9vIG11Y2ggaW5mb3JtYXRpb24gd2hpbGUgZXN0YWJsaXNoaW5nIHRoZSB1c2Vy4oCZcyBVVFhPIHNldCBoYWQgaGF1bnRlZCBCaXRjb2luIGRldmVsb3BlcnMgZm9yIGNlbnR1cmllcy5cbkluIGZhY3QsIGV2ZW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTM3LWNvbm5lY3Rpb24tYmxvb20tZmlsdGVyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDM3IildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHN0YXJ0ZWQgb3V0IGFzIGEgcHJpdmFjeSBpbXByb3ZlbWVudCwgaXQganVzdCB0dXJuZWQgb3V0IHRvIGJlIG5vdCBvbmUgbGF0ZXIuXG5CdXQgdGhlcmUgd2VyZSBkZWNlbnQgYXR0ZW1wdHM6IHNvbWUgZGV2ZWxvcGVycywgbGlrZSBKb25hcyBTY2huZWxsaSwgdGhlIFN0cmF0aXMgdGVhbSBhbmQgbXlzZWxmICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXRjb2luL3B1bGwvOTA3NiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImJ1aWx0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9zdHJhdGlzcHJvamVjdC9CcmVlemUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJ3YWxsZXQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3prU05BQ0tzL1dhbGxldFdhc2FiaS90cmVlL2hpZGRlbndhbGxldC12MC42IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic29mdHdhcmUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGF0IG9ubHkgZG93bmxvYWRlZCBibG9ja3MgZnJvbSB0aGUgY3JlYXRpb24gb2YgdGhlIHVzZXLigJlzIHdhbGxldC5cblNvbWUgZGV2cywgbGlrZSBOaWNvbGFzIERvcmllciBhdHRlbXB0ZWQgdG8gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9OaWNvbGFzRG9yaWVyL05CaXRjb2luLlNQVlNhbXBsZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInBhdGNoIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB0aGUgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0zNy1jb25uZWN0aW9uLWJsb29tLWZpbHRlcmluZyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAzNyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBhbmQgc29tZSBvdGhlcnMsIGxpa2UgdGhlIGd1eXMgYXQgTGlnaHRuaW5nIExhYnMgY2FtZSB1cCB3aXRoIGEgd2hvbGUgbmV3IGxpZ2h0IHdhbGxldCBhcmNoaXRlY3R1cmU6ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0xNTctY2xpZW50LXNpZGUtYmxvY2stZmlsdGVyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDE1NyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLSIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICIvdXNpbmctd2FzYWJpL0JJUHMuaHRtbCNiaXAtMTU4LWNvbXBhY3QtYmxvY2stZmlsdGVycy1mb3ItbGlnaHQtY2xpZW50cyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJJUCAxNTgiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi5cblRoZSBNb25lcm9Xb3JsZCBmb2xrcyB3YW50IHlvdSB0byBkZWxlZ2F0ZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbW9uZXJvd29ybGQuY29tLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInJ1bm5pbmcgeW91ciBub2RlIHRvIHRoZSBjbG91ZCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLlxuVGhlcmUgd2VyZSBhbHNvIG90aGVycywgbGlrZSBDaHJpcyBCZWxjaGVyLCB3aG8gc2FpZDog4oCcZnVjayB0aGF04oCdIGFuZCBjcmVhdGVkICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vY2hyaXMtYmVsY2hlci9lbGVjdHJ1bS1wZXJzb25hbC1zZXJ2ZXIiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJFbGVjdHJ1bSBQZXJzb25hbCBTZXJ2ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGF0IGxldHMgeW91IGNvbm5lY3QgeW91ciBFbGVjdHJ1bSBjbGllbnQgdG8geW91ciBmdWxsIG5vZGUuXG5GaW5hbGx5IEkgaGF2ZSBiZWVuIG5vdGljaW5nIGEgcG9zaXRpdmUgdHJlbmQgcmVjZW50bHkgb2YgY29tcGFuaWVzIHNlbGxpbmcgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lm5vZGwuaXQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJib3hlcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgdGhvc2Ugd2lsbCBydW4gYSBmdWxsIG5vZGUgZm9yIHlvdSBvdXQgb2YgdGhlIGJveC4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBbmQgdGhlbiwgdGhlcmXigJlzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3dhc2FiaXdhbGxldC5pbyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiV2FzYWJpIFdhbGxldCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgd2hpY2ggaXMgYSBCSVAxNTctaXNoIGNsaWVudCBzaWRlIGZpbHRlcmluZyBsaWdodCB3YWxsZXQgYW5kIHBhcnRseSBpbnRlZ3JhdGVzIHRvIHlvdXIgZnVsbCBub2RlLCB0b28uXG5XaGljaCBicmluZ3MgbWUgdG8gdGhlIHRvcGljIG9mIHRoaXMgYXJ0aWNsZTogSnVzdCBhIGZldyBob3VycyBhZ28sIHdpdGggV2FzYWJpIFdhbGxldCwgd2UgYWNoaWV2ZWQgdGhlIGJlc3QgbmV0d29yayBsZXZlbCBwcml2YWN5IHRoYXQgaXMgcG9zc2libGUgd2l0aCB0b2RheeKAmXMgQml0Y29pbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiVElQIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigiU2luY2UgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vemtTTkFDS3MvV2FsbGV0V2FzYWJpL3JlbGVhc2VzL3RhZy92MS4xLjEwIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigidjEuMS4xMCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIsIFdhc2FiaSBoYXMgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vemtTTkFDS3MvV2FsbGV0V2FzYWJpL3B1bGwvMjQ5NSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInBhcnRpYWwgQml0Y29pbiBDb3JlIGludGVncmF0aW9uIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuXG5UaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgKGJ1dCBub3QgbWFuZGF0b3J5KSB0byBzdGFydCBCaXRjb2luIENvcmUgZHVyaW5nIHRoZSBzdGFydHVwIG9mIFdhc2FiaS5cbldpdGhvdXQgaGF2aW5nIHRvIGluc3RhbGwgb3IgY29uZmlndXJlIGFueXRoaW5nLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0ZXJtaW5vbG9neSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdGVybWlub2xvZ3kiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRlcm1pbm9sb2d5IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlYiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgU3RhbmRzIGZvciBWZXJpZmljYXRpb24gb3IgVmFsaWRhdGlvbi5cblRoZXkgYXJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5LCBidXQgSeKAmW0gcHJldHR5IHN1cmUgb25lIG9mIGl0IGlzIGNvcnJlY3QuXG5WZXJpZGF0aW9uPyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJGTiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgRnVsbCBOb2RlLCBGdWxseSBWZXJpZGF0aW5nIE5vZGUuXG5Eb3dubG9hZHMgYW5kIHZlcmlkYXRlcyBhbGwgdGhlIEJpdGNvaW4gYmxvY2tzIGV2ZXIgY3JlYXRlZCwgYnV0IGZvciBvdXIgcHVycG9zZXMgKHByaXZhY3kpIG9ubHkgdGhlIGRvd25sb2FkaW5nIHBhcnQgbWF0dGVycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiU1BWIE5vZGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIFNpbXBsaWZpZWQgUGF5bWVudCBWZXJpZGF0aW5nIE5vZGUuXG5Pbmx5IHN5bmNocm9uaXplcyB0aGUgaGVhZGVyIGNoYWluICh3aGF0ZXZlciB0aGF0IGlzKSBhbmQgY2FuIHZlcmlkYXRlIHRoYXQgeW91IGhhdmUgYSB0cmFuc2FjdGlvbiBieSBhcHBseWluZyBzb21lIG1lcmtsZSBtYWdpYy5cbk5vbmUgb2YgdGhpcyBtYXR0ZXJzIGZvciB1cyB0aG91Z2guXG5UaGUgaW1wb3J0YW50IHRoaW5nIGlzIHRvIG5vdGljZSB0aGF0IFNQViBoYXMgbm90aGluZyB0byBkbyB3aXRoIHByaXZhY3ksIGl04oCZcyByZWFsbHkganVzdCBhIHdheSBvZiBtYWtpbmcgc3VyZSB0cmFuc2FjdGlvbnMgaGFwcGVuZWQuXG5CeSBleHRlbnNpb24gYSBmdWxsIG5vZGUgaGFzIG5vdGhpbmcgdG8gZG8gd2l0aCBwcml2YWN5IGVpdGhlci5cbkl04oCZcyBqdXN0IGRlc2NyaWJpbmcgaG93IHRoZSBub2RlIG1ha2VzIHN1cmUgdHJhbnNhY3Rpb25zIGhhcHBlbmVkLlxuSXQgdmVyaWRhdGVzIHRoZSB3aG9sZSBibG9ja2NoYWluLCBvZiBjb3Vyc2UgaW4gb3JkZXIgdG8gZG8gc28sIGl0IGhhcyB0byBkb3dubG9hZCB0aGUgd2hvbGUgYmxvY2tjaGFpbiwgd2hpY2ggZW5hYmxlcyB3YWxsZXQgVVRYTyByZXRyaWV2YWwgbG9jYWxseSwgd2hpY2ggaXMgdGhlIG1vc3QgcHJpdmF0ZSB3YXkgdG8gZG8gdGhhdC5cbldhaXQsIHNvIGl0IGhhcyBzb21ldGhpbmcgdG8gZG8gd2l0aCBwcml2YWN5IGFmdGVyIGFsbD8iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRnVsbC1TUFYiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIEZ1bGwtQmxvY2sgU1BWLCBGdWxsIEJsb2NrIERvd25sb2FkaW5nIFNQViBOb2RlLlxuRG93bmxvYWRzIGFsbCB0aGUgYmxvY2tzIGZyb20gdGhlIGNyZWF0aW9uIG9mIHRoZSB3YWxsZXQgYW5kIGRvZXMgU1BWIHZlcmlmaWNhdGlvbiBvbiB0aGVtLlxuV2FpdCwgZGlkIEkganVzdCBkb3VibGVkIHRoZSBWIHdvcmQgdGhlcmU/XG5ZZXMsIGRldmVsb3BlcnMgYXJlIHRoaXMgaW5jb25zaXN0ZW50LlxuSSBhbHNvIGhvcGUgbm9ib2R5IHdpbGwgZXZlciBidWlsZCBhIGZ1bGwtU1BWIHdhbGxldCB0aGF0IGRvd25sb2FkcyBhbGwgdGhlIGJsb2NrcywgYnV0IGRvZXMgY2VudHJhbGl6ZWQgdmFsaWRhdGlvbiwgYmVjYXVzZSBpdCBpcyBpbXBvc3NpYmxlIHRvIGNvbWUgdXAgd2l0aCBhIHByb3BlciB0ZXJtIGZvciB0aGF0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNvbmZ1c2VkIHlldD9cbkdvb2QuXG5Ob3cgdGhhdCB5b3UgcmVjb2duaXplZCB0aGUgbnVhbmNlZCBuYXR1cmUgb2YgdGhlIHRvcGljLCB5b3XigJlsbCBiZSBtb3JlIGZvcmdpdmluZyBmb3IgbWUgYnV0Y2hlcmluZyB0aGUgcmVzdCBvZiB0aGlzIHNlY3Rpb24gd2l0aCB2YXN0IG92ZXJzaW1wbGlmaWNhdGlvbnM6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkh5YnJpZCBGdWxsIE5vZGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuXG5JcyBBIGxpZ2h0IG5vZGUgdW50aWwgdGhlIGZ1bGwgbm9kZSBzeW5jaHJvbml6ZXMuXG5JIHdhbnQgV2FzYWJpIHRvIGJlIHN1Y2ggd2FsbGV0IGluIHRoZSBmdXR1cmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJJUDM3IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLlxuQ2xpZW50IHNlbmRzIGJsb29tIGZpbHRlciB0byBmdWxsIG5vZGVzLCBmdWxsIG5vZGVzIHNlbmQgYmFjayBkYXRhIG1hdGNoaW5nIHRoZSBibG9vbSBmaWx0ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJsb29tIEZpbHRlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cbkxldHMgeW91IHRlc3QgaWYgYW4gZWxlbWVudCBpcyBpbiBhIHNldCB3aXRob3V0IHJldmVhbGluZyB0aGUgc2V0IGl0c2VsZi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkdvbG9tYi1SaWNlIEZpbHRlcnMiKV0pLAogICAgICAgICAgX3ZtLl92KCIuXG5TbWFsbGVyIGJsb29tIGZpbHRlcnMsIHVzZWQgYnkgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0xNTgtY29tcGFjdC1ibG9jay1maWx0ZXJzLWZvci1saWdodC1jbGllbnRzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDE1OCIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDbGllbnQgU2lkZSBGaWx0ZXJpbmciKV0pLAogICAgICAgICAgX3ZtLl92KCIsIE5ldXRyaW5vIEZpbHRlcmluZywgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgIi91c2luZy13YXNhYmkvQklQcy5odG1sI2JpcC0xNTctY2xpZW50LXNpZGUtYmxvY2stZmlsdGVyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDE1NyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTE1OC1jb21wYWN0LWJsb2NrLWZpbHRlcnMtZm9yLWxpZ2h0LWNsaWVudHMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCSVAgMTU4IildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLlxuVGhlIGlkZWEgdGhhdCBjbGllbnRzIGRvbuKAmXQgaGF2ZSB0byBzZW5kIGZpbHRlcnMgdG8gZnVsbCBub2RlcywgYnV0IHJhdGhlciB0aGV5IGRvIHRoZSBvcHBvc2l0ZTogZnVsbCBub2RlcyBjcmVhdGUgZmlsdGVycyBhbmQgc2VuZCB0aGVtIHRvIGNsaWVudHMgaW5zdGVhZC5cbkZyb20gaGVyZSBvbiBjbGllbnRzIGNhbiBkb3dubG9hZCBibG9ja3MgZnJvbSBvdGhlciBzb3VyY2VzLlxuSXTigJlzIGEgZGVjZW50bHkgcHJpdmF0ZSB3YXkgb2YgZXN0YWJsaXNoaW5nIHdhbGxldCBVVFhPIHN0YXRlLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTmV1dHJpbm8iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuXG5MaWdodG5pbmcgTGFi4oCZcyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgY2xpZW50IHNpZGUgZmlsdGVyaW5nIHByb3RvY29sLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJXaGF0ZXZlciBXYXNhYmkgSXMgRG9pbmciKV0pLAogICAgICAgIF92bS5fdigiLlxuT3VyIGltcGxlbWVudGF0aW9uIG9mIHRoZSBjbGllbnQgc2lkZSBmaWx0ZXJpbmcgcHJvdG9jb2wuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiem9vbWluZy1vdXQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3pvb21pbmctb3V0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBab29taW5nIE91dCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIHdvcnRoIHBvaW50aW5nIG91dCB0aGF0IG5ldHdvcmsgbGV2ZWwgcHJpdmFjeSBpcyBqdXN0IGhhbGYgb2YgdGhlIGJhdHRsZS5cblRoZSBvdGhlciBoYWxmIGlzIHRoZSBibG9ja2NoYWluIGxldmVsIHByaXZhY3ksIHdoaWNoIGlzIG91dHNpZGUgb2YgdGhlIHNjb3BlIG9mIHRoaXMgYXJ0aWNsZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGdXJ0aGVybW9yZSBuZXR3b3JrIGxldmVsIHByaXZhY3kgY29uc2lzdHMgb2YgdHdvIHN1YiBjYXRlZ29yaWVzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlByaXZhdGUgVVRYTyBSZXRyaWV2YWwiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlByaXZhdGUgVHJhbnNhY3Rpb24gQnJvYWRjYXN0aW5nIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJiaXRjb2luLWNvcmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2JpdGNvaW4tY29yZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQml0Y29pbiBDb3JlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJpdmF0ZS11dHhvLXJldHJpZXZhbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJpdmF0ZS11dHhvLXJldHJpZXZhbCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByaXZhdGUgVVRYTyBSZXRyaWV2YWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCaXRjb2luIENvcmUgZG93bmxvYWRzIGFsbCB0aGUgYmxvY2tzIGV2ZXIgY3JlYXRlZCBhbmQgZXN0YWJsaXNoZXMgeW91ciB3YWxsZXQgYmFsYW5jZXMgbG9jYWxseS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcml2YXRlLXRyYW5zYWN0aW9uLWJyb2FkY2FzdGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJpdmF0ZS10cmFuc2FjdGlvbi1icm9hZGNhc3RpbmciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcml2YXRlIFRyYW5zYWN0aW9uIEJyb2FkY2FzdGluZyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJpdGNvaW4gQ29yZSBicm9hZGNhc3RzIHRyYW5zYWN0aW9ucyB0byBvdGhlciBwZWVycyBvbiB0aGUgY2xlYXJuZXQsIHVuZW5jcnlwdGVkLlxuT3RoZXIgcGVlcnMgY2Fubm90IGZpZ3VyZSBvdXQgd2hpY2ggdHJhbnNhY3Rpb24gb3JpZ2luYXRlcyBmcm9tIGEgc3BlY2lmaWMgbm9kZSwgYmVjYXVzZSBDb3JlIGRvZXMgbm90IG9ubHkgYnJvYWRjYXN0IGl0cyBvd24gdHJhbnNhY3Rpb25zLCBidXQgYWxzbyBwcm9wYWdhdGVzIGV2ZXJ5IG90aGVyIHRyYW5zYWN0aW9uIHRoYXQgaGl0cyBpdHMgbWVtcG9vbC5cbkhvd2V2ZXIgc29tZSBwYXBlcnMgbm90ZSBpdOKAmXMgbm90IGJ1bGxldHByb29mOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAicCIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQml0Y29pbiB0cmFuc2FjdGlvbiBwcm9wYWdhdGlvbiBkb2VzIG5vdCBoaWRlIHRoZSBzb3VyY2Ugb2YgYSB0cmFuc2FjdGlvbiB2ZXJ5IHdlbGwsIGVzcGVjaWFsbHkgYWdhaW5zdCBhIOKAnHN1cGVybm9kZeKAnSBlYXZlc2Ryb3BwZXIgdGhhdCBmb3JtcyBhIGxhcmdlIG51bWJlciBvZiBvdXRnb2luZyBjb25uZWN0aW9ucyB0byByZWFjaGFibGUgbm9kZXMgb24gdGhlIG5ldHdvcmsgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICIvdXNpbmctd2FzYWJpL0JJUHMuaHRtbCNiaXAtMTU2LWRhbmRlbGlvbi1wcml2YWN5LWVuaGFuY2luZy1yb3V0aW5nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiWzEsMiwzXSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoaWxlIGluIHByYWN0aWNlIEkgc3VzcGVjdCBpdCBkb2VzbuKAmXQgbWF0dGVyIG11Y2gsIHRoaXMgYXJ0aWNsZSBpbnRlbmRzIHRvIGV4YW1pbmUgdGhlIGRldGFpbHMgaW4gb3JkZXIgdG8gY29tcGFyZSBDb3JlIHdpdGggV2FzYWJpLCB0aHVzIEkgc3RhcnQgY29sbGVjdGluZyB0aGUgcmVsZXZhbnQgaWRlbnRpZmllZCBhZHZlcnNhcmllcyBmcm9tIGhlcmUgb246IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYWR2ZXJzYXJpZXMtaWRlbnRpZmllZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWR2ZXJzYXJpZXMtaWRlbnRpZmllZCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFkdmVyc2FyaWVzIElkZW50aWZpZWQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNYWxpY2lvdXMgUGVlciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU3VwZXJub2RlIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJiaXRjb2luLWNvcmUtdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNiaXRjb2luLWNvcmUtdG9yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQml0Y29pbiBDb3JlICsgVG9yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiB1c2UgQml0Y29pbiBDb3JlIHdpdGggVG9yLCB3aGljaCBzb2x2ZXMgdGhlIGFib3ZlIG1lbnRpb25lZCBpc3N1ZS5cbkluIHRoaXMgY2FzZSBhIHN1cGVybm9kZSBjYW5ub3QgdHJhY2sgYmFjayB0cmFuc2FjdGlvbnMgdG8geW91ciBJUCBhZGRyZXNzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgd2lsbCBjb25zaWRlciBhbnkgZW50aXR5IHRoYXQgY2FuIGJyZWFrIFRvciwgYSB1bml2ZXJzYWwgYWR2ZXJzYXJ5LCBob3dldmVyIG5vdGUsIHRoaXMgaXMgaW5hY2N1cmF0ZS5cbkZvciBleGFtcGxlIG1vc3QgVG9yIGF0dGFja3MgYXJlIG5vdCBwb3NzaWJsZSBpZiBleGl0IG5vZGVzIGFyZSBub3QgaW52b2x2ZWQuXG5UaGlzIGFuZCBvdGhlciB0aGluZ3MgbGlrZSBDb3Jl4oCZcyBjb25maWd1cmFiaWxpdHkgd291bGQgb3ZlcmNvbXBsaWNhdGUgdGhlIGFuYWx5c2lzLCBzbyB0aGF04oCZcyB3aHkgSSBjaG9vc2UgdG8gZHJhdyB0aGUgbGluZSBoZXJlLlxuSSBhc3N1bWUgdGhhdCB0aGlzIGVudGl0eSBjYW4gYnJlYWsgdGhlIG9uaW9uIHJvdXRpbmcsIG5vdCBUb3LigJlzIGVuY3J5cHRpb24gaXRzZWxmLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImFkdmVyc2FyaWVzLWlkZW50aWZpZWQtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWR2ZXJzYXJpZXMtaWRlbnRpZmllZC0yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWR2ZXJzYXJpZXMgSWRlbnRpZmllZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoIlRvciBCcmVha2VyIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIndhc2FiaS13YWxsZXQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3dhc2FiaS13YWxsZXQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdhc2FiaSBXYWxsZXQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcml2YXRlLXRyYW5zYWN0aW9uLWJyb2FkY2FzdGluZy0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcml2YXRlLXRyYW5zYWN0aW9uLWJyb2FkY2FzdGluZy0yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJpdmF0ZSBUcmFuc2FjdGlvbiBCcm9hZGNhc3RpbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXYXNhYmkgcHJldmlvdXNseSBkaWQgbm90IG1haW50YWluIGl0cyBQMlAgY29ubmVjdGlvbnMgb3ZlciBUb3IuXG5TaW5jZSBXYXNhYmkgaXMgYSBub24tbGlzdGVuaW5nIG5vZGUsIGJyb2FkY2FzdGluZyB0cmFuc2FjdGlvbnMgdGhyb3VnaCBvdGhlciBQMlAgbm9kZXMgb3ZlciB0aGUgY2xlYXJuZXQgd291bGTigJl2ZSBsZXQgdGhlIHBlZXIgdG8gbGluayB5b3VyIElQIGFkZHJlc3MgdG8gdGhlIHRyYW5zYWN0aW9uLlxuVGhpcyBpcyB3aHkgd2Ugd2VyZSBicm9hZGNhc3Rpbmcgb3VyIHRyYW5zYWN0aW9ucyB0byBvdXIgYmFja2VuZCBzZXJ2ZXIgb3ZlciBUb3IuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTm93LCB3ZSBzdGFydGVkIHR1bm5lbGluZyBhbGwgb3VyIFAyUCB0cmFmZmljIHRocm91Z2ggVG9yLCB0b286IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2UgZGlkIGl0IGluIGEgd2F5IHRoYXQgd2Ugb25seSBjb25uZWN0IHRvIG9uaW9uIG5vZGVzLCBzbyBlbmQgdG8gZW5kIGVuY3J5cHRpb24gaXMgbm93IGVuZm9yY2VkIGJldHdlZW4gdXMgYW5kIG91ciBwZWVycy5cbkFsbCB0aGlzIHdpdGhvdXQgaW52b2x2aW5nIGFueSBleGl0IG5vZGUuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiV2UgY29ubmVjdCB0byBlYWNoIHBlZXIgdGhyb3VnaCBhIGRpZmZlcmVudCBUb3Igc3RyZWFtLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhpcyBlbmFibGVkIHVzIHRvIHJlcGxhY2Ugb3VyIHRyYW5zYWN0aW9uIGJyb2FkY2FzdGluZyBtZWNoYW5pc20uXG5Ob3csIHdlIGJyb2FkY2FzdCB0cmFuc2FjdGlvbnMgdG8gb25seSBvbmUgcGVlciBvdmVyIFRvciBhbmQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhhdCB3ZSBkaXNjb25uZWN0IHRoZSBwZWVyLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcml2YXRlLXV0eG8tcmV0cmlldmFsLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3ByaXZhdGUtdXR4by1yZXRyaWV2YWwtMiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByaXZhdGUgVVRYTyBSZXRyaWV2YWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGaW5hbGx5IHdlIGFycml2ZWQgdG8gdGhlIGludGVyZXN0aW5nIHBhcnQuXG5CZWZvcmUgdGhlIFAyUCBUb3IgaW1wbGVtZW50YXRpb24gV2FzYWJpIHdhcyBkb2luZyB0aGUgZm9sbG93aW5nOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBiYWNrZW5kIHNlcnZlciBzZXJ2ZWQgYSBjb25zdGFudCBmaWx0ZXIgdGFibGUgdG8gYWxsIHRoZSBjbGllbnRzIG92ZXIgVG9yLlxuRnJvbSB0aG9zZSBmaWx0ZXJzIHRoZSBjbGllbnRzIGNvdWxkIGZpZ3VyZSBvdXQgd2hpY2ggYmxvY2tzIHRoZXkgYXJlIGludGVyZXN0ZWQgaW4gYW5kIGRvd25sb2FkZWQgdGhlc2UgYmxvY2tzIGFuZCBzb21lIGZhbHNlLXBvc2l0aXZlIGJsb2NrcyBmcm9tIHBlZXJzLlxuT25lIGJsb2NrIHBlciBwZWVyLlxuV2hlbiBhIGJsb2NrIHdhcyBhY3F1aXJlZCwgdGhlIHBlZXIgd2FzIGRpc2Nvbm5lY3RlZC5cblRoZXJlIHdlcmUgdHdvIGlzc3VlcyB3aXRoIHRoaXMuIFdoYXQgaWYgYWxsIHRoZSBwZWVycyBXYXNhYmkgY29ubmVjdGVkIHRvIHdhcyB0aGUgc2FtZSBlbnRpdHkgZm9yIGFuIGV4dGVuZGVkIHBlcmlvZCBvZiB0aW1lP1xuVGhlbiB0aGUgU3liaWwgYXR0YWNraW5nIGVudGl0eSB3b3VsZCBrbm93IGFsbCB0aGUgYmxvY2tzIGEgY2xpZW50IGlzIGludGVyZXN0ZWQgaW4sIG9mIHdoaWNoIHNvbWUgaW5mb3JtYXRpb24gY291bGTigJl2ZSBiZWVuIG9idGFpbmVkLlxuVGhlIHF1ZXN0aW9uIGFyaXNlcz9cbkhvdyBkbyB5b3UgbWFrZSBzdXJlIHlvdSBhcmUgdGhlIG9ubHkgcGVlciBhIGNsaWVudCBjb25uZWN0cyB0byBmb3IgZW4gZXh0ZW5kZWQgcGVyaW9kIG9mIHRpbWU/IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHNlY29uZCBpc3N1ZSBpcywgd2hhdCBpZiB5b3VyIElTUCBpcyBzcHlpbmcgb24geW91IGZvciBhbiBleHRlbmRlZCBwZXJpb2Qgb2YgdGltZT9cblRoaXMgaXMgbW9yZSBwbGF1c2libGUuXG5JbiBmYWN0IFdhc2FiaeKAmXMgcHJpdmFjeSByYXRpbmcgb24gQml0Y29pbi5vcmcgbGlzdGluZyB3YXMgYWxtb3N0IHNjb3JlZCBkb3duIHRvIGJlIHRoZSBzYW1lIGFzIEJyZWFkIHdhbGxldCwgYmVjYXVzZSBvZiB0aGlzLCB3aGljaCBvZiBjb3Vyc2Ugd291bGTigJl2ZSBiZWVuIHJpZGljdWxvdXMsIHNpbmNlIEJyZWFkIGlzIGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3VzaW5nLXdhc2FiaS9CSVBzLmh0bWwjYmlwLTM3LWNvbm5lY3Rpb24tYmxvb20tZmlsdGVyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQklQIDM3IildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHdhbGxldC5cbldoYXQgc2F2ZWQgdGhlIHJhdGluZyB3YXMgdGhhdCBJIG5vdGVkLCBpZiBJU1AgaXMgYW4gYWR2ZXJzYXJ5LCB0aGVuIEJpdGNvaW4gQ29yZSB3b3VsZOKAmXZlIGZhaWxlZCB0aGF0IGluIGEgbW9yZSBzcGVjdGFjdWxhciB3YXksIHNpbmNlIHRyYW5zYWN0aW9ucyBhcmUgYnJvYWRjYXN0ZWQgb3ZlciB0aGUgY2xlYXJuZXQgYW5kIGV2ZW4gaWYgdGhlIG5vZGUgaXMgbGlzdGVuaW5nLCB0aGUgb25seSB0cmFuc2FjdGlvbiB0aGF0IGRvZXNu4oCZdCBjb21lIGluLCBidXQgb25seSBnb2VzIG91dCBvZiB0aGUgd2FsbGV0IG11c3QgYmUgdGhlIG9uZSB0aGF0IG9yaWdpbmF0ZXMgZnJvbSB0aGUgbm9kZS4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW55d2F5LCBXYXNhYmkgZG9lcyB0aGlzIG92ZXIgVG9yIG5vdy5cbkJlY2F1c2Ugb2YgdGhlIGVuZC10by1lbmQgZW5jcnlwdGlvbiBvZiB0aGUgb25pb24gbmV0d29yaywgaXQgaW1tZWRpYXRlbHkgZGVmZWF0cyBhbiBJU1AgYWR2ZXJzYXJ5IGFuZCBtYWtlcyB0aGUgYWxyZWFkeSBpbXBvc3NpYmxlIGpvYiBvZiB0aGUgU3liaWwgYWR2ZXJzYXJ5IGV2ZW4gbW9yZSBpbXBvc3NpYmxlLlxuSG93IGRvIFN5YmlsIGZvciBhbiBleHRlbmRlZCBwZXJpb2Qgb2YgdGltZSwgYWxsIHRoZSBub2RlcyB0aG9zZSBjb25uZWN0IHRvIFdhc2FiaT9cbk9yIGV2ZW4ganVzdCBvbmUgbm9kZT9cblRoZSBjbGllbnQgaXMgaGlkaW5nIGJlaGluZCBUb3IuXG5Zb3UgY2Fubm90IGV2ZW4gdGllIHRvZ2V0aGVyIHR3byBjb25uZWN0aW9ucyBvZiB0aGUgY2xpZW50LCBzaW5jZSB0aGUgY2xpZW50IGNvbm5lY3RzIHRvIGFsbCB5b3VyIFN5YmlscyB0aHJvdWdoIGEgZGlmZmVyZW50IFRvciBzdHJlYW0uXG5UaGUgb25seSBhZHZlcnNhcnkgdGhhdCBjb3VsZCBwb3NzaWJseSBvdmVyY29tZSB0aGlzIHdvdWxkIGhhdmUgdG8gc2V0dXAgdGhvdXNhbmRzIG9mIGZ1bGwgbm9kZXMgb3ZlciBvbmlvbiBhbmQgYWxzbyBicmVhayBUb3IgaXRzZWxmLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImFkdmVyc2FyaWVzLWlkZW50aWZpZWQtMyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWR2ZXJzYXJpZXMtaWRlbnRpZmllZC0zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWR2ZXJzYXJpZXMgSWRlbnRpZmllZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIklTUCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVG9yIEJyZWFrZXIgU3liaWwgQXR0YWNrZXIgV2l0aCBUaG91c2FuZHMgT2YgRnVsbCBOb2RlcyBPdmVyIE9uaW9uIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIndhc2FiaS13YWxsZXQtZnVsbC1ub2RlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN3YXNhYmktd2FsbGV0LWZ1bGwtbm9kZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdhc2FiaSBXYWxsZXQgKyBGdWxsIE5vZGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAieXRFbWJlZCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgInVybChodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS9nV28yUkFrSVZyRS9ocWRlZmF1bHQuanBnKSIKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogeyAiZGF0YS1pZCI6ICJnV28yUkFrSVZyRSIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUgZ1dvMlJBa0lWckUiLAogICAgICAgICAgICAgICJkYXRhLXNyYyI6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvZ1dvMlJBa0lWckU/JmF1dG9wbGF5PTEmYXV0b2hpZGU9MSZtb2Rlc3RicmFuZGluZz0xJmNvbG9yPXdoaXRlJnJlbD0wIiwKICAgICAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgICAgIGFsbG93OiAiYXV0b3BsYXk7ZW5jcnlwdGVkLW1lZGlhO3BpY3R1cmUtaW4tcGljdHVyZSIsCiAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcml2YXRlLXV0eG8tcmV0cmlldmFsLTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3ByaXZhdGUtdXR4by1yZXRyaWV2YWwtMyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByaXZhdGUgVVRYTyBSZXRyaWV2YWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgaGF2ZSBhIGxpc3RlbmluZyBmdWxsIG5vZGUgcnVubmluZyBpbiB0aGUgYmFja2dyb3VuZCAobm90IG9ubHkgQml0Y29pbiBDb3JlLCBhbnkgZnVsbCBub2RlKSB0aGVuIFdhc2FiaSBhdXRvbWF0aWNhbGx5IHBpY2tzIGl0IHVwIGFuZCBpbnN0ZWFkIG9mIGFza2luZyBwZWVycyBmb3IgYmxvY2tzLCBpdCBhc2tzIGJsb2NrcyBmcm9tIHlvdXIgb3duIG5vZGUuXG5Vc2luZyBXYXNhYmkgdGhpcyB3YXkgcmVzdWx0cyBpbiB0aGUgc2FtZSBwcml2YWN5IG1vZGVsIGFzIEJpdGNvaW4gQ29yZeKAmXMgcmVnYXJkaW5nIFByaXZhdGUgVVRYTyBSZXRyaWV2YWwuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jayB0aXAiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjdXN0b20tYmxvY2stdGl0bGUiIH0sIFtfdm0uX3YoIlRJUCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoIlNpbmNlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3prU05BQ0tzL1dhbGxldFdhc2FiaS9yZWxlYXNlcy90YWcvdjEuMS4xMCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInYxLjEuMTAiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCBXYXNhYmkgaGFzICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3prU05BQ0tzL1dhbGxldFdhc2FiaS9wdWxsLzI0OTUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJwYXJ0aWFsIEJpdGNvaW4gQ29yZSBpbnRlZ3JhdGlvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLlxuVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIChidXQgbm90IG1hbmRhdG9yeSkgdG8gc3RhcnQgQml0Y29pbiBDb3JlIGR1cmluZyB0aGUgc3RhcnR1cCBvZiBXYXNhYmkuXG5XaXRob3V0IGhhdmluZyB0byBpbnN0YWxsIG9yIGNvbmZpZ3VyZSBhbnl0aGluZy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29uY2x1c2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29uY2x1c2lvbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uY2x1c2lvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUbyBiZSB1c2VmdWwsIHNlY3VyaXR5IG1ldHJpY3Mgc2hvdWxkIHJlZmxlY3QgdGhlIGRpZmZpY3VsdHkgYW4gYWR2ZXJzYXJ5IGhhcyBpbiBvdmVyY29taW5nIHRoZW0uIOKAlCAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuZnJlZWhhdmVuLm5ldC9hbm9uYmliL2NhY2hlL2VudHJvcGlzdC5wZGYiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJlbnRyb3Bpc3QiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJlY2F1c2UgYWdhaW5zdCBhbGwgcmVhc29uYWJsZSBhZHZlcnNhcmllcywgYSBjb21wYXJpc29uIGJldHdlZW4gQml0Y29pbiBDb3JlIGFuZCBXYXNhYmkgV2FsbGV0IG9uIG5ldHdvcmsgbGV2ZWwgcHJpdmFjeSBkb2VzIG5vdCBtYWtlIHNlbnNlIHlvdSBtaWdodCB0aGluayB0aGlzIGFydGljbGUgd2FzIGEgd2FzdGUgb2YgdGltZS5cbkJ1dCB5b3UgYXJlIGdyZWF0bHkgbWlzdGFrZW4uXG5UaGlzIGFydGljbGUgd2lsbCBzdXJlbHkgaGVscCBtZSB3aW4gSW50ZXJuZXQgYXJndW1lbnRzLlxuQW5kLCBpbiB0aGUgZW5kLCBpc27igJl0IHRoYXTigJlzIHdoYXQgcmVhbGx5IG1hdHRlcnM/IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInl0RW1iZWQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICJ1cmwoaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvcWd1d0F2QTVGeDQvaHFkZWZhdWx0LmpwZykiCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsgImRhdGEtaWQiOiAicWd1d0F2QTVGeDQiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgdGl0bGU6ICJZb3VUdWJlIHFndXdBdkE1Rng0IiwKICAgICAgICAgICAgICAiZGF0YS1zcmMiOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkL3FndXdBdkE1Rng0PyZhdXRvcGxheT0xJmF1dG9oaWRlPTEmbW9kZXN0YnJhbmRpbmc9MSZjb2xvcj13aGl0ZSZyZWw9MCIsCiAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgICAgICBhbGxvdzogImF1dG9wbGF5O2VuY3J5cHRlZC1tZWRpYTtwaWN0dXJlLWluLXBpY3R1cmUiLAogICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAid2hvLWVsc2Uta25vd3MteW91LWFyZS1ydW5uaW5nLWJpdGNvaW4iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doby1lbHNlLWtub3dzLXlvdS1hcmUtcnVubmluZy1iaXRjb2luIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hvIGVsc2Uga25vd3MgeW91IGFyZSBydW5uaW5nIEJpdGNvaW4/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRXZlcnkgdGltZSB5b3UgdXNlIHNvZnR3YXJlIHRoYXQgaW50ZXJhY3RzIHdpdGggYSBCaXRjb2luIG5ldHdvcmssIGFuZCBlc3BlY2lhbGx5IGEgQml0Y29pbiBub2RlLCB5b3UgbGVhdmUgYSBzdGlja3kgZmluZ2VycHJpbnQgaW4geW91ciB0cmFmZmljLlxuSXQgY29tZXMgaW4gdGhlIGZvcm0gb2YgYSBzbWFsbCwgYnV0IHVuYXZvaWRhYmxlIHNwaWtlIGluIHZvbHVtZSBldmVyeSB0aW1lIGEgbmV3IGJsb2NrIGlzIG1pbmVkIGFuZCB0aGUgbm9kZXMgc3RhcnQgZ29zc2lwaW5nIGFib3V0IGl0LlxuVGhlIGJsb2NrcyBpbiBCaXRjb2luIGFyZSBxdWl0ZSBiaWcsIGFuZCB0aGUgcHJvcGFnYXRpb24gc3BlZWQgaXMgY3JpdGljYWwgZm9yIGNvbnNlbnN1cyAoZ3JlYXRlciBkZWxheSBtZWFucyBtb3JlIGZyZXF1ZW50IGFjY2lkZW50YWwgZm9ya3MpLCBzbyBzdWNoIGVmZmVjdCBpcyBwcmVkaWN0YWJsZSwgYW5kLCBpbiBhIHNlbnNlLCBpbmhlcmVudCB0byB0aGUgQml0Y29pbiBhcmNoaXRlY3R1cmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTm90YWJseSwgdGhlIHZvbHVtZSBvZiBibG9jay1yZWxhdGVkIG1lc3NhZ2VzIHdhcyBkcmFzdGljYWxseSByZWR1Y2VkIHNpbmNlIHRoZSBpbnRyb2R1Y3Rpb24gb2YgQ29tcGFjdCBCbG9jayBSZWxheSAoIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTUyLm1lZGlhd2lraSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQklQIDE1MiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cbkluc3RlYWQgb2YgcmVxdWVzdGluZyB3aG9sZSBibG9ja3MsIG1vc3RseSBjb25zaXN0aW5nIG9mIHRyYW5zYWN0aW9ucyBhbHJlYWR5IGtub3duIHRvIHRoZSBub2RlLCB0aGUgcGVlciBpbmZvcm1lZCBvZiBhIG5ldyBibG9jayBpcyBvbmx5IHJlcXVlc3RpbmcgdGhlIG1pc3NpbmcgdHJhbnNhY3Rpb25zLlxuWWV0IHRoZSBhbW91bnQgb2YgZXh0cmEgY29tbXVuaWNhdGlvbnMgaW4gdGhlIHNlY29uZHMgZm9sbG93aW5nIGEgbmV3IGJsb2NrIGlzIHN0aWxsIGNvbnNpZGVyYWJsZS5cblRoaXMgZWZmZWN0IG1heSBub3QgYmUgbm90aWNlYWJsZSBmb3IgYSBzaW5nbGUgYmxvY2ssIGJ1dCBvdmVyIHRpbWUgaXQgZ2V0cyBzdGF0aXN0aWNhbGx5IHNpZ25pZmljYW50LCBhbmQgbWF5IGdldCBleHBsb2l0ZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFzIHJlcG9ydGVkIGJ5ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL200MTd6LmNvbS9iaXRzbmlmZi8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIk5pa28gS3Vkcmlhc3RldiBhbmQgTWljaGFlbCBNYWx0c2V2IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBpdCBpcyBwb3NzaWJsZSB0byBkZXRlY3QgQml0Y29pbiBjb21tdW5pY2F0aW9ucyB1c2luZyBub3RoaW5nIGJ1dCB0cmFmZmljIHZvbHVtZSBvdmVyIHRpbWUgLSBhbiBpbmZvcm1hdGlvbiBldmVuIG1vc3QgcHJpdmFjeSBjb25jZXJuZWQgaW5kaXZpZHVhbHMgYXJlIGxpa2VseSBsZWFraW5nIHRvIHRoZWlyIGxhdy1hYmlkaW5nIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXIuXG5JbiB0aGlzIGNhc2UsIHVzaW5nIGEgVlBOIGFuZCBydW5uaW5nIHRoZSBub2RlIG92ZXIgVG9yIG1heSBub3QgYmUgZW5vdWdoIHRvIGF2b2lkIGJlaW5nIGRldGVjdGVkLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInByb3RlY3Rpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Byb3RlY3Rpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb3RlY3Rpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBhcmUgbWFueSB3YXlzIHRvIGdvIGFib3V0IGl0LCBidXQgc3RheWluZyBjb21wbGV0ZWx5IHVuZGV0ZWN0ZWQgaXMgZmFyIGZyb20gdHJpdmlhbCAtIHRyYWRpdGlvbmFsIHByaXZhY3kgZW5oYW5jaW5nIHRvb2xzIG1vc3RseSBmb2N1cyBvbiB0aGUgcGFja2V0IGxldmVsLCB3aGljaCBpcyBvcnRob2dvbmFsIHRvIHRoZSB0ZWNobmlxdWUuIExldOKAmXMgYnJlYWsgZG93biB0aGUgcG90ZW50aWFsIGRlZmVuc2UgdmVjdG9ycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiYS4gIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlZQTiAvIFRvciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAtIHVubGlrZWx5IHRvIGFmZmVjdCB0aGUgdGltZSBzZXJpZXMgc2hhcGUgbXVjaCwgYW5kIHRoZXJlZm9yZSBmb3IgbGFyZ2VyIHRyYWZmaWMgbGVuZ3RocyB0aGUgc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9mIGJsb2NrLXJlbGF0ZWQgc3Bpa2VzIHdpbGwgaW5ldml0YWJseSBiZWNvbWUgb3ZlcndoZWxtaW5nLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJiLiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVHJhZmZpYyBtaXhpbmciKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLSBmb3IgdHJhZmZpYyB2b2x1bWVzIHRoYXQgYXJlIG9yZGVycyBvZiBtYWduaXR1ZGUgaGlnaGVyIHRoYW4gQml0Y29pbiBQMlAgY29tbXVuaWNhdGlvbnMsIG1peGluZyBpcyBsaWtlbHkgdG8gYmUgdmVyeSBlZmZlY3RpdmUuXG5UaGF0IHdvdWxkLCBob3dldmVyLCBkZW1hbmQgY29uc3RhbnQgc2hpZWxkaW5nIG9mIGJvdGggdXBzdHJlYW0gYW5kIGRvd25zdHJlYW0gY29tbXVuaWNhdGlvbnMsIGFuZCBjb3VsZG7igJl0IGJlIGRvbmUgZWZmZWN0aXZlbHkgYnkganVzdCBydW5uaW5nIHRoZSBub2RlIG9uIGEgZ2VuZXJhbCBwdXJwb3NlIG1hY2hpbmUgLSBhbnkgbm90aWNlYWJseSBsb25nIHVuc2hpZWxkZWQgcGVyaW9kIG1heSBiZSBlbm91Z2ggZm9yIGRldGVjdGlvbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiYy4gIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkJlaW5nIHlvdXIgb3duIElTUCIpXSksCiAgICAgICAgX3ZtLl92KCIgLSB0b28gc3BpY3kgZm9yIG1vc3QsIGJ1dCB0aGF0IHNob3VsZCB3b3JrLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJkLiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQmxvY2tzdHJlYW0gU2F0ZWxsaXRlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gdGhlIHVsdGltYXRlIHNvbHV0aW9uLlxuRWxpbWluYXRlcyB0aGUgdHJhZmZpYyBhbmFseXNpcyB0aHJlYXQgYWx0b2dldGhlci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZXlvbmQgYWN0aXZlIG1lYXN1cmVzIGF2YWlsYWJsZSBub3csIGJvdGggcHJpdmFjeSBhbmQgYmFuZHdpZHRoIGVmZmljaWVuY3kgb2YgQml0Y29pbiBjb21tdW5pY2F0aW9ucyBhcmUgYWN0aXZlbHkgd29ya2VkIG9uLlxuSXQgaXMgZW50aXJlbHkgcG9zc2libGUgdGhhdCB0aGUgbWVzc2FnaW5nIHByb3RvY29sIHdpbGwgZ2V0IHRvIHRoZSBwb2ludCB3aGVyZSBibG9jayBwcm9wYWdhdGlvbiBkb2VzbuKAmXQgdHJpZ2dlciBhbnkgc2lnbmlmaWNhbnQgc3Bpa2VzIGluIHRyYWZmaWMgdm9sdW1lLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJZb3UgY2FuIHJlYWQgbW9yZSBhYm91dCBCaXRTbmlmZiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly83OWprZS5naXRodWIuaW8vQml0U25pZmYvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJoZXJlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBhbmQgY2hlY2sgdGhlIGludGVyYWN0aXZlIGRlbW8gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbTQxN3ouY29tL2JpdHNuaWZmLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiaGVyZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInl0RW1iZWQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgImJhY2tncm91bmQtaW1hZ2UiOgogICAgICAgICAgICAgICJ1cmwoaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvOVM4eHNEcTNQVFUvaHFkZWZhdWx0LmpwZykiCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsgImRhdGEtaWQiOiAiOVM4eHNEcTNQVFUiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgdGl0bGU6ICJZb3VUdWJlIDlTOHhzRHEzUFRVIiwKICAgICAgICAgICAgICAiZGF0YS1zcmMiOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkLzlTOHhzRHEzUFRVPyZhdXRvcGxheT0xJmF1dG9oaWRlPTEmbW9kZXN0YnJhbmRpbmc9MSZjb2xvcj13aGl0ZSZyZWw9MCIsCiAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgICAgICBhbGxvdzogImF1dG9wbGF5O2VuY3J5cHRlZC1tZWRpYTtwaWN0dXJlLWluLXBpY3R1cmUiLAogICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdCiAgICAgICkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}