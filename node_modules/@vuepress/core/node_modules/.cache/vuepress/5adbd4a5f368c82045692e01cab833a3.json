{"remainingRequest":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/WasabiDocChanged/docs/.vuepress/variables.js!/home/user/WasabiDocChanged/docs/FAQ/FAQ-UseWasabi.md?vue&type=template&id=1b69f2ed&","dependencies":[{"path":"/home/user/WasabiDocChanged/docs/FAQ/FAQ-UseWasabi.md","mtime":1579971419601},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/WasabiDocChanged/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "use-of-wasabi" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#use-of-wasabi" } },
          [_vm._v("#")]
        ),
        _vm._v(" Use of Wasabi")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "wallet-manager" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#wallet-manager" } },
          [_vm._v("#")]
        ),
        _vm._v(" Wallet Manager")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/XykixYdbFpA/hqdefault.jpg)"
          },
          attrs: { "data-id": "XykixYdbFpA" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube XykixYdbFpA",
              "data-src":
                "https://www.youtube-nocookie.com/embed/XykixYdbFpA?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c("details", { attrs: { id: "how-do-i-generate-a-new-wallet" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-generate-a-new-wallet",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I generate a new wallet?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "You can generate as many new wallets as you'd like, for no extra cost and without asking for permission.\nGo to the "
          ),
          _c("code", [_vm._v("Wallet Manager")]),
          _vm._v(" tab and the "),
          _c("code", [_vm._v("Generate Wallet")]),
          _vm._v(
            " menu.\nAs with everything in Wasabi, you are required to label this new wallet.\nMake sure that you are precise so that you know what this is for later.\nThe password is used to encrypt the private key (extracted from the extended private key) on the computer.\n"
          ),
          _c("strong", [_vm._v("Careful!!")]),
          _vm._v(" "),
          _c("strong", [
            _vm._v(
              "Without knowledge of the password, you CANNOT spend your bitcoin!!"
            )
          ]),
          _vm._v(
            "\nMake sure that you properly back up and write down this password.\nPlease also read and agree to the terms and conditions, the privacy policy and the legal issues.\nNow you can continue with clicking "
          ),
          _c("code", [_vm._v("Generate")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("img", {
            attrs: { src: "/WalletManagerGenerateWallet.png", alt: "" }
          })
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Now you will see the 12 recovery words, this is the mnemonic seed that you can use to backup and recover your wallet.\nMake sure, and triple check, that you have done a proper backup of BOTH the password AND the mnemonic.\nWhen you only have the recovery words, but not the password, then you will NOT be able to recover your wallet.\nIn order to protect your paper backup, consider storing the password and recovery words in two different locations.\nYou have successfully setup your wallet when you click "
          ),
          _c("code", [_vm._v("I wrote down my Recovery Words!")])
        ]),
        _vm._v(" "),
        _c("p", [
          _c("img", {
            attrs: { src: "/WalletManagerRecoveryWords.png", alt: "" }
          })
        ])
      ]),
      _c("details", { attrs: { id: "can-i-rename-my-wallet" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#can-i-rename-my-wallet", "aria-hidden": "true" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Can I rename my Wallet?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("Yes you can.\nGo to "),
            _c("code", [_vm._v("Wallets")]),
            _vm._v(" folder (inside the "),
            _c(
              "router-link",
              {
                attrs: {
                  to: "/using-wasabi/WasabiSetupTails.html#wasabi-data-folder"
                }
              },
              [_vm._v("Wasabi data folder")]
            ),
            _vm._v(") and rename the .json Wallet file.\nThen go to "),
            _c("code", [_vm._v("WalletBackups")]),
            _vm._v(" folder (inside "),
            _c(
              "router-link",
              {
                attrs: {
                  to: "/using-wasabi/WasabiSetupTails.html#wasabi-data-folder"
                }
              },
              [_vm._v("Wasabi data folder")]
            ),
            _vm._v(") and rename the .json Wallet file.")
          ],
          1
        ),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You need to mark the “show hidden files” setting to see the Wasabi data folder."
            )
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block danger" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "To avoid problems, make sure you close Wasabi Wallet before proceeding to rename any of your wallets."
            )
          ])
        ])
      ]),
      _c("details", { attrs: { id: "what-password-should-i-use" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-password-should-i-use",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What password should I use?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "The password you set is used as a 13th word (passphrase) as described in "
            ),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-39-mnemonic-code-for-generating-deterministic-keys"
                }
              },
              [_vm._v("BIP 39")]
            ),
            _vm._v(
              ", and is used to encrypt the private key of the extended private key as described in "
            ),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-38-password-protected-private-key"
                }
              },
              [_vm._v("BIP 38")]
            ),
            _vm._v(
              " to get an encrypted private key which is stored on the computer.\nThis is the password that will unlock your bitcoin to anyone who has access to the backup or computer.\nYou will need to type in the password before you can spend from a Wasabi wallet.\nSo if your backup gets compromised, this password is the only thing protecting your precious sats."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block danger" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
          _vm._v(" "),
          _c("p", [
            _vm._v("It is "),
            _c("strong", [_vm._v("VERY")]),
            _vm._v(" important to use a random and long password.")
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Since it is very difficult for humans to generate true randomness, it is good to use a tool to help find a strong password.\nThis can be the "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Diceware english wordlist"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", for true off-line password.\nFor Diceware in other languages follow "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "http://world.std.com/~reinhold/diceware.html#Diceware%20in%20Other%20Languages%7Coutline",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("this link"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ".\nA secure password manager software might also be used, but be careful here."
          )
        ])
      ]),
      _c("details", { attrs: { id: "how-do-i-back-up-my-mnemonic-words" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-back-up-my-mnemonic-words",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I back up my mnemonic words?")])
        ]),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
          _vm._v(" "),
          _c("p", [_vm._v("Write down your recovery words!")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("Wasabi uses "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-39-mnemonic-code-for-generating-deterministic-keys"
                }
              },
              [
                _vm._v(
                  "BIP 39: mnemonic code for generating deterministic keys"
                )
              ]
            ),
            _vm._v(
              " to enable easy backups of all private keys in the wallet.\nThe mnemonic is displayed as 12 recovery words that are only shown once during the wallet generation."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("p", [
          _c("img", {
            attrs: { src: "/WalletManagerRecoveryWords.png", alt: "" }
          })
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block danger" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "In order to restore a wallet, you need BOTH the mnemonic words AND the password!"
            )
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "It is a good idea to keep the two in separate analog backups, such as a laminated paper written with pencil.\nIn order to defend against nature destroying fragile paper, you can consider stamping the words into metal.\nUse two different backups and locations for the mnemonic and password, because whoever has both [including a physical attacker] has full access to your sats.\nFind a secure physical location to store the backups, maybe a home safe, or an expert security deposit box."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Please see "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/6102bitcoin/FAQ/blob/master/seed.md#3-Storing-your-Seed",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("this great guide"), _c("OutboundLink")],
            1
          ),
          _vm._v(" on how to properly store your seed.")
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "where-can-i-find-the-wasabi-data-folder" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#where-can-i-find-the-wasabi-data-folder",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Where can I find the Wasabi data folder?")])
          ]),
          _vm._v(" "),
          _c("ul", [
            _c("li", [
              _vm._v("Windows: "),
              _c("code", [
                _vm._v(
                  "/Users/{your username}/AppData/Roaming/WalletWasabi/Client"
                )
              ])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("Linux: "),
              _c("code", [_vm._v("/Home/.walletwasabi/client")])
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v("MacOS: "),
              _c("code", [
                _vm._v("/Users/{your username}/.walletwasabi/client")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "You need to mark the “show hidden files” setting to see it."
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("You can also easily reach it from inside Wasabi: "),
            _c("code", [_vm._v("File > Open > Data Folder")]),
            _vm._v(".")
          ])
        ]
      ),
      _c("details", { attrs: { id: "how-do-i-backup-my-wallet-file" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-backup-my-wallet-file",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I backup my wallet file?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Although you can backup your private keys with the mnemonic words and password, this is only a last resort recovery.\nIf you want to also secure your address labels, the anonset and additional metadata, then you can do a digital backup.\nSimply copy the "
            ),
            _c("code", [_vm._v("WalletBackups")]),
            _vm._v(" folder with the "),
            _c("code", [_vm._v("wallet.json")]),
            _vm._v(" files from your "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/FAQ/FAQ-UseWasabi.html#where-can-i-find-the-wasabi-data-folder"
                }
              },
              [_vm._v("Wasabi data folder")]
            ),
            _vm._v(
              " onto suitable hardware, for example an encrypted USB stick.\nNote that this file has the encrypted private key (extracted from the extended private key), meaning that you only need the password to spend the bitcoin.\nThis also contains the extended public key, the public keys, and the address labels, meaning that it completely links all the coins, both pre and post mix, with clear proof."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block warning" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Make sure to back up your password separately because it is necessary to spend your bitcoin."
            )
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "The wallet file backup is sensitive, in terms of privacy, but not critical in terms of loss of funds (if a password was used when generating the wallet).\nSo it is good advice to encrypt this wallet file."
            )
          ])
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "can-i-spend-my-bitcoin-without-the-password" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#can-i-spend-my-bitcoin-without-the-password",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Can I spend my bitcoin without the password?")])
          ]),
          _c("div", { staticClass: "custom-block danger" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "NO!!! Without knowledge of your password, even when you have the wallet file and recovery words, you can NOT spend your bitcoin!"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "When creating a new wallet, after labeling it properly, the next step is to select a long and random password.\nThis is used to encrypt the private key (extracted from the extended private key) on your computer, which has an insecure operating system and is connected to the Internet.\nEvery time you want to spend your coins from Wasabi, you MUST provide this password.\nSo even if you have these words securely engraved in metal, without the password, you cannot restore the backup of your wallet."
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Always backup your mnemonic recovery words, and your password in two separate secure locations."
              )
            ])
          ])
        ]
      ),
      _c("details", { attrs: { id: "why-bip-38" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#why-bip-38", "aria-hidden": "true" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Why BIP 38?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-38-password-protected-private-key"
                }
              },
              [_vm._v("BIP 38")]
            ),
            _vm._v(
              " is a good standard, a well-tested and very secure way to encrypt a private key.\nIt is also implemented in the "
            ),
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/MetacoSA/NBitcoin",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("NBitcoin library"), _c("OutboundLink")],
              1
            ),
            _vm._v(
              " so, it's easy to use.\nAdditionally, there is no standard way (bip) to encrypt HD wallets.\nTake into account that it is not only encryption what "
            ),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-38-password-protected-private-key"
                }
              },
              [_vm._v("BIP 38")]
            ),
            _vm._v(" provides but also a brute-force protection.")
          ],
          1
        )
      ]),
      _c(
        "details",
        {
          attrs: {
            id: "does-wasabi-support-the-hidden-wallets-of-hardware-wallets"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#does-wasabi-support-the-hidden-wallets-of-hardware-wallets",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Does Wasabi support the hidden wallets of hardware wallets?"
              )
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "Partially.\nOnly device side passphrase is supported.\nPC side passphrase is not.\nThis means the hidden wallet feature can be used with Trezor T, Ledger Nano S and ColdCard, but it cannot be used with Trezor One.\nAfter the 12 or 24 words, enter the passphrase as the 13th or 25th word.\nIt’s part of "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-39-mnemonic-code-for-generating-deterministic-keys"
                  }
                },
                [_vm._v("BIP 39")]
              ),
              _vm._v(".")
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        { attrs: { id: "i-forgot-my-lockscreen-pin-what-should-i-do" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#i-forgot-my-lockscreen-pin-what-should-i-do",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("I forgot my lockscreen PIN, what should I do?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "As described in the settings, you can just delete it.\nOpen the "
              ),
              _c("code", [_vm._v("UiConfig.json")]),
              _vm._v(" file inside your "),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/FAQ/FAQ-UseWasabi.html#where-can-i-find-the-wasabi-data-folder"
                  }
                },
                [_vm._v("Wasabi data folder")]
              ),
              _vm._v(" and set these entries as follows:")
            ],
            1
          ),
          _vm._v(" "),
          _c("div", { staticClass: "language- extra-class" }, [
            _c("pre", { pre: true, attrs: { class: "language-text" } }, [
              _c("code", [
                _vm._v('"LockScreenActive": false,\n"LockScreenPinHash": ""\n')
              ])
            ])
          ])
        ]
      ),
      _c("h2", { attrs: { id: "synchronization" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#synchronization" } },
          [_vm._v("#")]
        ),
        _vm._v(" Synchronization")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/qguwAvA5Fx4/hqdefault.jpg)"
          },
          attrs: { "data-id": "qguwAvA5Fx4" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube qguwAvA5Fx4",
              "data-src":
                "https://www.youtube-nocookie.com/embed/qguwAvA5Fx4?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c("details", { attrs: { id: "what-are-bip-158-block-filters" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-are-bip-158-block-filters",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What are BIP-158 block filters?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "When you do not run a full node, you need to communicate with some third party node to find out how much money you have.\nThere are very bad wallets that simply send the extended public key, and thus all your addresses and your entire transaction history, to a selected, or random server.\nThis means that this trusted third party has full knowledge of a lot of your sensitive financial data."
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block danger" }, [
          _c("p", { staticClass: "custom-block-title" }, [
            _vm._v("This is not acceptable")
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Do not send your extended public key to a third party server!"
            )
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("This is why Wasabi uses "),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-158-compact-block-filters-for-light-clients"
                  }
                },
                [_vm._v("BIP-158 block filters")]
              ),
              _vm._v(" to ensure "),
              _c(
                "router-link",
                { attrs: { to: "/using-wasabi/NetworkLevelPrivacy.html" } },
                [_vm._v("network level privacy")]
              ),
              _vm._v(".\nIt's as good as running a full node.")
            ],
            1
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "The Wasabi coordinator will send your wallet comparatively small block filters, and you check locally if the block contains a transaction with your coins.\nIf not, then the filter is stored for later reference and for syncing new wallets.\nIf yes, then the wallet connects to a random Bitcoin peer-to-peer full node to request this entire block.\nYour wallet does not communicate with the Wasabi server to download the block, because there's no need to trust it.\nFor every block download, Wasabi establishes a new and unique tor identity, meaning that it is not easy to link that it is the same entity downloading all these blocks.\nThe P2P node that serves you the block does not know if you are a regular Bitcoin full node, or a Wasabi light client node.\nYou are yet another peer in the network."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "It is important to note that although the privacy is as good as with a full node, you do not verify that the coins are actually valid.\nIn order to do this, you must run a full node and verify the entire timechain.\nWith the block filters, you trust that the Wasabi server gives you the correct filters, and does not withhold any of them.\nYou also do not have proof that the block you download from a P2P node is actually in the valid chain, but you can verify the proof of work in the block header."
          )
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "how-does-wasabi-download-a-relevant-block" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-does-wasabi-download-a-relevant-block",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How does Wasabi download a relevant block?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("Wasabi uses "),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-158-compact-block-filters-for-light-clients"
                  }
                },
                [_vm._v("BIP 158")]
              ),
              _vm._v(
                " block filter to find out if a specific block contains a transaction of a specific wallet.\nIf so, then by default Wasabi connects to a random Bitcoin peer to peer full node over tor, and requests only to download this block.\nFor each block, it generates a new and separate tor identity."
              )
            ],
            1
          ),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "If you are running your own node, then you can pull this block directly from the timechain that you have fully verified your self.\nIf the node is on the same computer, then it is connected automatically by default.\nYou can also specify the local IP or tor hidden service of your remote full node."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-do-i-know-if-the-synchronization-is-finished" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-do-i-know-if-the-synchronization-is-finished",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How do I know if the synchronization is finished?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You know that tor is properly connected, that all the block filters and all the relevant blocks are downloaded when you see that the status bar is "
            ),
            _c("code", [_vm._v("Ready")]),
            _vm._v(".")
          ]),
          _vm._v(" "),
          _c("p", [_c("img", { attrs: { src: "/StatusBar.png", alt: "" } })])
        ]
      ),
      _c("details", { attrs: { id: "what-does-it-mean-missing-filters" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-does-it-mean-missing-filters",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v('What does it mean "Missing Filters"?')])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("The "),
            _c("code", [_vm._v("Missing Filters")]),
            _vm._v(" label indicates that Wasabi is still downloading the "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-158-compact-block-filters-for-light-clients"
                }
              },
              [_vm._v("BIP 158 block filters")]
            ),
            _vm._v(
              " and it's synchronizing your wallet.\nYou have just to wait until the status bar is "
            ),
            _c("code", [_vm._v("Ready")]),
            _vm._v(".")
          ],
          1
        )
      ]),
      _c(
        "details",
        {
          attrs: {
            id:
              "how-long-does-the-initial-and-a-subsequent-synchronization-take"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-long-does-the-initial-and-a-subsequent-synchronization-take",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How long does the initial, and a subsequent synchronization take?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "It usually only takes a couple seconds to scan the block filters, download and parse the blocks.\nHowever, for large wallets with a many transactions, this synchronization can take up to several minutes.\nWe are constantly improving the speed and reliability of the loading process.\nFor especially old wallets, it might be worth considering to start a new wallet with a shorter transaction history."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "can-wasabi-work-with-a-pruned-bitcoin-node" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#can-wasabi-work-with-a-pruned-bitcoin-node",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Can Wasabi work with a pruned bitcoin node?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Yes.\nWasabi is a hybrid, if your node doesn't have a block, then it acquires it from someone else."
            )
          ])
        ]
      ),
      _c("h2", { attrs: { id: "receive" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#receive" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Receive")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/9i7CceIdFg4/hqdefault.jpg)"
          },
          attrs: { "data-id": "9i7CceIdFg4" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube 9i7CceIdFg4",
              "data-src":
                "https://www.youtube-nocookie.com/embed/9i7CceIdFg4?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c("details", { attrs: { id: "why-is-it-bad-to-re-use-addresses" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#why-is-it-bad-to-re-use-addresses",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Why is it bad to re-use addresses?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Bitcoin is designed so that for every payment you can use a new address that is not tied to any of your previous addresses.\nWhen you use a new address for every coin, then it becomes much much more difficult to find out that these coins are yours.\nHowever, when you use the same address for every coin, then everyone knows that all coins can be spent by one individual who has the private key - you!\nThus, when someone finds out that you have that address, maybe you published it in your social media profile for donations, or you sent a coin to another peer who knows you, then he knows also how many bitcoin you have in that same address.\nTake good care to whom you tell your addresses, and every time use a different address."
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Because you have all the private keys, for all these addresses, you can produce a valid signature for any of them.\nSo you can prove that these are your bitcoin, without relying on reputation that you have any other coins.\nYou can easily generate and store billions of private keys and addresses in a convenient "
            ),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-44-multi-account-hierarchy-for-deterministic-wallets"
                }
              },
              [
                _vm._v(
                  "BIP 44 multi-account hierarchy for deterministic wallets"
                )
              ]
            ),
            _vm._v(
              " so that you can backup everything in your 12 word mnemonic phrase."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "This is what is used in Wasabi.\nYou have a mnemonic backup, and an unlimited number of new addresses.\nEvery time a coin is received, the address is removed from the GUI so that you are not tempted to use it again."
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block danger" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
          _vm._v(" "),
          _c("p", [_c("strong", [_vm._v("NEVER RE-USE ADDRESSES")])])
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "how-do-i-generate-a-new-receiving-address" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-do-i-generate-a-new-receiving-address",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How do I generate a new receiving address?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("You can generate a new bech32 address in the "),
              _c("code", [_vm._v("Receive")]),
              _vm._v(
                " tab of Wasabi Wallet.\nFirst you must set a label for it, so that you later know who has sent you bitcoin to this address.\nBe precise in the reason for the payment, labeling the observers is an important part of good "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/FAQ/FAQ-UseWasabi.html#why-is-coin-control-so-important"
                  }
                },
                [_vm._v("coin control")]
              ),
              _vm._v(" privacy best practices.\nThen you can click on "),
              _c("code", [_vm._v("Generate")]),
              _vm._v(
                " which will now show you the address, and immediately copy it to the clipboard.\nAfter a coin has been sent to this address, it is removed from the GUI, this is a good feature to help protect you against "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/FAQ/FAQ-UseWasabi.html#why-is-it-bad-to-re-use-addresses"
                  }
                },
                [_vm._v("address reuse")]
              ),
              _vm._v(".")
            ],
            1
          ),
          _vm._v(" "),
          _c("p", [
            _c("img", {
              attrs: { src: "/ReceiveLabelingRequired.png", alt: "" }
            })
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "If you generate more than 21 unused addresses, a notification will appear saying "
            ),
            _c("code", [
              _vm._v("Warning! MinGapLimit increased from 21 to 22.")
            ]),
            _vm._v(" and so on.\nThe "),
            _c("code", [_vm._v("MinGapLimit")]),
            _vm._v(
              " is the maximum number of consecutive unused addresses in your sequence of addresses, Wasabi automatically increases this value if needed when you generate new receiving addresses.\nWhen you import the wallet file into a new Wasabi client, then it will use this "
            ),
            _c("code", [_vm._v("MinGapLimit")]),
            _vm._v(" to find all your coins in the wallet.")
          ])
        ]
      ),
      _c("details", { attrs: { id: "why-do-i-have-to-label-my-address" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#why-do-i-have-to-label-my-address",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Why do I have to label my address?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Bitcoin addresses look like cyphertext, they are not easily remembered and it's not clear how they were used previously.\nWhen you do not label all your addresses, there is no meta-data for you to understand the context of their coins.\nThus receiving addresses and sending transactions that generate a change coin should be carefully labeled with the observers who know about this.\nThis helps you know where your coins came from so that you can judge whether there are privacy concerns when sending a specific coin to a specific receiver."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("img", { attrs: { src: "/ReceiveLabelingRequired.png", alt: "" } })
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            'When labeling a newly generated address or a sending transaction that generates a change coin you should ask yourself: "Who knows this address is mine?" or "Who will I share this address with?" or "From whom I am receiving bitcoin?" or "To whom I am sending bitcoin?"\nLabels should contain the comma-separated names of people/entities that may be aware of the transaction and could follow its trail like:'
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("code", [
            _vm._v(
              "Name of the sender or the receiver, name of the exchange, name of the payment processor"
            )
          ])
        ]),
        _vm._v(" "),
        _c("p", [_vm._v("So, a good label could be:")]),
        _vm._v(" "),
        _c("p", [_c("code", [_vm._v("Alice, Bitfinex, BTCPay Server")])]),
        _vm._v(" "),
        _c("p", [_vm._v("or:")]),
        _vm._v(" "),
        _c("p", [
          _c("code", [_vm._v("Alice & Bob")]),
          _vm._v(" (This is one entity which is not the same as "),
          _c("code", [_vm._v("Alice, Bob")]),
          _vm._v(
            " as they are multiple entities and thus separated by a comma)"
          )
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "how-can-i-change-the-label-of-my-receive-address" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-change-the-label-of-my-receive-address",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I change the label of my receive address?")
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "You can change the label of your receive address in the right click menu by clicking "
              ),
              _c("code", [_vm._v("Change Label")]),
              _vm._v(
                ", then type in the new label.\nThis is useful for when you have generated a receiving address with a specific label, but then the cause for receiving is no longer present.\nTake care with whom you have shared this address, because if you send it to several people, they might all send many coins to the same address.\nThis is very bad for your privacy because of "
              ),
              _c(
                "router-link",
                { attrs: { to: "/using-wasabi/AddressReuse.html" } },
                [_vm._v("address reuse")]
              ),
              _vm._v(
                ", and it confuses you with the labeling of each unique coin."
              )
            ],
            1
          ),
          _vm._v(" "),
          _c("p", [
            _c("img", {
              attrs: { src: "/ReceiveAddressDropDownMenu.png", alt: "" }
            })
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "how-can-i-edit-the-label-of-my-address-after-a-transaction-has-gone-through"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-can-i-edit-the-label-of-my-address-after-a-transaction-has-gone-through",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How can I edit the label of my address after a transaction has gone through?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "To date there is no possibility to change the label of an address after it has sent or received bitcoins."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id: "are-there-privacy-concerns-regarding-whom-i-send-my-address"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#are-there-privacy-concerns-regarding-whom-i-send-my-address",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Are there privacy concerns regarding whom I send my address?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Yes.\nWhomever you send your address, he knows that this address, and any coin sent to it, belongs to you.\nThus it is important to have labeled receiving addresses, so that you know which address is known by whom.\nIt is important that you avoid sending the same address to several different individuals.\nThere is a risk that both of them send coins to this same destination, thus unnecessarily linking the payments."
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block danger" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
            _vm._v(" "),
            _c("p", [
              _vm._v("It is especially important to "),
              _c("strong", [_vm._v("NEVER")]),
              _vm._v(
                " send your extended public key to any third party server.\nThis is a complete de-anonymization of your entire wallet!!"
              )
            ])
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "why-does-wasabi-only-use-segwit-bech32-addresses" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#why-does-wasabi-only-use-segwit-bech32-addresses",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("Why does Wasabi only use SegWit bech32 addresses?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Wasabi generates Bech32 addresses only, also known as bc1 addresses or native SegWit addresses.\nThese addresses start with the characters "
            ),
            _c("code", [_vm._v("bc1...")]),
            _vm._v(
              ' Some wallets/exchanges do not yet support this type of address and may give an error message (e.g. "unknown bitcoin address").\nThe solution is to manage your funds with a wallet which does support Bech32.\nTo check Bech32 adoption and exchange/wallet support you can follow '
            ),
            _c(
              "a",
              {
                attrs: {
                  href: "https://en.bitcoin.it/wiki/Bech32_adoption",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Bitcoin.it Wiki"), _c("OutboundLink")],
              1
            ),
            _vm._v(" and "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://whensegwit.com/#who",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("When Segwit? website"), _c("OutboundLink")],
              1
            ),
            _vm._v(".")
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Be careful, if you send all your coins from an old wallet to a new wallet (from the table above) in one transaction then you will merge all your coins which is bad for privacy - instead, "
            ),
            _c("strong", [_vm._v("send the coins individually")]),
            _vm._v(" or if possible "),
            _c("strong", [_vm._v("import the seed in the new wallet")]),
            _vm._v(".")
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "where-can-i-find-my-address-qr-code-and-public-key" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#where-can-i-find-my-address-qr-code-and-public-key",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("Where can I find my address QR code and public key?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You can see the address QR code, public key and the key path in the drop down menu of the "
            ),
            _c("code", [_vm._v("Receive")]),
            _vm._v(
              " tab.\nClick on the arrow on the left side of the address to reveal the extra details.\nYou can save the png file of the QR code in the right click menu."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _c("img", {
              attrs: { src: "/ReceiveAddressDropDown.png", alt: "" }
            })
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "what-derivation-paths-does-wasabi-use" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-derivation-paths-does-wasabi-use",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("What derivation paths does Wasabi use?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("Wasabi follows "),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-84-derivation-scheme-for-p2wpkh-based-accounts"
                  }
                },
                [_vm._v("BIP 84: Derivation scheme for P2WPKH Based Accounts")]
              ),
              _vm._v(", so the main path is "),
              _c("code", [_vm._v("m/84'/0'/0'")]),
              _vm._v(".\nOn TestNet and RegTest Wasabi uses "),
              _c("code", [_vm._v("m/84'/0'/0'")]),
              _vm._v(", and not the standard "),
              _c("code", [_vm._v("m/84'/1'/0'")]),
              _vm._v(
                ".\nDue to the CoinJoin implementation, the key depth can be rather large, thus when recovering the gap limit should be elevated to at least 100."
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        { attrs: { id: "can-i-generate-a-multi-signature-script" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#can-i-generate-a-multi-signature-script",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Can I generate a multi signature script?")])
          ]),
          _vm._v(" "),
          _c("p", [_vm._v("No.")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Multi signature scripts define that there need to be m-of-n signatures provided in order to spend this UTXO.\nFor example in a 2-of-3, Alice alone cannot spend the sats, she needs the collaboration of either Bob or Charlie.\nIn current implementations, a legacy and SegWit v0 multisig address is clearly distinguishable, there are three public keys and two signatures, and not one single public key and signature.\nThis means that your anonymity set, the crowd you hide in, gets a lot smaller.\nIf some one knows that you use a multisig wallet, then they can narrow down their search for your coins.\nThus, use of multisig decreases your privacy, and Wasabi is not implementing tools that degrade your privacy."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Yet multisig is a popular feature, and many Wasabikas do request it for extra security, willing to trade-off some privacy.\n"
            ),
            _c(
              "a",
              {
                attrs: {
                  href: "https://electrum.org",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Electrum Wallet"), _c("OutboundLink")],
              1
            ),
            _vm._v(
              " is a fantastic wallet with many features, but only private if you connect to your own Electrum server full node.\nElectrum can be used to create different types of m-of-n multisig scripts, including the use of hardware wallets."
            )
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "Anyway, since Wasabi is using the Hardware Wallet Interface with Partially Signed Bitcoin Transactions (PSBT), the implementation might come in #twoweeks, check the "
              ),
              _c(
                "router-link",
                { attrs: { to: "/building-wasabi/ToDo.html" } },
                [_vm._v("ToDo list")]
              ),
              _vm._v(
                ".\nSchnorr key and signature aggregation with MuSig increases the privacy, since only one public key, not n, are committed on the timechain.\nSo when Schnorr is activated in the Bitcoin consensus layer, in #twoweeks, there are no privacy concerns standing in the way of Wasabi multisig!"
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id: "how-does-wasabi-know-of-incoming-transactions-to-the-mempool"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-does-wasabi-know-of-incoming-transactions-to-the-mempool",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How does Wasabi know of incoming transactions to the mempool?"
              )
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "When Wasabi is running, it connects to random Bitcoin peer to peer nodes and listens for their gossip of all transactions on the network.\nBased on this information Wasabi builds its own local mempool of unconfirmed transactions.\nSo when you have Wasabi running, you will be notified about an incoming receiving transaction as soon as it is gossiped on the network.\nBut when Wasabi is offline, it does not listen to the network and it will not know about your unconfirmed transaction when you next start up Wasabi.\nIn this case you have to wait until your transaction is confirmed in a block, and based on the "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/BIPs.html#bip-158-compact-block-filters-for-light-clients"
                  }
                },
                [_vm._v("BIP 158 block filters")]
              ),
              _vm._v(
                " Wasabi will download that whole block including your transaction from a random P2P node."
              )
            ],
            1
          )
        ]
      ),
      _c("h2", { attrs: { id: "send" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#send" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Send")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/PRlAAxunmdU/hqdefault.jpg)"
          },
          attrs: { "data-id": "PRlAAxunmdU" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube PRlAAxunmdU",
              "data-src":
                "https://www.youtube-nocookie.com/embed/PRlAAxunmdU?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/AdmlM-Qvco0/hqdefault.jpg)"
          },
          attrs: { "data-id": "AdmlM-Qvco0" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube AdmlM-Qvco0",
              "data-src":
                "https://www.youtube-nocookie.com/embed/AdmlM-Qvco0?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c("details", { attrs: { id: "what-are-coins" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#what-are-coins", "aria-hidden": "true" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What are coins?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Bitcoin uses a system of inputs and outputs to keep track who owns how many sats.\nEvery transaction specifies one or more inputs, the chunk of bitcoin being spent, and one or more outputs, the destination of who receives the bitcoin.\nA coin is also called an unspent transaction output UTXO, meaning that this output has not been used as the input of a new transaction - it is yet to be spent.\nIn order to spend a UTXO, the valid signature and script has to be provided in the transaction.\nThis ensures that only with knowledge of the correct private key can this coin be sent to a new address.\nThis chain of links between inputs being spent and outputs being generated is verified by every full node, and stored on the timechain."
          )
        ])
      ]),
      _c("details", { attrs: { id: "why-is-coin-control-so-important" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#why-is-coin-control-so-important",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Why is coin control so important?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Coin control is a feature in Wasabi that allows the user to choose which coins are to be spent as inputs in an outgoing transaction.\nCoin control is aimed to avoid as much as possible transactions where privacy leaks are caused by amounts, change addresses, the transaction graph and the common-input-ownership heuristic."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Satoshis, the base currency in the Bitcoin network, are fungible units of account.\nIt's just a number that shows how much value is being transferred, and the number "
          ),
          _c("code", [_vm._v("100")]),
          _vm._v(' is "the same" any time the number '),
          _c("code", [_vm._v("100")]),
          _vm._v(
            " is used.\nThe 9000 sats you spend on stickers are equal to the 9000 sats you spend on coffee.\nJust like 1 gram of gold atoms are equal to any other 1 gram of gold atoms."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "However, the unspent transaction outputs, the \"coins\" that hold the satoshi themselves are not fungible.\nEvery UTXO is a unique snowflake that has its own transaction history, as well as an independent spending condition.\nThe coin worth 2 bitcoin and locked by Alice's public key is not the same as the UTXO worth 5 bitcoin locked by the 2-of-3 multi signature of Bob, Charlie and David.\nSo when sending bitcoin, it's important to consider which actual outputs are being sent in the transaction."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "It might be a problem when Alice sends the coin she received for a months worth of labor, in exchange for a coffee in Bob's store.\nNow Bob knows the amount Alice gets paid, and this is none of his business.\nAlice can protect herself against this by using a CoinJoin UTXO, because now Bob can not know the previous transactions from Alice."
          )
        ])
      ]),
      _c("details", { attrs: { id: "how-do-i-set-a-destination-address" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-set-a-destination-address",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I set a destination address?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("In the "),
          _c("code", [_vm._v("Send")]),
          _vm._v(" tab, there is a text box for the "),
          _c("code", [_vm._v("Address")]),
          _vm._v(
            " right under the coin list.\nIf you have an address in the clipboard, then it is automatically pasted when you click on the box.\nYou can also type in the Bech32 address manually, there is a checksum to help you identify typos.\nBe careful and double check the address, there is no way to revert this transaction and change the destination.\nSo make sure that the coins get into the right hands."
          )
        ])
      ]),
      _c("details", { attrs: { id: "can-i-pay-to-many-addresses" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-i-pay-to-many-addresses",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Can I pay to many addresses?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Unfortunately pay to many is not not yet implemented in the GUI.\nHowever, you can use the "
            ),
            _c(
              "router-link",
              { attrs: { to: "/using-wasabi/RPC.html#send" } },
              [
                _vm._v("RPC server "),
                _c("code", [_vm._v("send")]),
                _vm._v(" call")
              ]
            ),
            _vm._v(" and specify multiple receiving addresses.")
          ],
          1
        )
      ]),
      _c("details", { attrs: { id: "how-do-i-set-the-payment-amount" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-set-the-payment-amount",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I set the payment amount?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("After you select one or more coins as inputs in "),
          _c("code", [_vm._v("Send")]),
          _vm._v(
            " tab, say two anonset coins worth 0.1 bitcoin each.\nYou can manually set the exact amount that the destination address will receive in the output of the transaction, say 0.15 bitcoin.\nThen Wasabi will help you with automatically calculating the precise change output value with "
          ),
          _c("code", [
            _vm._v("inputs - destination output - confirmation fee")
          ]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("img", { attrs: { src: "/SendAmountFeePassword.png", alt: "" } })
        ])
      ]),
      _c("details", { attrs: { id: "how-can-i-use-the-max-button" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-can-i-use-the-max-button",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How can I use the MAX button?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("When you select one or more coins as inputs in "),
          _c("code", [_vm._v("Send")]),
          _vm._v(
            " tab, say two anonset coins worth each 0.1 bitcoin.\nYou can click the "
          ),
          _c("code", [_vm._v("MAX")]),
          _vm._v(
            " button and the transaction will have only one output with the destination address, and no change output.\nWasabi will calculate the precise value for the destination output with "
          ),
          _c("code", [_vm._v("inputs - confirmation fee")]),
          _vm._v(
            '.\nThis means you send the entire two coins to the receiving address, and there is no change coming back to your own wallet, you are sending a "whole coin".'
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("img", { attrs: { src: "/SendAmountFeePassword.png", alt: "" } })
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "The timechain spy heuristic is that this is a transaction to yourself, for example to your hardware wallet for long-term hodling.\nMost of the time this assumption is correct - the amount of an external payment is rarely exactly the same as the value of the sum of coins in the input, thus requiring change.\nIt does not matter what value the coin has when you send it to yourself, thus there is no change.\nBut you can use this assumption to your advantage by sending the MAX amount to your external destination, for example for pizza at the tribe gathering.\nIf the change would be only a small amount, maybe you accept the overpayment as price for your privacy.\nIf the input is not high enough value for the payment, maybe the receiver accepts a slight underpayment.\nYou can also use payment rails like Lightning Network to send the small value change privately off-chain."
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "When using the MAX button, it looks like you send back to yourself.\nThis can be used to spy on you!\nBut you can also use it to your advantage when paying others."
            )
          ])
        ])
      ]),
      _c(
        "details",
        {
          attrs: {
            id:
              "why-does-wasabi-choose-a-new-random-node-every-time-i-send-a-transaction"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#why-does-wasabi-choose-a-new-random-node-every-time-i-send-a-transaction",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Why does Wasabi choose a new random node every time I send a transaction?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "When you broadcast a transaction from a full node, that transaction is flooded onto the network.\nEssentially, all nearby nodes are passed your transaction, and those nodes will pass to all of their nearby nodes, etc.\nHowever, if a malicious adversary were to get enough relay nodes in the network, they could pretty easily connect the initial location of a transaction by simply observing from which node the transaction appeared first.\nFor this reason, broadcasting transaction through your own node may reveal your IP address."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "So to fix this Wasabi broadcasts your transactions to a random node, and messages that node through TOR, so the node cannot detect your IP address.\nWhen you want to subsequently send another transaction on the network, Wasabi destroys the original TOR bridge and connection to the node and establishes a new TOR bridge and connection with a brand new node.\nThis reduces the risk of a passive bystander being able to link two transactions together that appear from the same location."
            )
          ])
        ]
      ),
      _c("details", { attrs: { id: "what-fee-should-i-select" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-fee-should-i-select",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What fee should I select?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Wasabi uses the "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://bitcointechtalk.com/an-introduction-to-bitcoin-core-fee-estimation-27920880ad0",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("smartfee"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " estimation algorithm provided by bitcoind.\nThis integrates both data from recent blocks, as well as the local mempool to estimate the current and future demand for blockspace.\nThe lower the fee is, the longer the estimated wait; and the higher the fee, the faster the confirmation will come.\nThere are several different confidence levels, each of them gives an educated guess how soon the transaction will confirm.\nBut the provided time frames are only a rough estimation, and not at all a precise metric."
          )
        ]),
        _vm._v(" "),
        _c("p", [_c("img", { attrs: { src: "/SendFeeSlider.png", alt: "" } })]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Because confirmation fee estimation is more an art than a science, you can also set the fee manually.\nThen you can go after your gut feeling, "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://jochen-hoenicke.de/queue/#0,24h",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("mempool chart analysis"), _c("OutboundLink")],
            1
          ),
          _vm._v(", or just putting the minimum of 1 sat/vByte.")
        ]),
        _vm._v(" "),
        _c("p", [_c("img", { attrs: { src: "/SendNoFee.png", alt: "" } })]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "For a transaction to yourself, for example from your hot CoinJoin wallet to your hardware wallet, you don't need to have fast confirmation, so you can set a low fee.\nBut to send from the hot CoinJoin wallet to the coffee shop, you might want to get faster confirmation, thus paying a higher fee.\nThis really depends on your own time preference in every unique moment."
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("Remember")]),
          _vm._v(" "),
          _c("p", [
            _vm._v("These sats are precious, so don't overpay on fees!")
          ])
        ])
      ]),
      _c("details", { attrs: { id: "how-do-i-set-custom-fee-rate" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-set-custom-fee-rate",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I set custom fee rate?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Go to "),
          _c("code", [_vm._v("Settings")]),
          _vm._v(" and under the UI category turn on "),
          _c("code", [_vm._v("Manual fee entry")]),
          _vm._v(".\nIn the "),
          _c("code", [_vm._v("Send")]),
          _vm._v(" tab, simply click on the "),
          _c("code", [_vm._v("Fee")]),
          _vm._v(" box and manually type the fee rate (sat/vByte) you want.")
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "how-can-i-display-the-fee-in-satoshis-per-byte" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-display-the-fee-in-satoshis-per-byte",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I display the fee in satoshis per byte?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "The fee you pay to get confirmation on the Bitcoin timechain is denominated in satoshis per virtual byte.\nThis means that the larger your transaction size, meaning the number of inputs and outputs, the more total bitcoin you have to pay for confirmation.\nIf you want faster confirmation, then you have to pay proportionally more sats per vByte."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("You can toggle the display of the fee between "),
            _c("code", [_vm._v("sat/vByte")]),
            _vm._v(" & "),
            _c("code", [_vm._v("percentage of transferred value")]),
            _vm._v(" & "),
            _c("code", [_vm._v("total bitcoin")]),
            _vm._v(" & "),
            _c("code", [_vm._v("total USD")]),
            _vm._v(" by clicking on the text of the fee.")
          ])
        ]
      ),
      _c("details", { attrs: { id: "how-do-i-select-coins-for-spending" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-do-i-select-coins-for-spending",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How do I select coins for spending?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Unlike other Bitcoin wallets, the user cannot spend from Wasabi without selecting coins, since "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://medium.com/@nopara73/coin-control-is-must-learn-if-you-care-about-your-privacy-in-bitcoin-33b9a5f224a2",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _vm._v(
                '"Coin Control Is Must Learn If You Care About Your Privacy In Bitcoin"'
              ),
              _c("OutboundLink")
            ],
            1
          ),
          _vm._v(", at least for today.\nThe label field of the "),
          _c("code", [_vm._v("Send")]),
          _vm._v(
            " tab is also compulsory.\nThe received coins will appear in your "
          ),
          _c("code", [_vm._v("Send")]),
          _vm._v(
            " tab and you'll have to manually select which coins you'll want to spend from.\nBy clicking on the "
          ),
          _c("code", [_vm._v("Max")]),
          _vm._v(
            " button, one can spend all selected coins.\nSpending whole coins is beneficial to privacy.\n"
          ),
          _c("img", { attrs: { src: "/Send.png", alt: "" } })
        ])
      ]),
      _c("details", { attrs: { id: "how-is-the-transaction-broadcasted" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-is-the-transaction-broadcasted",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How is the transaction broadcasted?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Wasabi previously did not maintain its P2P connections over Tor.\nSince Wasabi is a non-listening node, broadcasting transactions through other P2P nodes over the clearnet would’ve let the peer to link your IP address to the transaction.\nThis is why we were broadcasting our transactions to our backend server over Tor.\nNow, we started tunneling all our P2P traffic through Tor, too:\nWe did it in a way that we only connect to onion nodes, so end to end encryption is now enforced between us and our peers.\nAll this without involving any exit node.\nWe connect to each peer through a different Tor stream.\nThis enabled us to replace our transaction broadcasting mechanism.\nNow, we broadcast transactions to only one peer over Tor and immediately after that we disconnect the peer."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "If Wasabi cannot broadcast a transaction through a random node over Tor, it will (in the last resort) send the transaction to the coordinator backend for broadcasting."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Once a transaction is sent, Wasabi will always open a new Tor circuit with a new random node on the network, in order to avoid giving away too much information to one party.\nWhen you send two consecutive transactions via Wasabi, you can be sure that they appear in two very different places on the network."
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("Wasabi will implement the "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-156-dandelion-privacy-enhancing-routing"
                }
              },
              [_vm._v("Dandelion")]
            ),
            _vm._v(
              " protocol for transaction broadcasting when the Bitcoin network adopts it."
            )
          ],
          1
        )
      ]),
      _c("details", { attrs: { id: "what-is-the-cluster-history" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-is-the-cluster-history",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What is the cluster history?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            'Clusters are a property of a Bitcoin wallet with strong coin-control and good labeling.\nWhen you use Wasabi, you must label every coin that you receive with the observers.\nThe reason why this is important, is that your "wallet" is really just a collection of coins (similar to a physical wallet, not to a bank account).\nWhen you receive coins from somewhere to a labeled address, Wasabi will store the label locally on your device, for example:'
          )
        ]),
        _vm._v(" "),
        _c("p", [_c("code", [_vm._v("----> 0.65 BTC (Bob)")])]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Now if you receive money from Alice who uses an exchange, then your label would look like this:"
          )
        ]),
        _vm._v(" "),
        _c("p", [_c("code", [_vm._v("----> 2.1 BTC (Alice, exchange)")])]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            'Now here is where things can be a bit tricky for folks unfamiliar with Bitcoin.\nSuppose you wanted to send all of your coins to a hardware wallet.\nSo you think to yourself "What\'s the harm in sending my money to one address?"'
          )
        ]),
        _vm._v(" "),
        _c("p", [_vm._v("This is how the transaction will look like:")]),
        _vm._v(" "),
        _c("div", { staticClass: "language- extra-class" }, [
          _c("pre", { pre: true, attrs: { class: "language-text" } }, [
            _c("code", [
              _vm._v(
                "0.65 BTC (Bob)           ----->  2.75 BTC (Bob, Alice, exchange)\n2.1 BTC (Alice, exchange)\n"
              )
            ])
          ])
        ]),
        _c("p", [
          _vm._v(
            "The problem with this transaction, is your boss knows you, and knows that the 0.65 BTC is in your possession, and can monitor your transaction behavior.\nBut when you combine (consolidate) your coins in this way, you reveal to your boss that you also have 2.1 BTC from somewhere else, and you reveal to the exchange that you have 0.65 bitcoin from somewhere else."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "When you CoinJoin (mix) coins with Wasabi, you actually de-link the trail from your boss/exchange, to the coins in your wallet.\nThe coin will have an anonymity set > 1, and typically will have a "
          ),
          _c("img", {
            staticClass: "shield",
            attrs: { src: "/ShieldGreen.png", alt: "green" }
          }),
          _vm._v(
            " shield.\nThis coin can now be spent without having to worry about your boss or the exchange tracking your behavior."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "However, when you mix a coin, there is often change.\nThis change is marked in a red "
          ),
          _c("code", [_vm._v("x")]),
          _vm._v(
            " and has an anonymity set = 1 (with a couple of small exceptions regarding remixing).\nThe change is completely linked to your coins before the mix, and so needs to be dealt with properly.\nIf you combine the tiny bit of change you received from your boss and from the exchange, they still know how much money you had (but not where you are spending it)."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "So the idea around clusters is to make it easier for users to follow the transaction graph.\nThe transaction graph is the history of where a coin has been, and is important if different histories need to be separated.\nFor example, if you buy coins anonymously in a P2P way, you should try to avoid mixing those coins with coins you got in a public way (donation, exchange, etc.)."
          )
        ])
      ]),
      _c(
        "details",
        {
          attrs: {
            id: "what-s-the-difference-between-send-and-build-transaction"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#what-s-the-difference-between-send-and-build-transaction",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "What's the difference between Send and Build Transaction?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("The only difference is that "),
            _c("code", [_vm._v("Build Transaction")]),
            _vm._v(
              " does not propagate the transaction, it simply builds it.\nIt works differently for watch-only and hardware wallets than normal wallets."
            )
          ]),
          _vm._v(" "),
          _c("p", [_vm._v("In summary:")]),
          _vm._v(" "),
          _c("table", [
            _c("thead", [
              _c("tr", [
                _c("th", { staticStyle: { "text-align": "center" } }, [
                  _vm._v(".")
                ]),
                _vm._v(" "),
                _c("th", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Hot wallet")
                ]),
                _vm._v(" "),
                _c("th", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Watch-only wallet")
                ]),
                _vm._v(" "),
                _c("th", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Hardware wallet")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tbody", [
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("Build tx")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab, Build tx tab")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab, Build tx tab")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab, Build tx tab")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("Sign tx")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab, Build tx tab")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("Broadcast tx")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Send tab")
                ])
              ])
            ])
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "why-wasabi-did-not-send-some-of-my-selected-coins" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#why-wasabi-did-not-send-some-of-my-selected-coins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("Why Wasabi did not send some of my selected coins?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Because they were not necessary for the transaction.\nWasabi Wallet will use only the necessary coins to make the transaction."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Example: If you select 10 coins with total value of 2 btc and you want to send 1 btc but the sum of 4 coins is enough to make the transaction, then Wasabi will use only those 4 coins."
            )
          ])
        ]
      ),
      _c("h2", { attrs: { id: "coinjoin" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#coinjoin" } },
          [_vm._v("#")]
        ),
        _vm._v(" CoinJoin")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/ypfZT9GlqTw/hqdefault.jpg)"
          },
          attrs: { "data-id": "ypfZT9GlqTw" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube ypfZT9GlqTw",
              "data-src":
                "https://www.youtube-nocookie.com/embed/ypfZT9GlqTw?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c(
        "details",
        { attrs: { id: "what-s-the-legal-status-of-wasabi-coinjoin" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-s-the-legal-status-of-wasabi-coinjoin",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("What's the legal status of Wasabi/CoinJoin?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "USA: On May 9, 2019, the Financial Crimes Enforcement Network (FinCEN) issued an interpretive guidance that stated the following in section 4.5.1(b):"
            )
          ]),
          _vm._v(" "),
          _c("blockquote", [
            _c("p", [
              _vm._v(
                'An anonymizing software provider is not a money transmitter. FinCEN regulations exempt from the definition of money transmitter those persons providing "the delivery, communication, or network access services used by a money transmitter to support money transmission services."'
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Wasabi is an Anonymizing software provider so it is not a money transmitter, thus not under Bank Secrecy Act (BSA) regulations.\nBasically we can continue to operate like now and it is compliant."
            )
          ]),
          _vm._v(" "),
          _c("p", [_vm._v("Here's a great explanation about it:")]),
          _vm._v(" "),
          _c(
            "div",
            {
              staticClass: "ytEmbed",
              staticStyle: {
                "background-image":
                  "url(https://img.youtube.com/vi/tLOMcU8MhWM/hqdefault.jpg)"
              },
              attrs: { "data-id": "tLOMcU8MhWM" }
            },
            [
              _c("iframe", {
                attrs: {
                  title: "YouTube tLOMcU8MhWM",
                  "data-src":
                    "https://www.youtube-nocookie.com/embed/tLOMcU8MhWM?start=1305&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                  frameborder: "0",
                  allow: "autoplay;encrypted-media;picture-in-picture",
                  allowfullscreen: ""
                }
              })
            ]
          )
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "why-aren-t-there-smaller-equal-denomination-outputs-like-0-05-btc"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#why-aren-t-there-smaller-equal-denomination-outputs-like-0-05-btc",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Why aren't there smaller equal denomination outputs like 0.05 BTC?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "There are many reasons for that.\nThe most prominent one may be DoS attack issues.\nIn fact ZeroLink's DoS protection have been designed with 1BTC in mind, not with 0.1BTC, so we may even have to elevate it if someone with sufficient resources would decide to go for DoS attacking Wasabi."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Everything in Bitcoin (and life) is about trade offs.\nWhen we build CoinJoin transactions on the Bitcoin Blockchain, remember that we always have to pay the miner fees.\nMiner fees are not dependent on the value of Bitcoin being transferred, rather, only on the size of the transaction in (v)bytes.\nSo that means constructing a CoinJoin with 0.1 BTC outputs, with 100 participants, and constructing a CoinJoin with 0.01 BTC Outputs with 100 participants will cost the same in terms of miner fees."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "So let's dig into the numbers a bit further.\nWhat does it cost (from the miner perspective) to participate in a CoinJoin? Well most users will provide 1 input, and 2 outputs (change + mixed UTXO) and we can calculate the vbytes like so:"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [_vm._v("1 * (68 vbytes) + 2 * (33 vbytes) = 134 vbytes")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "But it is important to note that many users provide 2 inputs (UTXOs) or even sometimes 3 or 4, so we should really put a multiplier of 1.5x on the inputs:"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v("1.5 * (68 vbytes) + 2 * (33 vbytes) = 168 vbytes")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Excellent, this is the Cost-per-participant of an equal-output CoinJoin.\nNow let's consider the variable miner fees in sat/vbyte that we might pay to get the CoinJoin mined within a reasonable time (<24 hours):"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Minimum: 2 sat/vbyte: 336 satoshis per participant\nAverage: 10 sat/vbyte: 1,680 satoshis per participant\nHigh: 100 sat/vbyte: 16,800 satoshis per participant"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "So now let's examine how much (as a percentage) users have to pay for different denominations of equal output coinjoins.\nWe will take the example of 1 BTC, 0.1 BTC (current setting) and 0.01 BTC (proposed):\nFirst 1 BTC:"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Minimum: 2 sat/vbyte: 336 satoshis per participant (0.000336 %)\nAverage: 10 sat/vbyte: 1,680 satoshis per participant (0.00168 %)\nHigh: 100 sat/vbyte: 16,800 satoshis per participant (0.0168 %)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Notice that for such a large amount, the miner, even in extreme cases only takes <0.02% (note this is not 2%!).\nLet's observe for 0.1 BTC:"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Minimum: 2 sat/vbyte: 336 satoshis per participant (0.00336 %)\nAverage: 10 sat/vbyte: 1,680 satoshis per participant (0.0168 %)\nHigh: 100 sat/vbyte: 16,800 satoshis per participant (0.168 %)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Here, we already observe that in some extreme cases, the miner is earning almost 0.2%!\nRecall that Wasabi has a coordinator fee that is capped at 0.3%, so in these extreme cases the total fee paid by the user (you) is closer to 0.5%.\nNow we proceed to go to a smaller denomination, 0.01 BTC:"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Minimum: 2 sat/vbyte: 336 satoshis per participant (0.0336 %)\nAverage: 10 sat/vbyte: 1,680 satoshis per participant (0.168 %)\nHigh: 100 sat/vbyte: 16,800 satoshis per participant (1.68 %)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Notice that in the average case, users are regularly paying almost 0.5% for CoinJoining, and only 60% of this is going to the Wasabi Coordinator.\nIn the extreme case, which simply cannot be overlooked as the network is volatile in terms of daily usage, the miner is earning 5.5x what Wasabi coordinator is charging, and the users are burdened with a 2% fee for CJ!\nThis is simply ridiculous!\nSo there you have it! Here is the trade-off with CJ output denominations and why it currently makes sense for 0.1 BTC, but not for much lower."
            )
          ])
        ]
      ),
      _c("details", { attrs: { id: "what-are-the-fees-for-the-coinjoin" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-are-the-fees-for-the-coinjoin",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What are the fees for the CoinJoin?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "You pay a coordinator fee of 0.003% * anonymity set.\nIf the anonymity set of a coin is 50 then you pay 0.003% * 50 (=0.15%).\nIf you set the target anonymity set to 53 then Wasabi will continue mixing until this is reached, so you may end up with an anonymity set of say 60, and you will pay 0.003% * 60 (=0.18%)."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "There are also edge cases where you do not pay the full coordinator fee or where you pay more.\nFor example if you're the smallest registrant to a round, you will never pay a coordinator fee.\nAlso when you are remixing and you cannot pay the full coordinator fee with your input, then you only pay as much as you have, but if the change amount leftover would be too small, then that is also added to the coordinator fee.\nCurrently the minimum change amount to be paid out is 0.7% of the base denomination (~0.1BTC.)"
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "It is also possible that you get more back from mixing than you put in.\nThis happens when network fees go down between the start of the round and its end.\nIn this case, the difference is split between the active outputs of the mix."
          )
        ])
      ]),
      _c("details", { attrs: { id: "what-is-the-anonymity-set" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-is-the-anonymity-set",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What is the anonymity set?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "The anonymity set is effectively the size of the group you are hiding in."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "If 3 people take part in a CoinJoin (with equal size inputs) and there are 3 outputs then each of those output coins has an anonymity set of 3."
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "language- extra-class" }, [
          _c("pre", { pre: true, attrs: { class: "language-text" } }, [
            _c("code", [
              _vm._v(
                "0.1 BTC (Alice)       0.1 BTC (Anon set 3)\n0.3 BTC (Bob)     ->  0.1 BTC (Anon set 3)\n0.4 BTC (Charlie)     0.1 BTC (Anon set 3)\n                      0.2 BTC (Change Coin Bob)\n                      0.3 BTC (Change Coin Charlie)\n"
              )
            ])
          ])
        ]),
        _c("p", [
          _vm._v(
            "There is no way to know which of the anon set output coins are owned by which of the input owners."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "All an observer knows is that a specific anon set output coin is owned by one of the owners of one of the input Coins i.e. 3 people - hence an anonymity set of 3."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Your Wasabi software has limited information on what the anonymity set should be, so the anonymity set that the software presents you is just an estimation, not an accurate value.\nWith Wasabi we are trying to do lower estimations, rather than higher ones."
          )
        ])
      ]),
      _c(
        "details",
        {
          attrs: {
            id: "what-are-the-equal-denominations-created-in-one-mixing-round"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#what-are-the-equal-denominations-created-in-one-mixing-round",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "What are the equal denominations created in one mixing round?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "In every CoinJoin round the minimum to register is roughly 0.1 BTC, you need to have at least this much to participate.\nWithin the same transaction, Wasabi also efficiently generates larger value zero link CoinJoin denominations.\nThey are 0.2, 0.4, 0.8, 1.6, 3.2, and so on...\nThe possible values of equal output that can be created are 0.1 x 2^n where n is a positive integer.\nThis is the mathematically most efficient way to get anonymity set for any amount you desire.\nFor example, with a 0.7 BTC input you would expect the following outputs: ~0.1, ~0.2, ~0.4 BTC."
            )
          ]),
          _vm._v(" "),
          _c(
            "div",
            {
              staticClass: "ytEmbed",
              staticStyle: {
                "background-image":
                  "url(https://img.youtube.com/vi/PKtxzSLPWFU/hqdefault.jpg)"
              },
              attrs: { "data-id": "PKtxzSLPWFU" }
            },
            [
              _c("iframe", {
                attrs: {
                  title: "YouTube PKtxzSLPWFU",
                  "data-src":
                    "https://www.youtube-nocookie.com/embed/PKtxzSLPWFU?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                  frameborder: "0",
                  allow: "autoplay;encrypted-media;picture-in-picture",
                  allowfullscreen: ""
                }
              })
            ]
          ),
          _vm._v(" "),
          _c(
            "div",
            {
              staticClass: "ytEmbed",
              staticStyle: {
                "background-image":
                  "url(https://img.youtube.com/vi/3Ezru07J674/hqdefault.jpg)"
              },
              attrs: { "data-id": "3Ezru07J674" }
            },
            [
              _c("iframe", {
                attrs: {
                  title: "YouTube 3Ezru07J674",
                  "data-src":
                    "https://www.youtube-nocookie.com/embed/3Ezru07J674?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                  frameborder: "0",
                  allow: "autoplay;encrypted-media;picture-in-picture",
                  allowfullscreen: ""
                }
              })
            ]
          )
        ]
      ),
      _c("details", { attrs: { id: "what-is-the-best-time-to-coinjoin" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-is-the-best-time-to-coinjoin",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What is the best time to CoinJoin?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "You can CoinJoin whenever you want.\nThat said, the ideal way to CoinJoin would be when:"
          )
        ]),
        _vm._v(" "),
        _c("ol", [
          _c("li", [
            _c("p", [
              _vm._v(
                "Mempool is clean.\nCoinJoins are unfairly cheap when the mempool is empty.\nRemember to take a look at websites like "
              ),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://jochen-hoenicke.de/queue/#0,24h",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [
                  _vm._v("Johoe's Bitcoin Mempool Statistics"),
                  _c("OutboundLink")
                ],
                1
              ),
              _vm._v(" or "),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://mempool.space/",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("mempool.space"), _c("OutboundLink")],
                1
              ),
              _vm._v(" to see mempool statistics in real time.")
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c(
              "p",
              [
                _vm._v(
                  "Your inputs are the same or little higher as the minimal denomination for the current round.\n"
                ),
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/using-wasabi/ChangeCoins.html#why-change-is-an-issue"
                    }
                  },
                  [_vm._v("Change is an issue")]
                ),
                _vm._v(
                  ".\nFor this reason, whenever possible it is recommended to CoinJoin with exactly the required denomination for the current round (roughly 0.1 BTC) to not get any change back."
                )
              ],
              1
            )
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _vm._v(
                "Mix at different times\nTo avoid traffic detection and behavioral analysis, you should CoinJoin at different times (days and hours)."
              )
            ])
          ])
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "why-are-the-denominations-such-an-odd-number" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#why-are-the-denominations-such-an-odd-number",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Why are the denominations such an odd number?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "The output value changes each round to ensure that you can enqueue a coin and have it remix (mix over and over again - increasing the anonymity set, improving privacy).\nAs a result the round mixing amount will often be a specific number which generally decreases as the rounds proceed, with a reset once a lower bound is reached."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "what-is-happening-in-the-input-registration-phase" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-is-happening-in-the-input-registration-phase",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("What is happening in the input registration phase?")
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "During this phase you have the opportunity to register coins that you want to mix in this round.\nYour Wasabi client connects to the coordinator server with a unique tor identity called Alice, and with it you send the input proofs, the clear-text change output, and the blinded anonset CoinJoin address.\nWhen all the proofs are valid, the coordinator signs the blinded output without knowing which address this is, and sends this back to Alice.\nSince the goal is to have 100 peers in one round, the "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to: "/using-wasabi/CoinJoin.html#input-registration"
                  }
                },
                [_vm._v("input registration phase")]
              ),
              _vm._v(
                " can take some time.\nBut regardless of how many participants, two hours after the last CoinJoin this phase is complete."
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id: "what-is-happening-in-the-connection-confirmation-phase"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#what-is-happening-in-the-connection-confirmation-phase",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("What is happening in the connection confirmation phase?")
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "Because the input registration phase can take up to two hours, the coordinator needs to ensure that everyone is still online and ready to continue.\nSo in the "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to: "/using-wasabi/CoinJoin.html#connection-confirmation"
                  }
                },
                [_vm._v("connection confirmation phase")]
              ),
              _vm._v(
                " every Alice sends a signal to the coordinator, and when all have checked in, this phase concludes."
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        { attrs: { id: "what-is-happening-in-the-output-registration-phase" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-is-happening-in-the-output-registration-phase",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("What is happening in the output registration phase?")
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "You use some secret parameters to unblind the blinded CoinJoin output to reveal the clear text address that still contains the signature of the coordinator.\nWasabi creates a new tor identity called Bob, and with it you send the unblinded anonset output together with the signature to the coordinator.\nThe coordinator can now verify his own signature, thus he knows that previously he has confirmed that Alice had all valid inputs.\nImmediately after that, Bob disconnects and the "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to: "/using-wasabi/CoinJoin.html#output-registration"
                  }
                },
                [_vm._v("output registration phase")]
              ),
              _vm._v(" is complete.")
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        { attrs: { id: "what-is-happening-in-the-signing-phase" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-is-happening-in-the-signing-phase",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("What is happening in the signing phase?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "After all Alices have registered their inputs and change outputs, and all Bobs their anonset outputs, the coordinator has all the information to build the CoinJoin transaction and include his fee output.\nThis raw transaction is sent to all Alices, each of them verifies the transaction is valid and then signs it.\nThe signature is sent back to the coordinator who accumulates all of them and builds the signed final CoinJoin transaction.\nThe "
              ),
              _c(
                "router-link",
                { attrs: { to: "/using-wasabi/CoinJoin.html#signing" } },
                [_vm._v("singing phase")]
              ),
              _vm._v(
                " is concluded when the coordinator receives all the signatures."
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        { attrs: { id: "what-is-happening-in-the-broadcasting-phase" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-is-happening-in-the-broadcasting-phase",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("What is happening in the broadcasting phase?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("In the "),
              _c(
                "router-link",
                { attrs: { to: "/using-wasabi/CoinJoin.html#broadcasting" } },
                [_vm._v("broadcasting phase")]
              ),
              _vm._v(
                " the coordinator sends the signed final CoinJoin transaction to several random Bitcoin peer to peer nodes, and it is gossiped throughout the network to the miners."
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "is-there-any-additional-anonymity-using-multiple-wallets-for-coinjoins"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#is-there-any-additional-anonymity-using-multiple-wallets-for-coinjoins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Is there any additional anonymity using multiple wallets for CoinJoins?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You'd gain 1 less anonymity set than if you'd only mix with one wallet (and Wasabi doesn't display that).\nOn the other hand, the systemic anonymity is slightly improved if a few people are mixing with multiple wallets, because that removes the certainty on this Blockchain analysis assumption."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id: "how-is-the-anonymity-set-target-determined-for-coinjoins"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-is-the-anonymity-set-target-determined-for-coinjoins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How is the anonymity set target determined for CoinJoins?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _c("code", [_vm._v("2*2 = 4")]),
            _vm._v(" and "),
            _c("code", [_vm._v("3*3 = 9")]),
            _vm._v(". "),
            _c("code", [_vm._v("2->3: 50% increase")]),
            _vm._v(", "),
            _c("code", [_vm._v("4->9:125%")]),
            _vm._v(
              " increase.\nSo remixing with larger anonsets is exponentially more effective than smaller anonsets.\nRegarding why do we want 100 number, is among some other reasons, because that was our calculation to be that would make rounds happen in every 2-5 minutes, considering the liquidity of some custodial mixers.\nRegarding DoS attack, right now our DoS configuration is set to be pretty permissive and this seems to be sufficient for the time being.\nIf a DoS attack would happen, Wasabi team would just harden it in the config file and would kick the bad actors out.\nNow if even that'd fail, then we can start thinking about lowering the required peers and also other methods."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "i-d-like-to-experience-coinjoin-but-i-m-not-comfortable-using-real-bitcoin-what-can-i-do"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#i-d-like-to-experience-coinjoin-but-i-m-not-comfortable-using-real-bitcoin-what-can-i-do",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "I'd like to experience CoinJoin but I'm not comfortable using real Bitcoin. What can I do?"
              )
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "You can try to make a CoinJoin via Wasabi on the Bitcoin "
              ),
              _c(
                "router-link",
                { attrs: { to: "/FAQ/FAQ-UseWasabi.html#what-is-testnet" } },
                [_vm._v("TestNet")]
              ),
              _vm._v(
                " (an alternative Bitcoin blockchain, to be used for testing).\nGo to "
              ),
              _c("code", [_vm._v("Settings")]),
              _vm._v(" and change the network to "),
              _c("code", [_vm._v("TestNet")]),
              _vm._v(".\nYou can get tBTC from faucets like:\n"),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://testnet-faucet.mempool.co/",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("testnet-faucet.mempool.co"), _c("OutboundLink")],
                1
              ),
              _vm._v("\nor\n"),
              _c(
                "a",
                {
                  attrs: {
                    href: "https://coinfaucet.eu/en/btc-testnet/",
                    target: "_blank",
                    rel: "noopener noreferrer"
                  }
                },
                [_vm._v("coinfaucet.eu/en/btc-testnet"), _c("OutboundLink")],
                1
              )
            ],
            1
          )
        ]
      ),
      _c(
        "details",
        { attrs: { id: "does-wasabi-have-to-stay-on-during-coinjoin" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#does-wasabi-have-to-stay-on-during-coinjoin",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Does Wasabi have to stay on during CoinJoin?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Yes, Wasabi needs to stay on during CoinJoins, you cannot be offline and still participate in CoinJoins."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "A CoinJoin transaction is different from a normal transaction, where you are the only person signing, and requires many people to sign "
            ),
            _c("strong", [_vm._v("the same transaction")]),
            _vm._v(
              ".\nUntil all the peers are here, no peer knows what transaction to sign."
            )
          ]),
          _vm._v(" "),
          _c("p", [_vm._v("Here is how Wasabi handles different scenarios:")]),
          _vm._v(" "),
          _c("table", [
            _c("thead", [
              _c("tr", [
                _c("th", { staticStyle: { "text-align": "center" } }),
                _vm._v(" "),
                _c(
                  "th",
                  { staticStyle: { "text-align": "center" } },
                  [
                    _vm._v("During "),
                    _c(
                      "router-link",
                      {
                        attrs: {
                          to:
                            "/FAQ/FAQ-UseWasabi.html#what-is-happening-in-the-input-registration-phase"
                        }
                      },
                      [_vm._v("input registration phase")]
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c("th", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("After input registration phase")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tbody", [
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("You close Wasabi")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("Your registered coins are automatically dequeued")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("Wasabi will make you wait until the round finishes")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v("Wasabi goes offline")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v(
                    "Your registered coins are automatically timed out by the coordinator after 1 minute"
                  )
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "center" } }, [
                  _vm._v(
                    "Your registered coins will be banned for 24h from participating in another CoinJoin. (This is to prevent "
                  ),
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "https://github.com/nopara73/ZeroLink/#d-dos-attack",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("DoS attacks"), _c("OutboundLink")],
                    1
                  ),
                  _vm._v(")")
                ])
              ])
            ])
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "what-if-there-s-a-power-outage-during-coinjoin-do-i-lose-my-coins"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#what-if-there-s-a-power-outage-during-coinjoin-do-i-lose-my-coins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "What if there's a power outage during CoinJoin? Do I lose my coins?"
              )
            ])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "No you don't.\nCoinJoins are atomic, they happen or they don't.\nIf your wallet crashes or your computer goes offline during CoinJoin you can simply register for a new CoinJoin, look at table "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/FAQ/FAQ-UseWasabi.html#does-wasabi-have-to-stay-on-during-coinjoin"
                  }
                },
                [_vm._v("here")]
              ),
              _vm._v(" for more info.")
            ],
            1
          )
        ]
      ),
      _c("details", { attrs: { id: "how-much-anonymity-set-do-i-need" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-much-anonymity-set-do-i-need",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How much anonymity set do I need?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "It is commonly said that an anonymity set of 50 is sufficient to evade blockchain forensics analysis.\nAt least one round to re-mix your coins can increase your privacy drastically.\nWith Wasabi this can be achieved in a matter of hours (or minutes if there are a lot of users)."
          )
        ])
      ]),
      _c("details", { attrs: { id: "how-many-rounds-should-i-coinjoin" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-many-rounds-should-i-coinjoin",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How many rounds should I CoinJoin?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "There is no simple answer for this.\nIf you want more anonymity you should CoinJoin multiple times."
          )
        ])
      ]),
      _c(
        "details",
        {
          attrs: {
            id: "are-coins-automatically-requeued-after-the-round-is-complete"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#are-coins-automatically-requeued-after-the-round-is-complete",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Are coins automatically requeued after the round is complete?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Yes they are, based on the anonymity set target.\nIf the coins' anonymity sets are below the specified target after a round is complete, then the coins are requeued automatically for the next round.\nBut when the anonymity sets are above the target after a round, then the coins will no longer be registered automatically.\nHowever, you can manually enqueue them for a new round at any time."
            )
          ])
        ]
      ),
      _c("details", { attrs: { id: "how-can-i-select-utxos-for-coinjoin" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-can-i-select-utxos-for-coinjoin",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How can I select UTXOs for CoinJoin?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("You need to go to "),
          _c("code", [_vm._v("CoinJoin")]),
          _vm._v(
            " tab and select your desired UTXO by clicking the checkbox.\nIt will be queued and registered for the next CoinJoin round."
          )
        ])
      ]),
      _c(
        "details",
        {
          attrs: {
            id:
              "how-does-my-wallet-communicate-with-the-wasabi-coordinator-server"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-does-my-wallet-communicate-with-the-wasabi-coordinator-server",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How does my wallet communicate with the Wasabi coordinator server?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Wasabi communicates in many ways to the coordinator server, and it is always over the tor network."
            )
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("First of all, Wasabi uses "),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-158-compact-block-filters-for-light-clients"
                  }
                },
                [_vm._v("BIP 158 block filters")]
              ),
              _vm._v(
                " to ensure network level privacy.\nYou can follow these FAQs to have a full explanation on the theme:"
              )
            ],
            1
          ),
          _vm._v(" "),
          _c("ul", [
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-UseWasabi.html#what-are-bip-158-block-filters"
                    }
                  },
                  [_vm._v("What are BIP-158 Block Filters?")]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-Introduction.html#what-software-supplies-the-block-filters-that-wasabi-uses"
                    }
                  },
                  [
                    _vm._v(
                      "What software supplies the block filters that Wasabi uses?"
                    )
                  ]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-Introduction.html#can-the-coordinator-attack-me"
                    }
                  },
                  [_vm._v("Can the coordinator attack me?")]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-Introduction.html#is-the-backend-s-coordinator-code-open-source"
                    }
                  },
                  [_vm._v("Is the backend's coordinator code open source?")]
                )
              ],
              1
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Then, there are five different phases in a CoinJoin.\nYou can follow these links to have a full explanation on that:"
            )
          ]),
          _vm._v(" "),
          _c("ol", [
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-UseWasabi.html#what-is-happening-in-the-input-registration-phase"
                    }
                  },
                  [_vm._v("INPUT REGISTRATION PHASE")]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-UseWasabi.html#what-is-happening-in-the-connection-confirmation-phase"
                    }
                  },
                  [_vm._v("CONNECTION CONFIRMATION PHASE")]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-UseWasabi.html#what-is-happening-in-the-output-registration-phase"
                    }
                  },
                  [_vm._v("OUTPUT REGISTRATION PHASE")]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-UseWasabi.html#what-is-happening-in-the-signing-phase"
                    }
                  },
                  [_vm._v("SIGNING PHASE")]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "li",
              [
                _c(
                  "router-link",
                  {
                    attrs: {
                      to:
                        "/FAQ/FAQ-UseWasabi.html#what-is-happening-in-the-broadcasting-phase"
                    }
                  },
                  [_vm._v("BROADCASTING PHASE")]
                )
              ],
              1
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You also get information about the current mempool for fee estimation as well as the fiat exchange rate."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-long-does-it-take-to-mix-my-coins" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-long-does-it-take-to-mix-my-coins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How long does it take to mix my coins?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "It depends on many things, the longest period is the wait for all peers to register their coins.\nFirst of all from your desired anonymity set, every round has a goal of 100 anonymity set.\nWasabi is developed in a way that there's a round at least once every two hours.\nIf the 100 peers registered earlier, then there can be many rounds per hour.\nWhen all peers are registered, then the signing phase is done within a couple of seconds."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Summing up: the faster peers register in the CoinJoins, the faster the mixes are."
            )
          ])
        ]
      ),
      _c("details", { attrs: { id: "what-is-the-coordinator-address" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-is-the-coordinator-address",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What is the coordinator address?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "The coordinator gets paid in every CoinJoin.\nAnd for transparency reasons, the same coordinator address is used."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("The current address used by the Wasabi coordinator is "),
          _c("code", [_vm._v("bc1qa24tsgchvuxsaccp8vrnkfd85hrcpafg20kmjw")]),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("p", [_vm._v("Old addresses:")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("code", [_vm._v("bc1qs604c7jv6amk4cxqlnvuxv26hv3e48cds4m0ew")])
          ])
        ])
      ]),
      _c(
        "details",
        {
          attrs: {
            id:
              "what-is-the-maximum-number-of-coins-that-can-be-registered-in-a-coinjoin"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#what-is-the-maximum-number-of-coins-that-can-be-registered-in-a-coinjoin",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "What is the maximum number of coins that can be registered in a CoinJoin?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Wasabi Wallet will register only up to 7 coins in a CoinJoin."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: { id: "why-wasabi-did-not-register-some-of-my-enqueued-coins" }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#why-wasabi-did-not-register-some-of-my-enqueued-coins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("Why Wasabi did not register some of my enqueued coins?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Because they were not necessary for the CoinJoin.\nWasabi Wallet will use only the necessary coins to CoinJoin (up to 7 coins)."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Example: If you select 10 coins with total value of 0.2 btc but the sum of 4 coins is enough to CoinJoin, then Wasabi will use only those 4 coins."
            )
          ])
        ]
      ),
      _c("h2", { attrs: { id: "hardware-wallet" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#hardware-wallet" } },
          [_vm._v("#")]
        ),
        _vm._v(" Hardware Wallet")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/aU8ysH9JH9M/hqdefault.jpg)"
          },
          attrs: { "data-id": "aU8ysH9JH9M" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube aU8ysH9JH9M",
              "data-src":
                "https://www.youtube-nocookie.com/embed/aU8ysH9JH9M?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/kocEpndQcsg/hqdefault.jpg)"
          },
          attrs: { "data-id": "kocEpndQcsg" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube kocEpndQcsg",
              "data-src":
                "https://www.youtube-nocookie.com/embed/kocEpndQcsg?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/sM2uhyROpAQ/hqdefault.jpg)"
          },
          attrs: { "data-id": "sM2uhyROpAQ" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube sM2uhyROpAQ",
              "data-src":
                "https://www.youtube-nocookie.com/embed/sM2uhyROpAQ?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c(
        "details",
        { attrs: { id: "what-hardware-wallets-does-wasabi-support" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#what-hardware-wallets-does-wasabi-support",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("What hardware wallets does Wasabi support?")])
          ]),
          _vm._v(" "),
          _c("p", [_vm._v("The answer is simple:")]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block tip" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
            _vm._v(" "),
            _c("p", [_vm._v("All of them!")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "This is thanks to awesome Hardware Wallet Interface of Bitcoin core."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "However, not all of the many hardware wallets have been tested and reviewed by the developers.\nEverything seems to work fine with the ColdCard, BitBox, Trezor, Ledger and KeepKey."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "why-does-wasabi-use-the-hardware-wallet-interface" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#why-does-wasabi-use-the-hardware-wallet-interface",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("Why does Wasabi use the Hardware Wallet Interface?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("Wasabi uses the "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/bitcoin-core/HWI",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [
                _vm._v("Bitcoin Core Hardware Wallet Interface [HWI]"),
                _c("OutboundLink")
              ],
              1
            ),
            _vm._v(
              ", a python library tool for proper integration of off-line signing devices.\nIt provides a standard way for any software wallet to communicate with any hardware wallet without needing any device specific drivers.\nHWI was developed and carefully reviewed over several years, with outstanding contributions by especially "
            ),
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/achow101",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Andrew Chow"), _c("OutboundLink")],
              1
            ),
            _vm._v(
              ".\nWasabi implements C# code that executes the HWI tool.\nWasabi uses this powerful tool because there are no other dependencies necessary to support all the existing and future hardware wallets."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id: "how-can-i-generate-a-wasabi-skeleton-wallet-file-in-coldcard"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-can-i-generate-a-wasabi-skeleton-wallet-file-in-coldcard",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How can I generate a Wasabi skeleton wallet file in ColdCard?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("On the ColdCard (Mk2, firmware 2.1.1 and up) you go to "),
            _c("code", [_vm._v(">Advanced>MicrcoSD Card>Wasabi Wallet")]),
            _vm._v(
              " and it will save a skeleton json-file to the MicroSD card in the hardware wallet."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-can-i-import-the-wasabi-skeleton-wallet-file" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-import-the-wasabi-skeleton-wallet-file",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I import the Wasabi skeleton wallet file?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Take the MicroSD card from the ColdCard and plug it in the computer with the Wasabi Wallet software.\nIn Wasabi Wallet go to the Wallet Manager, select Hardware Wallet option and in the bottom right corner click "
            ),
            _c("code", [_vm._v("Import Coldcard")]),
            _vm._v(
              ".\nNow select the Wasabi skeleton json-file from the MicroSD card, if this fails you can manually enter the file location in Wasabi Wallet window and load the file."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id: "how-can-i-generate-a-receiving-address-of-my-hardware-wallet"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-can-i-generate-a-receiving-address-of-my-hardware-wallet",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How can I generate a receiving address of my hardware wallet?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "In Wasabi Wallet you load your previously imported wallet (from Wasabi skeleton, or USB detection) and go to the "
            ),
            _c("code", [_vm._v("Receive")]),
            _vm._v(
              " tab, here you enter a label for the observers of the incoming transaction and click "
            ),
            _c("code", [_vm._v("Generate Receive Address")]),
            _vm._v(
              ".\nIn the tab below the newly generated receive address can be viewed / copied."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "how-can-i-sign-a-transaction-with-a-usb-connected-hardware-wallet"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-can-i-sign-a-transaction-with-a-usb-connected-hardware-wallet",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How can I sign a transaction with a USB connected hardware wallet?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "To send a transaction you will need to connect your Hardware wallet and unlock the device (using PIN or password), in Wasabi Wallet you go to the "
            ),
            _c("code", [_vm._v("Send")]),
            _vm._v(
              " tab where you can specify the address to send to, amount of bitcoin to send and which coins to use as input (only use green/private coins here!).\nAfter filling in all transaction details you click "
            ),
            _c("code", [_vm._v("Send Transaction")]),
            _vm._v(
              " to sign it with the connected hardware wallet and broadcast on the network."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: { id: "how-can-i-build-and-export-a-transaction-to-coldcard" }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-build-and-export-a-transaction-to-coldcard",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I build and export a transaction to ColdCard?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "In the Wallet Explorer on the right side of the GUI, select "
            ),
            _c("code", [_vm._v("YourWallet>Advanced>Build Transaction")]),
            _vm._v(".\nThis brings up the "),
            _c("code", [_vm._v("Build Transaction")]),
            _vm._v(
              " tab where you can specify the address, amount of bitcoin and coins to use.\nThen by clicking "
            ),
            _c("code", [_vm._v("Build Transaction")]),
            _vm._v(
              " a new tab will open containing the raw transaction data, here you click "
            ),
            _c("code", [_vm._v("Export Binary PSBT")]),
            _vm._v(
              " to save the partially signed bitcoin transaction (PSBT) to a file.\nThis file should be moved to the MicroSD card that you can then insert in the ColdCard for manual verification and signing."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-can-i-sign-a-transaction-on-the-coldcard" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-sign-a-transaction-on-the-coldcard",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How can I sign a transaction on the ColdCard?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "On the ColdCard (Mk2, firmware 2.1.1 and up) you enter the PIN code to unlock the hardware wallet and press "
            ),
            _c("code", [_vm._v(">Ready To Sign")]),
            _vm._v(
              " with the MicroSD card containing the previously generated transaction or PSBT-file.\nVerify the address and amount and the ColdCard will then create a signed.psbt and final.txn file on the MicroSD card.\nThe finalized transaction (xxx-final.txn) can now be broadcast by Wasabi Wallet or even a radio or satellite dish if someone is listening!"
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "how-can-i-import-and-broadcast-a-final-transaction-from-coldcard"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-can-i-import-and-broadcast-a-final-transaction-from-coldcard",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "How can I import and broadcast a final transaction from ColdCard?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("In the Wallet Explorer you go to "),
            _c("code", [_vm._v("YourWallet>Advanced>Broadcast Transaction")]),
            _vm._v(" and click "),
            _c("code", [_vm._v("Import Transaction")]),
            _vm._v(
              ", now you can select the previously finalized (and signed) transaction file from the MicroSD card.\nIf this fails you can manually type the path to this file in Wasabi Wallet to load the transaction.\nNow click "
            ),
            _c("code", [_vm._v("Broadcast Transaction")]),
            _vm._v(
              " to send it off over Tor to a random Bitcoin node so it can flood over to the miners for confirmation in a block."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "can-i-coinjoin-bitcoins-on-my-hardware-wallet" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#can-i-coinjoin-bitcoins-on-my-hardware-wallet",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Can I CoinJoin bitcoins on my hardware wallet?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You can't do that directly, you have to send the bitcoins (in small portions > 0.1 BTC if needed) to a "
            ),
            _c("code", [_vm._v("hot")]),
            _vm._v(
              " Wasabi Wallet, do the CoinJoin and then send them back to a new address on the Hardware wallet for cold-storage."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "does-ledger-live-server-spy-on-my-xpub" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#does-ledger-live-server-spy-on-my-xpub",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Does Ledger Live server spy on my xpub?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Yes, when using the Ledger Live software wallet to manage your coins, you send your extended public key to the Ledger company server.\nWith this information they know exactly how many bitcoins you have and in what transactions you spend them.\nTo avoid that you can use a Ledger hardware in combination with Wasabi as software interface, and because Wasabi does not leak your xpub, your transaction history is not shared with anyone.\nMake sure you are generating a completely new wallet with a new seed phrase backup so that the compromised old wallet is no longer an issue.\nYou can also go into the Settings of your Ledger and create a PIN-specific passphrase."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("To create a new Ledger Wallet "),
            _c("em", [_vm._v("offline")]),
            _vm._v(
              " and make sure that your newly created wallet doesn't leak any information to Ledger's servers you must not use Ledger Live (neither to configure it for the first time, nor to use it).\nAfter that, you can use the wallet in combination with Wasabi without having concerns about your privacy!"
            )
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "custom-block warning" }, [
            _c("p", { staticClass: "custom-block-title" }, [_vm._v("WARNING")]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "You still need Ledger Live app to update the firmware of your Ledger hardware wallet.\nBy not using Ledger Live, you seriously jeopardize the safety of your funds.\nPlease consider this carefully before making a decision."
              )
            ])
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "after-i-coinjoined-my-coins-and-reached-green-anonset-i-sent-them-to-my-hardware-wallet-address-when-i-check-my-hw-via-wasabi-the-coins-are-now-red-why"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#after-i-coinjoined-my-coins-and-reached-green-anonset-i-sent-them-to-my-hardware-wallet-address-when-i-check-my-hw-via-wasabi-the-coins-are-now-red-why",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "After I CoinJoined my coins and reached green anonset, I sent them to my hardware wallet address. When I check my HW via Wasabi, the coins are now red. Why?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [_vm._v("Everything is working as expected.")]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "The anonymity set info (number) is tied to your wallet that you used to CoinJoin, if you send a mixed coin to another Wasabi Wallet of yours (hardware wallet or normal wallet) it will have an anonymity set 1 (red) because this wallet doesn't know that the coin was coinjoined."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              'You should put a meaningful label when you generate a receive address in your hardware wallet, e.g. "coinjoined utxo with anonymity set 70" (something that reminds you that you got this utxo from your Wasabi Wallet and it was coinjoined).'
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-can-i-enter-the-pin-of-my-trezor-one" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-enter-the-pin-of-my-trezor-one",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How can I enter the PIN of my Trezor One?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You can enter the PIN to unlock your Trezor One the same way you use the Trezor browser wallet.\nAs soon as you plug in the Trezor One in your laptop and open Wasabi, it will show 9 empty buttons, and on the Trezor One screen you will see 9 boxes with numbers in random order.\nInside Wasabi, click on the boxes that correspond to your PIN in the order shown on the Trezor One screen."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-can-i-type-in-the-passphrase-of-my-trezor-one" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-type-in-the-passphrase-of-my-trezor-one",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I type in the passphrase of my Trezor One?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "The Trezor One was a pioneer in offline signing devices, however it has one critical design flaw.\nIt requires to use the hot computer to input some data, like the PIN or passphrase.\nThis is contrary to the threat model of offline signing devices where the hot computer should not be trusted.\nWasabi does support the empty button PIN input field, as this is secure to use on the hot wallet.\nHowever, Wasabi does not support to use the hot computer keyboard to type in the passphrase."
            )
          ])
        ]
      ),
      _c(
        "details",
        { attrs: { id: "how-can-i-type-in-the-passphrase-of-my-trezor-t" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-type-in-the-passphrase-of-my-trezor-t",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I type in the passphrase of my Trezor T?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "After connecting the Trezor T to your computer and upon trying to load your wallet, you get a message on the Trezor T to choose where to type your passphrase, on the device or the host (computer), choose the first option (device) then enter the passprase using the touchscreen of your Trezor T.\nWasabi wallet will now load this passphrase protected wallet."
            )
          ])
        ]
      ),
      _c("h2", { attrs: { id: "history" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#history" } }, [
          _vm._v("#")
        ]),
        _vm._v(" History")
      ]),
      _vm._v(" "),
      _c(
        "details",
        { attrs: { id: "how-can-i-check-the-transactions-history" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-can-i-check-the-transactions-history",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How can I check the transactions history?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v("In the "),
            _c("code", [_vm._v("History")]),
            _vm._v(
              " tab you see a list of all the transactions made with this Wasabi wallet.\nIt includes the value being sent out of the wallet, meaning the payment to an external address and the fee.\nIf the number is red, then you have sent sats out of the wallet - if the number is green, then you have received and stacked sats.\nA CoinJoin is a payment within the same wallet, thus it only shows the coordination and mining fee leaving the wallet.\nYou also have a list of all the transaction identification numbers for detailed reference.\nThe check mark indicates that the transaction is confirmed in the longest proof-of-work timechain."
            )
          ]),
          _vm._v(" "),
          _c("p", [_c("img", { attrs: { src: "/History.png", alt: "" } })])
        ]
      ),
      _c("details", { attrs: { id: "can-i-export-a-list-of-transactions" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-i-export-a-list-of-transactions",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Can I export a list of transactions?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "There is currently no convenient way to export a list with transaction details.\nHowever, you can see the "
            ),
            _c("code", [_vm._v("wallet.json")]),
            _vm._v(" files inside the "),
            _c("code", [_vm._v("WalletBackups")]),
            _vm._v(" folder (you can find it in your "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/FAQ/FAQ-UseWasabi.html#where-can-i-find-the-wasabi-data-folder"
                }
              },
              [_vm._v("Wasabi data folder")]
            ),
            _vm._v(") which contains all the public keys, labels and anonset.")
          ],
          1
        )
      ]),
      _c("h2", { attrs: { id: "settings" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#settings" } },
          [_vm._v("#")]
        ),
        _vm._v(" Settings")
      ]),
      _vm._v(" "),
      _c("details", { attrs: { id: "what-is-testnet" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#what-is-testnet", "aria-hidden": "true" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What is Testnet?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "The testnet is an alternative Bitcoin blockchain, to be used for testing.\nTestnet coins (tBTC) are separate and distinct from actual bitcoins, and are never supposed to have any value.\nThis allows application developers or bitcoin testers to experiment, without having to use real bitcoins or worrying about breaking the main bitcoin chain.\nYou can try to make a "
            ),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/FAQ/FAQ-UseWasabi.html#i-d-like-to-experience-coinjoin-but-i-m-not-comfortable-using-real-bitcoin-what-can-i-do"
                }
              },
              [_vm._v("CoinJoin with Wasabi on the Bitcoin TestNet")]
            ),
            _vm._v(" without being afraid of losing 'real' bitcoins.")
          ],
          1
        ),
        _vm._v(" "),
        _c("p", [
          _vm._v("You can get tBTC from faucets like:\n"),
          _c(
            "a",
            {
              attrs: {
                href: "https://testnet-faucet.mempool.co/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("testnet-faucet.mempool.co"), _c("OutboundLink")],
            1
          ),
          _vm._v("\nor\n"),
          _c(
            "a",
            {
              attrs: {
                href: "https://coinfaucet.eu/en/btc-testnet/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("coinfaucet.eu/en/btc-testnet"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            'There have been three generations of testnet.\nTestnet2 was just the first testnet reset with a different genesis block, because people were starting to trade testnet coins for real money.\nTestnet3 is the current test network.\nIt was introduced with the 0.7 release, introduced a third genesis block, a new rule to avoid the "difficulty was too high, is now too low, and transactions take too long to verify" problem, and contains blocks with edge-case transactions designed to test implementation compatibility.'
          )
        ])
      ]),
      _c(
        "details",
        { attrs: { id: "how-do-i-connect-my-own-full-node-to-wasabi" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#how-do-i-connect-my-own-full-node-to-wasabi",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("How do I connect my own full node to Wasabi?")])
          ]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v(
                "There is currently a basic implementation of connecting your full node to Wasabi.\nThe server will still send you "
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-158-compact-block-filters-for-light-clients"
                  }
                },
                [_vm._v("BIP 158 block filters")]
              ),
              _vm._v(
                ", and when you realize that a block contains a transaction of yours, then you pull this block from your own full node, instead of a random P2P node, thus you can verify that this is actually a valid block including your transaction.\nOne attack vector could be that Wasabi lies to you and gives you wrong filters that exclude your transaction, thus you would see in the wallet less coins than you actually control.\n"
              ),
              _c(
                "router-link",
                {
                  attrs: {
                    to:
                      "/using-wasabi/BIPs.html#bip-157-client-side-block-filtering"
                  }
                },
                [_vm._v("BIP 157 solves this")]
              ),
              _vm._v(".")
            ],
            1
          ),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "When your full node is on the same hardware [computer, laptop] as your Wasabi Wallet, it will automatically recognize it and pull blocks from there.\nIf your node is on a remote device [raspberry pi, nodl, server], then you can specify your local IP in the "
            ),
            _c("code", [_vm._v("Settings")]),
            _vm._v(" tab, or in line 11 of the config file.")
          ]),
          _vm._v(" "),
          _c(
            "div",
            {
              staticClass: "ytEmbed",
              staticStyle: {
                "background-image":
                  "url(https://img.youtube.com/vi/gWo2RAkIVrE/hqdefault.jpg)"
              },
              attrs: { "data-id": "gWo2RAkIVrE" }
            },
            [
              _c("iframe", {
                attrs: {
                  title: "YouTube gWo2RAkIVrE",
                  "data-src":
                    "https://www.youtube-nocookie.com/embed/gWo2RAkIVrE?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                  frameborder: "0",
                  allow: "autoplay;encrypted-media;picture-in-picture",
                  allowfullscreen: ""
                }
              })
            ]
          )
        ]
      ),
      _c("details", { attrs: { id: "how-can-i-turn-off-tor" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#how-can-i-turn-off-tor", "aria-hidden": "true" }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How can I turn off Tor?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "You can turn off Tor in the Settings.\nNote that in this case you are still private, except when you CoinJoin and when you broadcast a transaction.\nIn the first case, the coordinator would know the links between your inputs and outputs based on your IP address.\nIn the second case, if you happen to broadcast a transaction of yours to a full node that is spying on you, it will know the link between your transaction and your IP address."
          )
        ])
      ]),
      _c("details", { attrs: { id: "how-can-i-change-the-anonset-target" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-can-i-change-the-anonset-target",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How can I change the anonset target?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("In the "),
          _c("code", [_vm._v("Settings")]),
          _vm._v(" tab at the bottom you can change the three "),
          _c("code", [_vm._v("PrivacyLevelX")]),
          _vm._v(" values of the desired anon set of the\n"),
          _c("img", {
            staticClass: "shield",
            attrs: { src: "/ShieldYellow.png", alt: "yellow" }
          }),
          _vm._v(",\n"),
          _c("img", {
            staticClass: "shield",
            attrs: { src: "/ShieldGreen.png", alt: "green" }
          }),
          _vm._v(" and\n"),
          _c("img", {
            staticClass: "shield",
            attrs: { src: "/ShieldCheckmark.png", alt: "checkmark" }
          }),
          _vm._v("\nshield button in the GUI.\nThe "),
          _c("code", [_vm._v("MixUntilAnonymitySet")]),
          _vm._v(" is the last selected value from previous use.")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Alternatively, open the config file from the wallet GUI, go to "
          ),
          _c("code", [_vm._v("File")]),
          _vm._v(">"),
          _c("code", [_vm._v("Open")]),
          _vm._v(">"),
          _c("code", [_vm._v("Config File")]),
          _vm._v(" and in the last 4 lines you see:")
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "language-json extra-class" }, [
          _c("pre", { pre: true, attrs: { class: "language-json" } }, [
            _c("code", [
              _c("span", { pre: true, attrs: { class: "token property" } }, [
                _vm._v('"MixUntilAnonymitySet"')
              ]),
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v(":")
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token number" } }, [
                _vm._v("50")
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v("\n"),
              _c("span", { pre: true, attrs: { class: "token property" } }, [
                _vm._v('"PrivacyLevelSome"')
              ]),
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v(":")
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token number" } }, [
                _vm._v("2")
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v("\n"),
              _c("span", { pre: true, attrs: { class: "token property" } }, [
                _vm._v('"PrivacyLevelFine"')
              ]),
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v(":")
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token number" } }, [
                _vm._v("21")
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v("\n"),
              _c("span", { pre: true, attrs: { class: "token property" } }, [
                _vm._v('"PrivacyLevelStrong"')
              ]),
              _c("span", { pre: true, attrs: { class: "token operator" } }, [
                _vm._v(":")
              ]),
              _vm._v(" "),
              _c("span", { pre: true, attrs: { class: "token number" } }, [
                _vm._v("50")
              ]),
              _vm._v("\n")
            ])
          ])
        ]),
        _c("p", [
          _vm._v(
            "Remember that you pay a fee proportional to the Anonymity Set."
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "ytEmbed",
            staticStyle: {
              "background-image":
                "url(https://img.youtube.com/vi/gWo2RAkIVrE/hqdefault.jpg)"
            },
            attrs: { "data-id": "gWo2RAkIVrE" }
          },
          [
            _c("iframe", {
              attrs: {
                title: "YouTube gWo2RAkIVrE",
                "data-src":
                  "https://www.youtube-nocookie.com/embed/gWo2RAkIVrE?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                frameborder: "0",
                allow: "autoplay;encrypted-media;picture-in-picture",
                allowfullscreen: ""
              }
            })
          ]
        )
      ]),
      _c("details", { attrs: { id: "what-is-the-dust-threshold" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-is-the-dust-threshold",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What is the dust threshold?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Dust can mean "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://bitcoin.stackexchange.com/questions/10986/what-is-meant-by-bitcoin-dust",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("a lot of things"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", depending how you look at it.\nIt can be non economical inputs, that is a UTXO that has less value than the fees it would cost to spend this coin.\nA dust attack is actually about "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://en.bitcoin.it/Privacy#Forced_address_reuse",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("forced address reuse"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            ", the malicious actor sends very small amounts into old addresses and consolidation of these dust UTXOs can link several coins in a wallet cluster."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Specifically in the context of Wasabi, with the dust threshold settings you can limit the value of coins shown in the GUI.\nWhen you set it to "
          ),
          _c("code", [_vm._v("0.0000 5000 bitcoin")]),
          _vm._v(", and when you receive a coin worth "),
          _c("code", [_vm._v("0.0000 4000 bitcoin")]),
          _vm._v(", then this coin will not be shown in the coin list.")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("img", { attrs: { src: "/SettingsDustThreshold.png", alt: "" } })
        ])
      ]),
      _c("details", { attrs: { id: "where-can-i-find-the-logs" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#where-can-i-find-the-logs",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Where can I find the logs?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("In the top left menu "),
          _c("code", [_vm._v("File > Open")]),
          _vm._v(" you can see there are several logs available.")
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _vm._v("The "),
            _c("code", [_vm._v("Log File")]),
            _vm._v(" shows you the general information about Wasabi Wallet.")
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v("The "),
            _c("code", [_vm._v("Tor Log File")]),
            _vm._v(" shows the Tor specific logs.")
          ])
        ]),
        _vm._v(" "),
        _c("p", [_c("img", { attrs: { src: "/MenuFileOpen.png", alt: "" } })]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("Alternatively, you can find the logs inside your "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/FAQ/FAQ-UseWasabi.html#where-can-i-find-the-wasabi-data-folder"
                }
              },
              [_vm._v("Wasabi data folder")]
            )
          ],
          1
        )
      ]),
      _c("details", { attrs: { id: "how-to-activate-lurking-wife-mode" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-to-activate-lurking-wife-mode",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How to activate Lurking Wife Mode?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("You can activate Lurking Wife Mode from "),
            _c("code", [_vm._v("Settings")]),
            _vm._v(
              " or by clicking on your wallet balance.\nYou can read more about Lurking Wife Mode "
            ),
            _c(
              "router-link",
              { attrs: { to: "/using-wasabi/LurkingWifeMode.html" } },
              [_vm._v("here")]
            ),
            _vm._v(".")
          ],
          1
        )
      ]),
      _c("details", { attrs: { id: "how-can-i-change-to-the-white-theme" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-can-i-change-to-the-white-theme",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How can I change to the white theme?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "You can change from the default dark to the white theme in the "
            ),
            _c("code", [_vm._v(".walletwasabi/client/Gui/Settings/")]),
            _vm._v(" "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/FAQ/FAQ-UseWasabi.html#where-can-i-find-the-wasabi-data-folder"
                }
              },
              [_vm._v("data folder")]
            ),
            _vm._v(".\nOpen the "),
            _c("code", [_vm._v("GlobalSettings.json")]),
            _vm._v(" file and change the line from "),
            _c("code", [_vm._v('"theme": "Visual Studio Dark"')]),
            _vm._v(" to "),
            _c("code", [_vm._v('"theme": "Visual Studio Light"')]),
            _vm._v(
              ".\nSave the file and restart Wasabi.\nPlease note that Wasabi is designed for the dark theme, and some color schemes might not look beautiful in the white mode."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("p", [_c("img", { attrs: { src: "/WhiteMode.png", alt: "" } })])
      ]),
      _c("h2", { attrs: { id: "coin-control-best-practices" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#coin-control-best-practices" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Coin Control Best Practices")
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/iyJ81JRvLQk/hqdefault.jpg)"
          },
          attrs: { "data-id": "iyJ81JRvLQk" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube iyJ81JRvLQk",
              "data-src":
                "https://www.youtube-nocookie.com/embed/iyJ81JRvLQk?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "ytEmbed",
          staticStyle: {
            "background-image":
              "url(https://img.youtube.com/vi/k4VzJ6dUT9I/hqdefault.jpg)"
          },
          attrs: { "data-id": "k4VzJ6dUT9I" }
        },
        [
          _c("iframe", {
            attrs: {
              title: "YouTube k4VzJ6dUT9I",
              "data-src":
                "https://www.youtube-nocookie.com/embed/k4VzJ6dUT9I?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
              frameborder: "0",
              allow: "autoplay;encrypted-media;picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      ),
      _vm._v(" "),
      _c("details", { attrs: { id: "can-i-consolidate-anonset-coins" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-i-consolidate-anonset-coins",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("Can I consolidate anonset coins?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "It is advisable to limit the recombining of mixed coins because it can only decrease the privacy of said coins.\nThis links all the consolidated UTXOs in one transaction, creating only one output, which then clearly controls all these funds.\nThat said, if you combine less than 1 BTC it is less likely to reveal your pre-CoinJoin transaction history.\nThe potential issue comes when you spend that coin.\nDepending on what you do with the coin you might reduce the privacy of the resulting change (if you send half your coin to an exchange for example, as they will know that you own the coin change).\nAs a result it is best not to recombine ALL your mixed change, though you may wish to recombine some coins if you are planning on hodling for many years as this will reduce the fees required to spend the coins later."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "If you would like to dive into the details of this topic, you can "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://old.reddit.com/r/WasabiWallet/comments/avxbjy/combining_mixed_coins_privacy_megathread/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("read more here"), _c("OutboundLink")],
            1
          ),
          _vm._v(" and see more here:")
        ]),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "ytEmbed",
            staticStyle: {
              "background-image":
                "url(https://img.youtube.com/vi/Tk8-N1kHa4g/hqdefault.jpg)"
            },
            attrs: { "data-id": "Tk8-N1kHa4g" }
          },
          [
            _c("iframe", {
              attrs: {
                title: "YouTube Tk8-N1kHa4g",
                "data-src":
                  "https://www.youtube-nocookie.com/embed/Tk8-N1kHa4g?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                frameborder: "0",
                allow: "autoplay;encrypted-media;picture-in-picture",
                allowfullscreen: ""
              }
            })
          ]
        )
      ]),
      _c(
        "details",
        {
          attrs: { id: "how-can-i-send-my-anonset-coins-to-my-hardware-wallet" }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#how-can-i-send-my-anonset-coins-to-my-hardware-wallet",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v("How can I send my anonset coins to my hardware wallet?")
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "Most hardware wallets communicate with servers to provide you with your balance.\nThis reveals your public key to the server, which damages your privacy - the hardware company can now theoretically link together all your addresses.\nAs a result "
            ),
            _c("strong", [_vm._v("it is not recommended")]),
            _vm._v(
              " that you send your mixed coins to an address associated with your hardware wallet unless you are confident that you have set up your hardware wallet in a way that it does not communicate with a 3rd party server (see below)."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You can, however, manage your hardware wallet with the Wasabi interface.\nAlternatively, you can use your hardware wallet with Electrum, which connects to your Bitcoin Core full node through "
            ),
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/chris-belcher/electrum-personal-server",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Electrum Personal Server"), _c("OutboundLink")],
              1
            ),
            _vm._v(", "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/kyuupichan/electrumx",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("ElectrumX"), _c("OutboundLink")],
              1
            ),
            _vm._v(" or "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/romanz/electrs",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Electrs"), _c("OutboundLink")],
              1
            ),
            _vm._v(".")
          ])
        ]
      ),
      _c("details", { attrs: { id: "what-can-i-do-with-small-change" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-can-i-do-with-small-change",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What can I do with small change?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "There are no hard and fast rules for what to do with the change.\nGenerally try to avoid the change and use the "
          ),
          _c("code", [_vm._v("Max")]),
          _vm._v(
            " button extensively to send whole coins.\nThe most problematic type of change is what has "
          ),
          _c("code", [_vm._v("anonymity set 1")]),
          _vm._v(" "),
          _c("img", {
            staticClass: "shield",
            attrs: { src: "/ShieldRed.png", alt: "red" }
          }),
          _vm._v(
            ".\nYou should treat it as a kind of toxic waste [handled with great care].\nYou can spend the change to the same entity as the initial transaction, without loosing any privacy.\nOnly spend the change to another entity, if these two won't make you trouble knowing you interact with both of them.\nIf needed, you can consolidate several change coins, but we advise you to do it in a CoinJoin.\nIn JoinMarket you can specify the exact amount of CoinJoin, so it can be exactly the amount of the change.\nOr open a new Lightning Network node (not your main Lightning node), create a channel to a random peer on the network and route the funds back to you."
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "custom-block tip" }, [
          _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
          _vm._v(" "),
          _c(
            "p",
            [
              _vm._v("For more information, see this "),
              _c(
                "router-link",
                { attrs: { to: "/using-wasabi/ChangeCoins.html" } },
                [_vm._v("dedicated chapter")]
              ),
              _vm._v(".")
            ],
            1
          )
        ])
      ]),
      _c("details", { attrs: { id: "how-can-i-mix-large-amounts" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#how-can-i-mix-large-amounts",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("How can I mix large amounts?")])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Use Unequal Input Mixing and gain fungibility for UTXOs of 0.1, 0.2, 0.4, 0.8, 1.6, 3.2, ... bitcoin!\nRead more: "
            ),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/FAQ/FAQ-UseWasabi.html#what-are-the-equal-denominations-created-in-one-mixing-round"
                }
              },
              [
                _vm._v(
                  "What are the equal denominations created in one mixing round?"
                )
              ]
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "ytEmbed",
            staticStyle: {
              "background-image":
                "url(https://img.youtube.com/vi/3Ezru07J674/hqdefault.jpg)"
            },
            attrs: { "data-id": "3Ezru07J674" }
          },
          [
            _c("iframe", {
              attrs: {
                title: "YouTube 3Ezru07J674",
                "data-src":
                  "https://www.youtube-nocookie.com/embed/3Ezru07J674?&autoplay=1&autohide=1&modestbranding=1&color=white&rel=0",
                frameborder: "0",
                allow: "autoplay;encrypted-media;picture-in-picture",
                allowfullscreen: ""
              }
            })
          ]
        )
      ]),
      _c(
        "details",
        { attrs: { id: "which-coins-can-i-select-for-coinjoins" } },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href: "#which-coins-can-i-select-for-coinjoins",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [_vm._v("Which coins can I select for CoinJoins?")])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "You can select any coin, as long as the total sum reaches the minimum to register (usually ~0.1 BTC)."
            )
          ])
        ]
      ),
      _c(
        "details",
        {
          attrs: {
            id:
              "why-do-my-coins-occasionally-get-banned-from-participating-in-coinjoin"
          }
        },
        [
          _c("summary", [
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#why-do-my-coins-occasionally-get-banned-from-participating-in-coinjoin",
                  "aria-hidden": "true"
                }
              },
              [_vm._v("#")]
            ),
            _vm._v(" "),
            _c("h4", [
              _vm._v(
                "Why do my coins occasionally get banned from participating in CoinJoin?"
              )
            ])
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "A CoinJoin consists of multiple users registering inputs (coins) and blinded outputs.\nOnce the appropriate number of participants have registered, the actual transaction (the CoinJoin) is constructed by the coordinator, and given to all participants in the span of about 60 seconds.\nAt this point, all registered participants must sign off on the CoinJoin, and if a single one of the participants fails to sign their input, the entire CoinJoin must be restarted."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "So this introduces a problem, or an attack vector - a malicious user could purposefully register coins, only to wait for the signing phase and not sign.\nThis would halt the entire CoinJoin process for all other participants and Wasabi would no longer work."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "So a simple solution looks like this - the coordinator could collect signatures from all inputs, and if one or more input refuses to sign, the coordinator could record that input and temporarily (or even permanently) ban that coin from participation.\nThis is a nice solution, as it mitigates a single coin from ruining all CoinJoins, but it too comes with trade-offs."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "For example, most of the time, users fail to sign a CoinJoin for non-malicious reasons.\nPerhaps their TOR connection went down in precisely that moment, or perhaps their WiFi had a temporary flicker at the wrong time.\nFurther, some users don't even realize that the signing phase is happening, and sometimes shut down their computer at exactly the wrong moment.\nAll of these things hinder a successful CoinJoin for all other participants, but by pure accident."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "If you are one of the victims of this temporary banning then simply wait for the ban to expire and try again.\nThe best thing you can do to avoid the issue is to have a strong internet connection and keep your computer online throughout the whole process."
            )
          ]),
          _vm._v(" "),
          _c("p", [
            _c("em", [_vm._v("NOTE")]),
            _vm._v(
              ": Banning does not mean freezing.\nYou can send banned coins to anyone you want.\nThis is a temporary ban on your coins in participation of the CoinJoin."
            )
          ])
        ]
      ),
      _c("details", { attrs: { id: "what-does-spent-coin-status-mean" } }, [
        _c("summary", [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#what-does-spent-coin-status-mean",
                "aria-hidden": "true"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" "),
          _c("h4", [_vm._v("What does spent coin status mean?")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("The "),
          _c("code", [_vm._v("spent")]),
          _vm._v(
            " coin status is a symptom of corrupted wallet state.\nThis used to be the largest known bug in Wasabi Wallet.\nIt affected about 1-5% of users.\nThis issue was introduced to Wasabi with the "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.4",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("v1.1.4 release"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " in April, 2019 by adding a wallet cache, that resulted in 12 times faster wallet load.\nIt was "
          ),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://old.reddit.com/r/WasabiWallet/comments/c2hco8/announcement_spent_coin_and_lost_unconfirmed/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("thought to be fixed"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " in June by adding an autocorrection mechanism, but some users are still reporting this issue, so it is not fixed."
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("It ultimately got fixed in "),
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.10",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("v1.1.10"), _c("OutboundLink")],
              1
            ),
            _vm._v(" by introducing an upgraded version of "),
            _c(
              "router-link",
              {
                attrs: {
                  to:
                    "/using-wasabi/BIPs.html#bip-158-compact-block-filters-for-light-clients/"
                }
              },
              [_vm._v("BIP 158 block filters")]
            ),
            _vm._v(" and changing the wallet cache architecture.")
          ],
          1
        )
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}