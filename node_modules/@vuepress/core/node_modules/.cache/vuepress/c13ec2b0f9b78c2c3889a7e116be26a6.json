{"remainingRequest":"/home/user/Journal/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/Journal/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/Journal/node_modules/vue-loader/lib/index.js??ref--1-1!/home/user/Journal/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/user/Journal/docs/.vuepress/variables.js!/home/user/Journal/docs/DailyThoughts.md?vue&type=template&id=78919c20&","dependencies":[{"path":"/home/user/Journal/docs/DailyThoughts.md","mtime":1580072753776},{"path":"/home/user/Journal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/Journal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user/Journal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/Journal/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/user/Journal/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000},{"path":"/home/user/Journal/docs/.vuepress/variables.js","mtime":1580040145177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMjAyMC0wMS0yNiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzIwMjAtMDEtMjYiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDIwMjAtMDEtMjYiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZZXQgYW5vdGhlciBhdHRlbXB0IHRvIGtlZXAgYSBqb3VybmFsIG9mIHRoZSBjb250ZW1wbGF0aW9ucyBvZiBteSBtaW5kLiBJdCBoYXMgYmVlbiBhIHRhc2sgdGhhdCBJIGhhdmUgbG9uZyBkZWVtZWQgdG8gYmUgaW1wb3J0YW50IGFuZCB2YWx1YWJsZSwgdGhvdWdoIG9uZSB0aGF0IEkgc2VsZG9tIGhhZCB0aGUgd2lsbCB0byBtYW5pZmVzdCBmb3IgcHJvbG9uZ2VkIHBlcmlvZHMuIEkgdXNlZCB0byB3cml0ZSB0aGVtIHdpdGggcGVuIGFuZCBwYXBlciwgdGhvdWdoIHRoYXQgd2FzIGEgZm9ybWF0IEkgZG9uJ3QgY2FyZSBmb3IgbXVjaC4gU28gd2l0aCB0aGlzIGF0dGVtcHQsIGl0IGlzIGEgbWFuaWZlc3RvIG9mIGN5YmVyc3BhY2UsIHdoZXJlIGtub3dsZWRnZSBjYW4gYmUgY3VyYXRlZCwgZWRpdGVkIGFuZCByZWZlcmVuY2VkIHdpdGggbW9yZSBudWFuY2UgYW5kIHRvb2xpbmcuIEkgaGF2ZSBnYXRoZXJlZCBwbGVudHkgb2YgZXhwZXJpZW5jZSB3aXRoIHRoZXNlIHRvb2xzIGJ5IHdyaXRpbmcgdGhlIFdhc2FiaSBkb2N1bWVudGF0aW9uIHNwZWNpZmljYWxseSwgYW5kIEkgZG8gbGlrZSB0aGlzIHNldHVwIHF1aXRlIGEgbG90LCBzbyBub3cgdGhlcmUgaXMgbm8gZXhjdXNlIHJlZ2FyZGluZyBzZXQgYW5kIHNldHRpbmcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlcmUgYXJlIHNvIG1hbnkgYXNwZWN0cyB0aGF0IEkgd291bGQgbGlrZSB0byBtYW5pZmVzdCBpbiB0aGlzIGpvdXJuYWwsIGFuZCBJJ20gbm90IHlldCBjZXJ0YWluIGhvdyB0byBiZXN0IHN0cnVjdHVyZSB0aGUgcHJvY2Vzcy4gU28gZmFyIEkgZGVjaWRlZCB0byBmb2N1cyBvbiBhIGRhaWx5IGpvdXJuYWwsIHdoZXJlIEkgY2FuIHJlZmxlY3Qgb24gdGhlIGdvYWxzIG9mIHRoYXQgZGF5LCBob3cgaXQgZXZvbHZlZCBhbmQgaWYgaXQgd2FzIHN1Y2Nlc3NmdWwuIEkgd291bGQgbGlrZSB0byBtYWtlIGF0IGxlYXN0IHRoaXMgcGFydCBvZiBteSBkYWlseSByb3V0aW5lLCBzbyB0byBoYXZlIGEgc3RhYmxlIGFuZCB3b3J0aCB3aGlsZSByZWNvcmQgb2YgaGFwcGVuaW5ncywgdGhhdCBJIGNhbiBpbmRleCBhbmQgc2VhcmNoIHRocm91Z2ggYXQgbGF0ZXIgdGltZS4gSXQgaXMgdXBvbiBvdGhlcnMgaW5mbHVlbmNlZCBieSBzdG9pYyB3cml0aW5ncyB0aGF0IHN0cmVzcyB0aGUgaW1wb3J0YW5jZSBvZiByZWZsZWN0aW5nIG9uIG9uZXMgdGhvdWdodHMgYW5kIHV0aWxpemluZyB0aGlzIHRlY2huaXF1ZSB0byBkZS1jbHV0dGVyIHRoZSBtaW5kIGFuZCBwcmlvcml0aXplIHRhc2tzLiBJIGFtIHZlcnkgY3VyaW91cyBob3cgdGhpcyB3aWxsIGdvLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRob3VnaCB0aGVyZSBhcmUgYWxzbyB0b3BpY3Mgd2hpY2ggSSB3b3VsZCBsaWtlIHRvIGNvbnRlbXBsYXRlIGZvciBwcm9sb25nZWQgcGVyaW9kcywgdGhpbmdzIHRoYXQgYXJlIG5vdCBlbmNhcHN1bGF0ZWQgd2l0aGluIG9uZSBzaW5nbGUgZGF5LCBidXQgd2hpY2ggc3RyZXRjaCBhY3Jvc3MgbXkgZW50aXJlIGV4cGVyaWVuY2UuIEZvciB0aGVzZSBJIGVudmlzaW9uIHRoZSBFc3NheXMgY2hhcHRlciwgd2hlcmUgbG9uZyBmb3JtIHdyaXRpbmdzLCB3aXRoIHJlcGVhdGVkIHJlLXJlYWRpbmdzIGFuZCBlZGl0cyBhcmUgaW4gb3JkZXIuIE5vdCB0byBrZWVwIGEgcmVjb3JkIG9mIHRoZSBkYXksIGJ1dCByYXRoZXIgb2YgYSBnZW5lcmFsIHN0YXRlIG9mIG1pbmQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW5kIGZpbmFsbHksIGEgY2hhcHRlciBvbiBQcm9zZSwgYW4gYXJjaGl2ZSBvZiBzaG9ydCBpbnNpZ2h0cywgcG9lbXMgYW5kIHB1bmNoIGxpbmVzIHRoYXQgYXJlIHZhbHVhYmxlIGFuZCBmcnVpdGZ1bCBmb3IgbWUuIFRoZXNlIGFyZSBtYWRlIGZvciByZWZlcmVuY2UgYW5kIHRvIGJ1aWxkIHVwIGEgdm9jYWJ1bGFyeSBvZiBiZWF1dGlmdWwgc3BlZWNoLiBUaGlzIGluIGdlbmVyYWwgaXMgb25lIG9mIHRoZSBhc3BlY3RzIHRoYXQgSSB3b3VsZCBsaWtlIHRvIGZvc3RlciB3aXRoIHRoaXMgaGFiaXQgb2Ygam91cm5hbGluZywgSSBhbHJlYWR5IGhhdmUgYSBkZWNlbnQgcmhldG9yaWMsIHRob3VnaCB0aGVyZSBpcyBwbGVudHkgb2Ygcm9vbSBmb3IgaW1wcm92ZW1lbnRzIG9uIG1ha2luZyBteSBzcGVlY2ggbW9yZSBkZWxpZ2h0ZnVsLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0kgYW0gdmVyeSBjdXJpb3VzIGhvdyB0aGUgb3B0aW9uIHRvIGVkaXQgdGhpcyBqb3VybmFsIHdpbGwgYWZmZWN0IG15IHByb2Nlc3MuIFdoZW4gd3JpdGluZyBvbiBwYXBlciwgdGhlIHdvcmRzIGFyZSBmb3IgZXZlciBhcyBzb29uIGFzIHRoZSBpbmsgZHJpZXMuIFRoaXMgbWFrZXMgdGhlIGFjdCBvZiB3cml0aW5nIG9uZSB0aGF0IGhhcyB0byBiZSB3ZWxsIGNvbnNpZGVyZWQgYW5kIGluIGFkdmFuY2UgYXJ0aWN1bGF0ZWQgdGhvcm91Z2hseSwgYXMgb3RoZXJ3aXNlIHRoZSB3b3JkcyBhcmUgbm90IG1lYW5pbmdmdWwgb3IgZml0dGluZy4gRnJvbSBteSBleHBlcmllbmNlIHNvIGZhciwgaGF2aW5nIHRoZSBvcHRpb24gdG8gZGVsZXRlLCByZS13cml0ZSBhbmQgZml4IHRoZSBjb250ZW50IGlzIHVzZWZ1bCB0byBhbGxvdyBmb3IgYSBzdGF0ZSBvZiBmbG93LCB3aGVyZSBJIGNhbiBoYWNrIG9uIHRoZSBrZXlib2FyZCB3aXRob3V0IG11Y2ggY2FyZSBmb3IgcHJvcGVyIHJoeXRobS4gVGhpcyBmcmVlIGZvcm0gb2YgY2hhbm5lbGluZyBpcyB3aGF0IGRvZXMgbWFrZSB0aGUgY29udGVudCBiZWF1dGlmdWwgYWZ0ZXIgYWxsLiBZZXMgdGhlcmUgYXJlIHNvbWUgcXVpcmtzIGFuZCBuaXRzIHRoYXQgaGF2ZSB0byBiZSBraW5rZWQgb3V0LCB0aG91Z2ggaW4gZ2VuZXJhbCBpdCB0dXJucyBvdXQgdG8gYmUgYSBnb29kIGZpcnN0IGdvLiBUaGlzIG1pZ2h0IGJlIHNvbWV3aGF0IHNpbWlsYXIgdG8gc3BlYWtpbmcgZnJlZSBzdHlsZSB3aXRob3V0IGEgc2NyaXB0IG9yIHNsaWRlcywgYSB3YXkgb2YgcHJlc2VudGF0aW9uIEkgYWx3YXlzIGZhbmN5IG1vc3QsIGFzIEkgY2FuIHN0cnVjdHVyZSB0aGUgc3Rvcnkgb24gdGhlIGdvLCBhbmQgcmVhY3Qgb24gbXkgZmVlbGluZ3MgYW5kIHN1cnJvdW5kaW5ncyBhcyB0aGUgd29yZHMgbGVhdmUgbWUuIFRob3VnaCB0aGVuIHRoZSBxdWVzdGlvbiBpcyBpZiBJIHNob3VsZCByZWFkIHRocm91Z2ggYW5kIGVkaXQgdGhlIHByZXZpb3VzIGRheXMgd29ydGggb2Ygam91cm5hbCwgdG8gc2VlIGlmIHdoYXQgSVwndmUgbWFuaWZlc3RlZCBpcyBtYWQgZ2liYmVyaXNoIG9yIGFjdHVhbCB2YWx1YWJsZSBpbnNpZ2h0cy4gQW5kIHdoYXQgaWYgaXQgaXMgYmFkbHkgYnJva2VuLCBkb2VzIGl0IGp1c3RpZnkgdG8gcmUtd3JpdGUgaGlzdG9yeSBhbmQgImZpeCIgd2hhdCBzZWVtcyB0byBiZSBzaGF0dGVyZWQsIG9yIGlzIHByZWNpc2VseSBpbiB0aGlzIGNoYW9zIHRoZSBpbnNpZ2h0IGFuZCBiZWF1dHkgdGhhdCBJIHdhbnQgdG8gZm9zdGVyIGluIHRoZSBmaXJzdCBwbGFjZT8nCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaG91Z2ggYWxyZWFkeSBJIGZlZWwgaG93IHRoaXMgcHJhY3RpY2UgaXMgaW5jcmVkaWJseSB2YWx1YWJsZSwgYW5kIEkndmUgd3JpdHRlbiBzbyBtdWNoIGluIHNvIGxpdHRsZSB0aW1lLCBhbmQgdGhhdCB3aXRob3V0IGhhdmluZyBwcm9wZXIgc3RydWN0dXJlIG9yIG1ldGhvZHMuIEkgd2FudCB0byByZWFkIHVwIG9uIG1vcmUgc3RyYXRlZ3kgb24gaG93IHRvIHByb3Blcmx5IGNoYW5uZWwgaW4gdGhpcyBqb3VybmFsLCBhbmQgbWFuaWZlc3QgbXkgdGhvdWdodHMgaW4gY3liZXJzcGFjZSBtb3JlIHRob3JvdWdobHkgYW5kIGNvbmNpc2VseS4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}